name: Test and Publish

on:
  repository_dispatch:
    types: [game_version_update, game_version_update_patch]
  push:
    branches:
      - v4.3.16
    paths:
      - '.github/workflows/test-and-publish.yml'
      - 'src/**'
      - 'build/**'
      - 'tests/**'
  pull_request:
    branches:
      - v4.3.16
    # will be triggereg when undrafting or requesting review
    types: [review_requested, ready_for_review]
    paths:
      - '.github/workflows/test-and-publish.yml'
      - 'src/**'
      - 'build/**'
      - 'tests/**'

env:
  # Disable the .NET logo in the console output.
  DOTNET_NOLOGO: true
  # Disable the .NET first time experience to skip caching NuGet packages and speed up the build.
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending .NET CLI telemetry to Microsoft.
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  TEST_FILTERS: "+[MCMv*]* -[MCM*.*Tests]* -[MCMv*]MCM.LightInject* -[*]System.Diagnostics.CodeAnalysis* -[*]BUTR.DependencyInjection* -[*]Bannerlord.BUTR.Shared* -[*]HarmonyLib.BUTR*"

jobs:
  test:
    name: Test and Build
    runs-on: windows-latest
    steps:
    - name: Tests Setup
      uses: butr/actions-tests-setup@v1.5.2
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        steam-login: ${{secrets.STEAM_LOGIN}}
        steam-password: ${{secrets.STEAM_PASSWORD}}
        stable-version: e1.7.0
        beta-version: e1.7.1
        stable-directory: 'bannerlord-stable'
        beta-directory: 'bannerlord-beta'

    - name: Test
      run: >-
          $stable_version=$env:STABLE_VERSION;
          $stable_version=$stable_version.substring(1);
          $beta_version=$env:BETA_VERSION;
          $beta_version=$beta_version.substring(1);
          dotnet test "tests/MCM.Tests/MCM.Tests.csproj" --configuration Stable_Debug -p:GameVersion=$stable_version -p:GameFolder="$PWD/bannerlord-stable";
          dotnet test "tests/MCM.Tests/MCM.Tests.csproj" --configuration Stable_Release -p:GameVersion=$stable_version -p:GameFolder="$PWD/bannerlord-stable";
          dotnet test "tests/MCM.Tests/MCM.Tests.csproj" --configuration Beta_Debug -p:GameVersion=$beta_version -p:GameFolder="$PWD/bannerlord-beta";
          dotnet test "tests/MCM.Tests/MCM.Tests.csproj" --configuration Beta_Release -p:GameVersion=$beta_version -p:GameFolder="$PWD/bannerlord-beta";
      env:
        STABLE_VERSION: e1.7.0
        BETA_VERSION: e1.7.1
      shell: pwsh

    - name: Test Coverage
      run: >-
          opencover/OpenCover.Console.exe -register -target:"dotnet.exe" -targetargs:"test tests/MCM.Tests/MCM.Tests.csproj --configuration Stable_Debug --no-build" -filter:"${{env.TEST_FILTERS}}" -excludebyattribute:"*.ExcludeFromCodeCoverage*" -output:coverage_mcm_stable_debug.xml -mergebyhash;
          opencover/OpenCover.Console.exe -register -target:"dotnet.exe" -targetargs:"test tests/MCM.Tests/MCM.Tests.csproj --configuration Stable_Release --no-build" -filter:"${{env.TEST_FILTERS}}" -excludebyattribute:"*.ExcludeFromCodeCoverage*" -output:coverage_mcm_stable_release.xml -mergebyhash;
          opencover/OpenCover.Console.exe -register -target:"dotnet.exe" -targetargs:"test tests/MCM.Tests/MCM.Tests.csproj --configuration Beta_Debug --no-build" -filter:"${{env.TEST_FILTERS}}" -excludebyattribute:"*.ExcludeFromCodeCoverage*" -output:coverage_mcm_beta_debug.xml -mergebyhash;
          opencover/OpenCover.Console.exe -register -target:"dotnet.exe" -targetargs:"test tests/MCM.Tests/MCM.Tests.csproj --configuration Beta_Release --no-build" -filter:"${{env.TEST_FILTERS}}" -excludebyattribute:"*.ExcludeFromCodeCoverage*" -output:coverage_mcm_beta_release.xml -mergebyhash;
      shell: pwsh

    - name: ReportGenerator
      uses: danielpalme/ReportGenerator-GitHub-Action@4.6.1
      with:
        reports: 'coverage_mcm_stable_debug.xml;coverage_mcm_stable_release.xml;coverage_mcm_beta_debug.xml;coverage_mcm_beta_release.xml'
        targetdir: 'coveragereport'
        reporttypes: 'HtmlInline;Cobertura'
        sourcedirs: './'
        tag: '${{ github.run_number }}_${{ github.run_id }}' # Optional tag or build version.

    - name: Upload ReportGenerator to GitHub
      uses: actions/upload-artifact@v1
      with:
        name: coverage-report
        path: coveragereport

    - name: Upload ReportGenerator to CodeCov
      uses: codecov/codecov-action@v1
      with:
        token: ${{secrets.CODECOV_TOKEN}}
        file: coveragereport/Cobertura.xml
        fail_ci_if_error: true

    # ignore Stable_Release and treat is as Release
    - name: Build MCM (Release)
      #if: ${{ github.ref == 'refs/heads/master' }}
      run: >-
        mkdir bannerlord-publish;
        dotnet build src/MCM.Publish/MCM.Publish.csproj --configuration Stable_Release -p:GameFolder="$PWD/bannerlord-publish";
      shell: pwsh

    - name: Upload Bannerlord folder
      #if: ${{ github.ref == 'refs/heads/master' }}
      uses: actions/upload-artifact@v2
      with:
        name: bannerlord
        path: ./bannerlord-publish/


###########################
#        NUGET/GPR        #
###########################
  publish-on-nuget:
    name: Publish on NuGet
    runs-on: ubuntu-latest
    #if: ${{ github.ref == 'refs/heads/master' }}
    needs: test
    steps:
    - name: Setup
      uses: butr/actions-common-setup@v2.0
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}

    - name: Install Bannerlord.ChangelogParser
      run: dotnet tool install -g Bannerlord.ChangelogParser
      shell: pwsh

    - name: Run ChangelogParser
      id: changelog
      run: |
        vers="$(bannerlord_changelog_parser latestversion -f "$PWD/changelog.txt")"
        echo "::set-output name=mod_version::$vers"
        desc="$(bannerlord_changelog_parser fulldescription -f "$PWD/changelog.txt")"
        desc="${desc//'%'/'%25'}"
        desc="${desc//$'\n'/'%0A'}"
        desc="${desc//$'\r'/'%0D'}"
        echo "::set-output name=mod_description::$desc"
      shell: bash

    - name: Pack MCM (Release)
      run: dotnet pack src/MCM/MCM.csproj --configuration Release -o "./packages";
      shell: pwsh

    - name: Push to NuGet
      run: dotnet nuget push "./packages/*.nupkg" -k ${{secrets.NUGET_API_KEY}} -s https://api.nuget.org/v3/index.json
      shell: pwsh

    - name: Push to GPR
      run: |
           for f in ./packages/*.nupkg
           do
             curl -vX PUT -u "vslee:${{secrets.GITHUB_TOKEN}}" -F package=@$f https://nuget.pkg.github.com/Aragas/
           done
      shell: bash

###########################
#         GITHUB          #
###########################
  publish-on-github:
    name: Publish on GitHub
    runs-on: ubuntu-latest
    #if: ${{ github.ref == 'refs/heads/master' }}
    needs: test
    steps:
    - name: Setup
      uses: butr/actions-common-setup@v2.0
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}

    - name: Download bannerlord folder
      uses: actions/download-artifact@v2
      with:
        name: bannerlord
        path: ./bannerlord

    - name: Zip MCM.Standalone
      run: 7z a -t7z MCM.Standalone.7z ./bannerlord/*
      #shell: pwsh
      # pwsh casues it to include the root folder

    - name: Install Bannerlord.ChangelogParser and Bannerlord.NexusmodsUploader
      run: >-
        dotnet tool install -g Bannerlord.ChangelogParser;
        dotnet tool install -g Bannerlord.NexusmodsUploader;
      shell: pwsh

    - name: Run ChangelogParser
      id: changelog
      run: |
        vers="$(bannerlord_changelog_parser latestversion -f "$PWD/changelog.txt")"
        echo "::set-output name=mod_version::$vers"
        desc="$(bannerlord_changelog_parser fulldescription -f "$PWD/changelog.txt")"
        desc="${desc//'%'/'%25'}"
        desc="${desc//$'\n'/'%0A'}"
        desc="${desc//$'\r'/'%0D'}"
        echo "::set-output name=mod_description::$desc"
      shell: bash

    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      with:
        tag_name: v${{steps.changelog.outputs.mod_version}}
        release_name: Release ${{steps.changelog.outputs.mod_version}}
        body: ${{steps.changelog.outputs.mod_description}}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{steps.create_release.outputs.upload_url}}
        asset_path: ./MCM.Standalone.7z
        asset_name: MCM.Standalone.7z
        asset_content_type: application/x-7z-compressed
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
