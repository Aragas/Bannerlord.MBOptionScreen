<Project>
  <!-- Workaround for https://github.com/NuGet/Home/issues/9431 -->
  <ItemGroup>
    <SourceRoot Include="$(NuGetPackageRoot)" Condition="'$(NuGetPackageRoot)' != ''" />
  </ItemGroup>  

  <Target Name="PostBuild" AfterTargets="PostBuildEvent" Condition="$(ModuleName) != ''">
    <CreateDirectory Directory="$(GameFolder)/Modules/$(ModuleName)/bin/Win64_Shipping_Client" />
    
    <CopyFolder FromDirectory="$(TargetDir)" ToDirectory="$(GameFolder)/Modules/$(ModuleName)/bin/Win64_Shipping_Client" Regex="^(?!MCM.Standalone).*\.dll$" Clean="true" />

    <CopyFolder FromDirectory="$(ProjectDir)/_Module" ToDirectory="$(GameFolder)/Modules/$(ModuleName)" Regex="^.*$" Clean="false" />

    <ReplaceFileText File="$(GameFolder)/Modules/$(ModuleName)/SubModule.xml" Regex="\$version\$" ReplacementText="$(Version)" />
  </Target>

  <UsingTask
    TaskName="CreateDirectory"
    TaskFactory="RoslynCodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <Directory ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            var directory = new DirectoryInfo(Directory);
            if (!directory.Exists)
                directory.Create();
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask
    TaskName="CopyFolder"
    TaskFactory="RoslynCodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <FromDirectory ParameterType="System.String" Required="true" />
      <ToDirectory ParameterType="System.String" Required="true" />
      <Regex ParameterType="System.String" Required="true" />
      <Clean ParameterType="System.Boolean" Required="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            void CopyTo(System.IO.DirectoryInfo from, System.IO.DirectoryInfo to)
            {
                if (!to.Exists)
                  to.Create();
            
                if (Clean)
                {
                    foreach (var fileInfo in to.GetFiles().Where(x => System.Text.RegularExpressions.Regex.IsMatch(x.Name, Regex)))
                        fileInfo.Delete();
                }
        
                foreach (var fileInfo in from.GetFiles().Where(x => System.Text.RegularExpressions.Regex.IsMatch(x.Name, Regex)))
                    fileInfo.CopyTo(System.IO.Path.Combine(to.FullName, fileInfo.Name), true);
                foreach (var directoryInfo in from.GetDirectories())
                    CopyTo(directoryInfo, to.CreateSubdirectory(directoryInfo.Name));
            }

            CopyTo(new System.IO.DirectoryInfo(FromDirectory), new System.IO.DirectoryInfo(ToDirectory));
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask
    TaskName="ReplaceFileText"
    TaskFactory="RoslynCodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <File ParameterType="System.String" Required="true" />
      <Regex ParameterType="System.String" Required="true" />
      <ReplacementText ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          System.IO.File.WriteAllText(
            File,
            System.Text.RegularExpressions.Regex.Replace(System.IO.File.ReadAllText(File), Regex, ReplacementText));
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
