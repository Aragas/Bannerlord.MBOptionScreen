{
  "api/MCM.Abstractions.Attributes.BaseSettingPropertyAttribute.html": {
    "href": "api/MCM.Abstractions.Attributes.BaseSettingPropertyAttribute.html",
    "title": "Class BaseSettingPropertyAttribute | MCM Documentation",
    "summary": "Class BaseSettingPropertyAttribute Namespace MCM.Abstractions.Attributes Assembly MCMv5.dll public abstract class BaseSettingPropertyAttribute : Attribute, IPropertyDefinitionBase Inheritance object Attribute BaseSettingPropertyAttribute Implements IPropertyDefinitionBase Derived SettingPropertyAttribute SettingPropertyBoolAttribute SettingPropertyButtonAttribute SettingPropertyDropdownAttribute SettingPropertyFloatingIntegerAttribute SettingPropertyIntegerAttribute SettingPropertyTextAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseSettingPropertyAttribute(string, int, bool, string) protected BaseSettingPropertyAttribute(string displayName, int order = -1, bool requireRestart = true, string hintText = \"\") Parameters displayName string order int requireRestart bool hintText string Properties DisplayName The display name of the setting in the settings menu. public string DisplayName { get; } Property Value string HintText The hint text that is displayed at the bottom of the screen when the user hovers over the setting in the settings menu. public string HintText { get; set; } Property Value string Order Require restart of the game if the value is changed. public int Order { get; set; } Property Value int RequireRestart Require restart of the game if the value is changed. public bool RequireRestart { get; set; } Property Value bool"
  },
  "api/MCM.Abstractions.Attributes.SettingPropertyGroupAttribute.html": {
    "href": "api/MCM.Abstractions.Attributes.SettingPropertyGroupAttribute.html",
    "title": "Class SettingPropertyGroupAttribute | MCM Documentation",
    "summary": "Class SettingPropertyGroupAttribute Namespace MCM.Abstractions.Attributes Assembly MCMv5.dll Tells the settings menu that this setting property should be in a group. All settings will automatically be grouped together if they have a SettingPropertyGroupAttribute with the same GroupName. [AttributeUsage(AttributeTargets.Property)] public sealed class SettingPropertyGroupAttribute : Attribute, IPropertyGroupDefinition Inheritance object Attribute SettingPropertyGroupAttribute Implements IPropertyGroupDefinition Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SettingPropertyGroupAttribute(string) Tells the settings menu that this setting property should be in a group. All settings will automatically be grouped together if they have a SettingPropertyGroupAttribute with the same GroupName. public SettingPropertyGroupAttribute(string groupName) Parameters groupName string The name of the setting group. Groups can set to be sub groups by separating the parent group's name and this group's name with a '/'. For example, \"Group 1/Group 2\" will name this group \"Group 2\" and place it as a sub group in \"Group 1\". Properties Default The default group used for settings that don't have a group explicitly set. public static IPropertyGroupDefinition Default { get; } Property Value IPropertyGroupDefinition GroupName The name of the settings group. Includes SubGroup notation if present. public string GroupName { get; } Property Value string GroupOrder public int GroupOrder { get; set; } Property Value int"
  },
  "api/MCM.Abstractions.Attributes.html": {
    "href": "api/MCM.Abstractions.Attributes.html",
    "title": "Namespace MCM.Abstractions.Attributes | MCM Documentation",
    "summary": "Namespace MCM.Abstractions.Attributes Classes BaseSettingPropertyAttribute SettingPropertyGroupAttribute Tells the settings menu that this setting property should be in a group. All settings will automatically be grouped together if they have a SettingPropertyGroupAttribute with the same GroupName."
  },
  "api/MCM.Abstractions.Attributes.v1.SettingPropertyAttribute.html": {
    "href": "api/MCM.Abstractions.Attributes.v1.SettingPropertyAttribute.html",
    "title": "Class SettingPropertyAttribute | MCM Documentation",
    "summary": "Class SettingPropertyAttribute Namespace MCM.Abstractions.Attributes.v1 Assembly MCMv5.dll Tells the Settings system that this property should be used for the settings menu. [AttributeUsage(AttributeTargets.Property)] public sealed class SettingPropertyAttribute : BaseSettingPropertyAttribute, IPropertyDefinitionBase, IPropertyDefinitionWithMinMax Inheritance object Attribute BaseSettingPropertyAttribute SettingPropertyAttribute Implements IPropertyDefinitionBase IPropertyDefinitionWithMinMax Inherited Members BaseSettingPropertyAttribute.DisplayName BaseSettingPropertyAttribute.Order BaseSettingPropertyAttribute.RequireRestart BaseSettingPropertyAttribute.HintText Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SettingPropertyAttribute(string) Tells the Settings system that this property should be used for the settings menu. public SettingPropertyAttribute(string displayName) Parameters displayName string The name to be displayed in the settings menu for this property. SettingPropertyAttribute(string, decimal, decimal) Tells the Settings system that this property should be used for the settings menu. public SettingPropertyAttribute(string displayName, decimal minValue, decimal maxValue) Parameters displayName string The name to be displayed in the settings menu for this property. minValue decimal The minimum int value that this property can be set to. This is used for the slider control. maxValue decimal The maximum int value that this property can be set to. This is used for the slider control. SettingPropertyAttribute(string, int, int) Tells the Settings system that this property should be used for the settings menu. public SettingPropertyAttribute(string displayName, int minValue, int maxValue) Parameters displayName string The name to be displayed in the settings menu for this property. minValue int The minimum int value that this property can be set to. This is used for the slider control. maxValue int The maximum int value that this property can be set to. This is used for the slider control. SettingPropertyAttribute(string, float, float) Tells the Settings system that this property should be used for the settings menu. public SettingPropertyAttribute(string displayName, float minValue, float maxValue) Parameters displayName string The name to be displayed in the settings menu for this property. minValue float The minimum float value that this property can be set to. This is used for the slider control. maxValue float The maximum float value that this property can be set to. This is used for the slider control. Properties MaxValue The maximum value the setting can be set to. Used by the slider control. public decimal MaxValue { get; } Property Value decimal MinValue The minimum value the setting can be set to. Used by the slider control. public decimal MinValue { get; } Property Value decimal"
  },
  "api/MCM.Abstractions.Attributes.v1.html": {
    "href": "api/MCM.Abstractions.Attributes.v1.html",
    "title": "Namespace MCM.Abstractions.Attributes.v1 | MCM Documentation",
    "summary": "Namespace MCM.Abstractions.Attributes.v1 Classes SettingPropertyAttribute Tells the Settings system that this property should be used for the settings menu."
  },
  "api/MCM.Abstractions.Attributes.v2.SettingPropertyBoolAttribute.html": {
    "href": "api/MCM.Abstractions.Attributes.v2.SettingPropertyBoolAttribute.html",
    "title": "Class SettingPropertyBoolAttribute | MCM Documentation",
    "summary": "Class SettingPropertyBoolAttribute Namespace MCM.Abstractions.Attributes.v2 Assembly MCMv5.dll [AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)] public sealed class SettingPropertyBoolAttribute : BaseSettingPropertyAttribute, IPropertyDefinitionBool, IPropertyDefinitionGroupToggle, IPropertyDefinitionBase Inheritance object Attribute BaseSettingPropertyAttribute SettingPropertyBoolAttribute Implements IPropertyDefinitionBool IPropertyDefinitionGroupToggle IPropertyDefinitionBase Inherited Members BaseSettingPropertyAttribute.DisplayName BaseSettingPropertyAttribute.Order BaseSettingPropertyAttribute.RequireRestart BaseSettingPropertyAttribute.HintText Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SettingPropertyBoolAttribute(string) public SettingPropertyBoolAttribute(string displayName) Parameters displayName string Properties IsToggle public bool IsToggle { get; set; } Property Value bool"
  },
  "api/MCM.Abstractions.Attributes.v2.SettingPropertyButtonAttribute.html": {
    "href": "api/MCM.Abstractions.Attributes.v2.SettingPropertyButtonAttribute.html",
    "title": "Class SettingPropertyButtonAttribute | MCM Documentation",
    "summary": "Class SettingPropertyButtonAttribute Namespace MCM.Abstractions.Attributes.v2 Assembly MCMv5.dll [AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)] public sealed class SettingPropertyButtonAttribute : BaseSettingPropertyAttribute, IPropertyDefinitionButton, IPropertyDefinitionBase Inheritance object Attribute BaseSettingPropertyAttribute SettingPropertyButtonAttribute Implements IPropertyDefinitionButton IPropertyDefinitionBase Inherited Members BaseSettingPropertyAttribute.DisplayName BaseSettingPropertyAttribute.Order BaseSettingPropertyAttribute.RequireRestart BaseSettingPropertyAttribute.HintText Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SettingPropertyButtonAttribute(string, int, bool, string) public SettingPropertyButtonAttribute(string displayName, int order = -1, bool requireRestart = true, string hintText = \"\") Parameters displayName string order int requireRestart bool hintText string Properties Content public string Content { get; set; } Property Value string"
  },
  "api/MCM.Abstractions.Attributes.v2.SettingPropertyDropdownAttribute.html": {
    "href": "api/MCM.Abstractions.Attributes.v2.SettingPropertyDropdownAttribute.html",
    "title": "Class SettingPropertyDropdownAttribute | MCM Documentation",
    "summary": "Class SettingPropertyDropdownAttribute Namespace MCM.Abstractions.Attributes.v2 Assembly MCMv5.dll [AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)] public sealed class SettingPropertyDropdownAttribute : BaseSettingPropertyAttribute, IPropertyDefinitionDropdown, IPropertyDefinitionBase Inheritance object Attribute BaseSettingPropertyAttribute SettingPropertyDropdownAttribute Implements IPropertyDefinitionDropdown IPropertyDefinitionBase Inherited Members BaseSettingPropertyAttribute.DisplayName BaseSettingPropertyAttribute.Order BaseSettingPropertyAttribute.RequireRestart BaseSettingPropertyAttribute.HintText Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SettingPropertyDropdownAttribute(string) public SettingPropertyDropdownAttribute(string displayName) Parameters displayName string Properties SelectedIndex public int SelectedIndex { get; } Property Value int"
  },
  "api/MCM.Abstractions.Attributes.v2.SettingPropertyFloatingIntegerAttribute.html": {
    "href": "api/MCM.Abstractions.Attributes.v2.SettingPropertyFloatingIntegerAttribute.html",
    "title": "Class SettingPropertyFloatingIntegerAttribute | MCM Documentation",
    "summary": "Class SettingPropertyFloatingIntegerAttribute Namespace MCM.Abstractions.Attributes.v2 Assembly MCMv5.dll [AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)] public sealed class SettingPropertyFloatingIntegerAttribute : BaseSettingPropertyAttribute, IPropertyDefinitionBase, IPropertyDefinitionWithMinMax, IPropertyDefinitionWithFormat, IPropertyDefinitionWithCustomFormatter Inheritance object Attribute BaseSettingPropertyAttribute SettingPropertyFloatingIntegerAttribute Implements IPropertyDefinitionBase IPropertyDefinitionWithMinMax IPropertyDefinitionWithFormat IPropertyDefinitionWithCustomFormatter Inherited Members BaseSettingPropertyAttribute.DisplayName BaseSettingPropertyAttribute.Order BaseSettingPropertyAttribute.RequireRestart BaseSettingPropertyAttribute.HintText Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SettingPropertyFloatingIntegerAttribute(string, float, float, string) public SettingPropertyFloatingIntegerAttribute(string displayName, float minValue, float maxValue, string valueFormat = \"0.00\") Parameters displayName string minValue float maxValue float valueFormat string Properties CustomFormatter public Type? CustomFormatter { get; set; } Property Value Type MaxValue The maximum value the setting can be set to. Used by the slider control. public decimal MaxValue { get; } Property Value decimal MinValue The minimum value the setting can be set to. Used by the slider control. public decimal MinValue { get; } Property Value decimal ValueFormat The format in which the slider's value will be displayed in. public string ValueFormat { get; } Property Value string"
  },
  "api/MCM.Abstractions.Attributes.v2.SettingPropertyIntegerAttribute.html": {
    "href": "api/MCM.Abstractions.Attributes.v2.SettingPropertyIntegerAttribute.html",
    "title": "Class SettingPropertyIntegerAttribute | MCM Documentation",
    "summary": "Class SettingPropertyIntegerAttribute Namespace MCM.Abstractions.Attributes.v2 Assembly MCMv5.dll [AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)] public sealed class SettingPropertyIntegerAttribute : BaseSettingPropertyAttribute, IPropertyDefinitionBase, IPropertyDefinitionWithMinMax, IPropertyDefinitionWithFormat, IPropertyDefinitionWithCustomFormatter Inheritance object Attribute BaseSettingPropertyAttribute SettingPropertyIntegerAttribute Implements IPropertyDefinitionBase IPropertyDefinitionWithMinMax IPropertyDefinitionWithFormat IPropertyDefinitionWithCustomFormatter Inherited Members BaseSettingPropertyAttribute.DisplayName BaseSettingPropertyAttribute.Order BaseSettingPropertyAttribute.RequireRestart BaseSettingPropertyAttribute.HintText Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SettingPropertyIntegerAttribute(string, int, int, string) public SettingPropertyIntegerAttribute(string displayName, int minValue, int maxValue, string valueFormat = \"0\") Parameters displayName string minValue int maxValue int valueFormat string Properties CustomFormatter public Type? CustomFormatter { get; set; } Property Value Type MaxValue The maximum value the setting can be set to. Used by the slider control. public decimal MaxValue { get; } Property Value decimal MinValue The minimum value the setting can be set to. Used by the slider control. public decimal MinValue { get; } Property Value decimal ValueFormat The format in which the slider's value will be displayed in. public string ValueFormat { get; } Property Value string"
  },
  "api/MCM.Abstractions.Attributes.v2.SettingPropertyTextAttribute.html": {
    "href": "api/MCM.Abstractions.Attributes.v2.SettingPropertyTextAttribute.html",
    "title": "Class SettingPropertyTextAttribute | MCM Documentation",
    "summary": "Class SettingPropertyTextAttribute Namespace MCM.Abstractions.Attributes.v2 Assembly MCMv5.dll [AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)] public sealed class SettingPropertyTextAttribute : BaseSettingPropertyAttribute, IPropertyDefinitionText, IPropertyDefinitionBase Inheritance object Attribute BaseSettingPropertyAttribute SettingPropertyTextAttribute Implements IPropertyDefinitionText IPropertyDefinitionBase Inherited Members BaseSettingPropertyAttribute.DisplayName BaseSettingPropertyAttribute.Order BaseSettingPropertyAttribute.RequireRestart BaseSettingPropertyAttribute.HintText Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SettingPropertyTextAttribute(string, int, bool, string) public SettingPropertyTextAttribute(string displayName, int order = -1, bool requireRestart = true, string hintText = \"\") Parameters displayName string order int requireRestart bool hintText string"
  },
  "api/MCM.Abstractions.Attributes.v2.html": {
    "href": "api/MCM.Abstractions.Attributes.v2.html",
    "title": "Namespace MCM.Abstractions.Attributes.v2 | MCM Documentation",
    "summary": "Namespace MCM.Abstractions.Attributes.v2 Classes SettingPropertyBoolAttribute SettingPropertyButtonAttribute SettingPropertyDropdownAttribute SettingPropertyFloatingIntegerAttribute SettingPropertyIntegerAttribute SettingPropertyTextAttribute"
  },
  "api/MCM.Abstractions.Base.BaseSettings.html": {
    "href": "api/MCM.Abstractions.Base.BaseSettings.html",
    "title": "Class BaseSettings | MCM Documentation",
    "summary": "Class BaseSettings Namespace MCM.Abstractions.Base Assembly MCMv5.dll Base model for MCM settings public abstract class BaseSettings : INotifyPropertyChanged Inheritance object BaseSettings Implements INotifyPropertyChanged Derived GlobalSettings SettingsWrapper PerCampaignSettings PerSaveSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings) BaseSettingsExtensions.GetExternalPresets(BaseSettings) BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) Fields DefaultPresetId public const string DefaultPresetId = \"default\" Field Value string DefaultPresetName public const string DefaultPresetName = \"{=BaseSettings_Default}Default\" Field Value string LoadingComplete public const string LoadingComplete = \"LOADING_COMPLETE\" Field Value string SaveTriggered public const string SaveTriggered = \"SAVE_TRIGGERED\" Field Value string Properties DiscoveryType public virtual string DiscoveryType { get; } Property Value string DisplayName The display name of the setting in the settings menu. public abstract string DisplayName { get; } Property Value string FolderName public virtual string FolderName { get; } Property Value string FormatType public virtual string FormatType { get; } Property Value string Id Unique identifier used to save to file. Make sure this is unique to your mod. public abstract string Id { get; } Property Value string SubFolder If you want this settings file stored inside a subfolder, set this to the name of the subfolder. public virtual string SubFolder { get; } Property Value string SubGroupDelimiter public virtual char SubGroupDelimiter { get; } Property Value char UIVersion public virtual int UIVersion { get; } Property Value int Methods CopyAsNew() public virtual BaseSettings CopyAsNew() Returns BaseSettings CreateNew() public virtual BaseSettings CreateNew() Returns BaseSettings GetBuiltInPresets() public virtual IEnumerable<ISettingsPreset> GetBuiltInPresets() Returns IEnumerable<ISettingsPreset> OnPropertyChanged(string?) public virtual void OnPropertyChanged(string? propertyName = null) Parameters propertyName string Events PropertyChanged public virtual event PropertyChangedEventHandler? PropertyChanged Event Type PropertyChangedEventHandler"
  },
  "api/MCM.Abstractions.Base.Global.AttributeGlobalSettings-1.html": {
    "href": "api/MCM.Abstractions.Base.Global.AttributeGlobalSettings-1.html",
    "title": "Class AttributeGlobalSettings<T> | MCM Documentation",
    "summary": "Class AttributeGlobalSettings<T> Namespace MCM.Abstractions.Base.Global Assembly MCMv5.dll public abstract class AttributeGlobalSettings<T> : GlobalSettings<T>, INotifyPropertyChanged where T : GlobalSettings, new() Type Parameters T Inheritance object BaseSettings GlobalSettings GlobalSettings<T> AttributeGlobalSettings<T> Implements INotifyPropertyChanged Inherited Members GlobalSettings<T>.Instance GlobalSettings.Cache GlobalSettings.CacheInstance BaseSettings.SaveTriggered BaseSettings.LoadingComplete BaseSettings.DefaultPresetId BaseSettings.DefaultPresetName BaseSettings.PropertyChanged BaseSettings.Id BaseSettings.DisplayName BaseSettings.FolderName BaseSettings.SubFolder BaseSettings.FormatType BaseSettings.UIVersion BaseSettings.SubGroupDelimiter BaseSettings.OnPropertyChanged(string) BaseSettings.CreateNew() BaseSettings.CopyAsNew() BaseSettings.GetBuiltInPresets() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings) BaseSettingsExtensions.GetExternalPresets(BaseSettings) BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) Properties DiscoveryType public override sealed string DiscoveryType { get; } Property Value string"
  },
  "api/MCM.Abstractions.Base.Global.BaseFluentGlobalSettingsWrapper.html": {
    "href": "api/MCM.Abstractions.Base.Global.BaseFluentGlobalSettingsWrapper.html",
    "title": "Class BaseFluentGlobalSettingsWrapper | MCM Documentation",
    "summary": "Class BaseFluentGlobalSettingsWrapper Namespace MCM.Abstractions.Base.Global Assembly MCMv5.dll [Obsolete(\"Will be removed from future API\", true)] public abstract class BaseFluentGlobalSettingsWrapper : FluentGlobalSettings, INotifyPropertyChanged, IFluentSettings, IWrapper Inheritance object BaseSettings GlobalSettings FluentGlobalSettings BaseFluentGlobalSettingsWrapper Implements INotifyPropertyChanged IFluentSettings IWrapper Inherited Members FluentGlobalSettings.Id FluentGlobalSettings.DisplayName FluentGlobalSettings.FolderName FluentGlobalSettings.SubFolder FluentGlobalSettings.FormatType FluentGlobalSettings.DiscoveryType FluentGlobalSettings.UIVersion FluentGlobalSettings.SubGroupDelimiter FluentGlobalSettings.PropertyChanged FluentGlobalSettings.SettingPropertyGroups FluentGlobalSettings.Register() FluentGlobalSettings.Unregister() FluentGlobalSettings.CreateNew() FluentGlobalSettings.GetBuiltInPresets() GlobalSettings.Cache GlobalSettings.CacheInstance BaseSettings.SaveTriggered BaseSettings.LoadingComplete BaseSettings.DefaultPresetId BaseSettings.DefaultPresetName BaseSettings.OnPropertyChanged(string) BaseSettings.CopyAsNew() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings) BaseSettingsExtensions.GetExternalPresets(BaseSettings) BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) Constructors BaseFluentGlobalSettingsWrapper(object, string, string, string, string, string, int, char, PropertyChangedEventHandler?, IEnumerable<SettingsPropertyGroupDefinition>, IEnumerable<ISettingsPresetBuilder>) protected BaseFluentGlobalSettingsWrapper(object @object, string id, string displayName, string folderName, string subFolder, string format, int uiVersion, char subGroupDelimiter, PropertyChangedEventHandler? onPropertyChanged, IEnumerable<SettingsPropertyGroupDefinition> settingPropertyGroups, IEnumerable<ISettingsPresetBuilder> presets) Parameters object object id string displayName string folderName string subFolder string format string uiVersion int subGroupDelimiter char onPropertyChanged PropertyChangedEventHandler settingPropertyGroups IEnumerable<SettingsPropertyGroupDefinition> presets IEnumerable<ISettingsPresetBuilder> Properties Object public object Object { get; protected set; } Property Value object"
  },
  "api/MCM.Abstractions.Base.Global.BaseGlobalSettingsWrapper.html": {
    "href": "api/MCM.Abstractions.Base.Global.BaseGlobalSettingsWrapper.html",
    "title": "Class BaseGlobalSettingsWrapper | MCM Documentation",
    "summary": "Class BaseGlobalSettingsWrapper Namespace MCM.Abstractions.Base.Global Assembly MCMv5.dll [Obsolete(\"Will be removed from future API\", true)] public abstract class BaseGlobalSettingsWrapper : GlobalSettings, INotifyPropertyChanged, IWrapper Inheritance object BaseSettings GlobalSettings BaseGlobalSettingsWrapper Implements INotifyPropertyChanged IWrapper Inherited Members GlobalSettings.Cache GlobalSettings.CacheInstance BaseSettings.SaveTriggered BaseSettings.LoadingComplete BaseSettings.DefaultPresetId BaseSettings.DefaultPresetName BaseSettings.PropertyChanged BaseSettings.Id BaseSettings.DisplayName BaseSettings.FolderName BaseSettings.SubFolder BaseSettings.FormatType BaseSettings.DiscoveryType BaseSettings.UIVersion BaseSettings.SubGroupDelimiter BaseSettings.OnPropertyChanged(string) BaseSettings.CreateNew() BaseSettings.CopyAsNew() BaseSettings.GetBuiltInPresets() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings) BaseSettingsExtensions.GetExternalPresets(BaseSettings) BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) Constructors BaseGlobalSettingsWrapper(object) protected BaseGlobalSettingsWrapper(object @object) Parameters object object Properties Object public object Object { get; protected set; } Property Value object"
  },
  "api/MCM.Abstractions.Base.Global.EmptyGlobalSettings.html": {
    "href": "api/MCM.Abstractions.Base.Global.EmptyGlobalSettings.html",
    "title": "Class EmptyGlobalSettings | MCM Documentation",
    "summary": "Class EmptyGlobalSettings Namespace MCM.Abstractions.Base.Global Assembly MCMv5.dll public sealed class EmptyGlobalSettings : GlobalSettings<EmptyGlobalSettings>, INotifyPropertyChanged Inheritance object BaseSettings GlobalSettings GlobalSettings<EmptyGlobalSettings> EmptyGlobalSettings Implements INotifyPropertyChanged Inherited Members GlobalSettings<EmptyGlobalSettings>.Instance BaseSettings.SaveTriggered BaseSettings.LoadingComplete BaseSettings.DefaultPresetId BaseSettings.DefaultPresetName BaseSettings.PropertyChanged BaseSettings.FolderName BaseSettings.SubFolder BaseSettings.FormatType BaseSettings.DiscoveryType BaseSettings.UIVersion BaseSettings.SubGroupDelimiter BaseSettings.OnPropertyChanged(string) BaseSettings.CreateNew() BaseSettings.CopyAsNew() BaseSettings.GetBuiltInPresets() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings) BaseSettingsExtensions.GetExternalPresets(BaseSettings) BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) Properties DisplayName The display name of the setting in the settings menu. public override string DisplayName { get; } Property Value string Id Unique identifier used to save to file. Make sure this is unique to your mod. public override string Id { get; } Property Value string"
  },
  "api/MCM.Abstractions.Base.Global.ExternalGlobalSettings.html": {
    "href": "api/MCM.Abstractions.Base.Global.ExternalGlobalSettings.html",
    "title": "Class ExternalGlobalSettings | MCM Documentation",
    "summary": "Class ExternalGlobalSettings Namespace MCM.Abstractions.Base.Global Assembly MCMv5.dll public sealed class ExternalGlobalSettings : FluentGlobalSettings, INotifyPropertyChanged, IFluentSettings Inheritance object BaseSettings GlobalSettings FluentGlobalSettings ExternalGlobalSettings Implements INotifyPropertyChanged IFluentSettings Inherited Members FluentGlobalSettings.Id FluentGlobalSettings.DisplayName FluentGlobalSettings.FolderName FluentGlobalSettings.SubFolder FluentGlobalSettings.FormatType FluentGlobalSettings.DiscoveryType FluentGlobalSettings.UIVersion FluentGlobalSettings.SubGroupDelimiter FluentGlobalSettings.PropertyChanged FluentGlobalSettings.SettingPropertyGroups FluentGlobalSettings.Register() FluentGlobalSettings.Unregister() FluentGlobalSettings.CreateNew() FluentGlobalSettings.GetBuiltInPresets() BaseSettings.SaveTriggered BaseSettings.LoadingComplete BaseSettings.DefaultPresetId BaseSettings.DefaultPresetName BaseSettings.OnPropertyChanged(string) BaseSettings.CopyAsNew() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings) BaseSettingsExtensions.GetExternalPresets(BaseSettings) BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) Properties FilePath public string FilePath { get; init; } Property Value string Methods CreateFromXmlFile(string, PropertyChangedEventHandler?) public static ExternalGlobalSettings? CreateFromXmlFile(string filePath, PropertyChangedEventHandler? propertyChanged = null) Parameters filePath string propertyChanged PropertyChangedEventHandler Returns ExternalGlobalSettings"
  },
  "api/MCM.Abstractions.Base.Global.FluentGlobalSettings.html": {
    "href": "api/MCM.Abstractions.Base.Global.FluentGlobalSettings.html",
    "title": "Class FluentGlobalSettings | MCM Documentation",
    "summary": "Class FluentGlobalSettings Namespace MCM.Abstractions.Base.Global Assembly MCMv5.dll public class FluentGlobalSettings : GlobalSettings, INotifyPropertyChanged, IFluentSettings Inheritance object BaseSettings GlobalSettings FluentGlobalSettings Implements INotifyPropertyChanged IFluentSettings Derived BaseFluentGlobalSettingsWrapper ExternalGlobalSettings Inherited Members GlobalSettings.Cache GlobalSettings.CacheInstance BaseSettings.SaveTriggered BaseSettings.LoadingComplete BaseSettings.DefaultPresetId BaseSettings.DefaultPresetName BaseSettings.OnPropertyChanged(string) BaseSettings.CopyAsNew() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings) BaseSettingsExtensions.GetExternalPresets(BaseSettings) BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) Constructors FluentGlobalSettings(string, string, string, string, string, int, char, PropertyChangedEventHandler?, IEnumerable<SettingsPropertyGroupDefinition>, IEnumerable<ISettingsPresetBuilder>) public FluentGlobalSettings(string id, string displayName, string folderName, string subFolder, string format, int uiVersion, char subGroupDelimiter, PropertyChangedEventHandler? onPropertyChanged, IEnumerable<SettingsPropertyGroupDefinition> settingPropertyGroups, IEnumerable<ISettingsPresetBuilder> presets) Parameters id string displayName string folderName string subFolder string format string uiVersion int subGroupDelimiter char onPropertyChanged PropertyChangedEventHandler settingPropertyGroups IEnumerable<SettingsPropertyGroupDefinition> presets IEnumerable<ISettingsPresetBuilder> Properties DiscoveryType public override string DiscoveryType { get; } Property Value string DisplayName The display name of the setting in the settings menu. public override sealed string DisplayName { get; } Property Value string FolderName public override sealed string FolderName { get; } Property Value string FormatType public override sealed string FormatType { get; } Property Value string Id Unique identifier used to save to file. Make sure this is unique to your mod. public override sealed string Id { get; } Property Value string SettingPropertyGroups public List<SettingsPropertyGroupDefinition> SettingPropertyGroups { get; } Property Value List<SettingsPropertyGroupDefinition> SubFolder If you want this settings file stored inside a subfolder, set this to the name of the subfolder. public override sealed string SubFolder { get; } Property Value string SubGroupDelimiter public override sealed char SubGroupDelimiter { get; } Property Value char UIVersion public override sealed int UIVersion { get; } Property Value int Methods CreateNew() public override sealed BaseSettings CreateNew() Returns BaseSettings GetBuiltInPresets() public override sealed IEnumerable<ISettingsPreset> GetBuiltInPresets() Returns IEnumerable<ISettingsPreset> Register() public void Register() Unregister() public void Unregister() Events PropertyChanged public override sealed event PropertyChangedEventHandler? PropertyChanged Event Type PropertyChangedEventHandler"
  },
  "api/MCM.Abstractions.Base.Global.GlobalSettings-1.html": {
    "href": "api/MCM.Abstractions.Base.Global.GlobalSettings-1.html",
    "title": "Class GlobalSettings<T> | MCM Documentation",
    "summary": "Class GlobalSettings<T> Namespace MCM.Abstractions.Base.Global Assembly MCMv5.dll public abstract class GlobalSettings<T> : GlobalSettings, INotifyPropertyChanged where T : GlobalSettings, new() Type Parameters T Inheritance object BaseSettings GlobalSettings GlobalSettings<T> Implements INotifyPropertyChanged Derived AttributeGlobalSettings<T> EmptyGlobalSettings Inherited Members GlobalSettings.Cache GlobalSettings.CacheInstance BaseSettings.SaveTriggered BaseSettings.LoadingComplete BaseSettings.DefaultPresetId BaseSettings.DefaultPresetName BaseSettings.PropertyChanged BaseSettings.Id BaseSettings.DisplayName BaseSettings.FolderName BaseSettings.SubFolder BaseSettings.FormatType BaseSettings.DiscoveryType BaseSettings.UIVersion BaseSettings.SubGroupDelimiter BaseSettings.OnPropertyChanged(string) BaseSettings.CreateNew() BaseSettings.CopyAsNew() BaseSettings.GetBuiltInPresets() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings) BaseSettingsExtensions.GetExternalPresets(BaseSettings) BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) Properties Instance A modder flriendly way to get settings from any place public static T? Instance { get; } Property Value T"
  },
  "api/MCM.Abstractions.Base.Global.GlobalSettings.html": {
    "href": "api/MCM.Abstractions.Base.Global.GlobalSettings.html",
    "title": "Class GlobalSettings | MCM Documentation",
    "summary": "Class GlobalSettings Namespace MCM.Abstractions.Base.Global Assembly MCMv5.dll public abstract class GlobalSettings : BaseSettings, INotifyPropertyChanged Inheritance object BaseSettings GlobalSettings Implements INotifyPropertyChanged Derived BaseGlobalSettingsWrapper FluentGlobalSettings GlobalSettings<T> Inherited Members BaseSettings.SaveTriggered BaseSettings.LoadingComplete BaseSettings.DefaultPresetId BaseSettings.DefaultPresetName BaseSettings.PropertyChanged BaseSettings.Id BaseSettings.DisplayName BaseSettings.FolderName BaseSettings.SubFolder BaseSettings.FormatType BaseSettings.DiscoveryType BaseSettings.UIVersion BaseSettings.SubGroupDelimiter BaseSettings.OnPropertyChanged(string) BaseSettings.CreateNew() BaseSettings.CopyAsNew() BaseSettings.GetBuiltInPresets() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings) BaseSettingsExtensions.GetExternalPresets(BaseSettings) BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) Fields Cache protected static readonly ConcurrentDictionary<Type, string> Cache Field Value ConcurrentDictionary<Type, string> CacheInstance protected static readonly ConcurrentDictionary<string, BaseSettings?> CacheInstance Field Value ConcurrentDictionary<string, BaseSettings>"
  },
  "api/MCM.Abstractions.Base.Global.SettingsWrapper.html": {
    "href": "api/MCM.Abstractions.Base.Global.SettingsWrapper.html",
    "title": "Class SettingsWrapper | MCM Documentation",
    "summary": "Class SettingsWrapper Namespace MCM.Abstractions.Base.Global Assembly MCMv5.dll public abstract class SettingsWrapper : BaseSettings, INotifyPropertyChanged, IWrapper Inheritance object BaseSettings SettingsWrapper Implements INotifyPropertyChanged IWrapper Inherited Members BaseSettings.SaveTriggered BaseSettings.LoadingComplete BaseSettings.DefaultPresetId BaseSettings.DefaultPresetName BaseSettings.DiscoveryType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings) BaseSettingsExtensions.GetExternalPresets(BaseSettings) BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) Constructors SettingsWrapper(object?) protected SettingsWrapper(object? @object) Parameters object object Properties DisplayName The display name of the setting in the settings menu. public override string DisplayName { get; } Property Value string FolderName public override string FolderName { get; } Property Value string FormatType public override string FormatType { get; } Property Value string Id Unique identifier used to save to file. Make sure this is unique to your mod. public override string Id { get; } Property Value string Object public object? Object { get; } Property Value object SubFolder If you want this settings file stored inside a subfolder, set this to the name of the subfolder. public override string SubFolder { get; } Property Value string SubGroupDelimiter public override char SubGroupDelimiter { get; } Property Value char UIVersion public override int UIVersion { get; } Property Value int Methods CopyAsNew() public override BaseSettings CopyAsNew() Returns BaseSettings Create(object?) protected abstract BaseSettings Create(object? @object) Parameters object object Returns BaseSettings CreateNew() public override BaseSettings CreateNew() Returns BaseSettings CreatePreset(object?) protected abstract ISettingsPreset CreatePreset(object? @object) Parameters object object Returns ISettingsPreset GetBuiltInPresets() public override IEnumerable<ISettingsPreset> GetBuiltInPresets() Returns IEnumerable<ISettingsPreset> OnPropertyChanged(string?) public override void OnPropertyChanged(string? propertyName = null) Parameters propertyName string Events PropertyChanged public override event PropertyChangedEventHandler? PropertyChanged Event Type PropertyChangedEventHandler"
  },
  "api/MCM.Abstractions.Base.Global.html": {
    "href": "api/MCM.Abstractions.Base.Global.html",
    "title": "Namespace MCM.Abstractions.Base.Global | MCM Documentation",
    "summary": "Namespace MCM.Abstractions.Base.Global Classes AttributeGlobalSettings<T> BaseFluentGlobalSettingsWrapper BaseGlobalSettingsWrapper EmptyGlobalSettings ExternalGlobalSettings FluentGlobalSettings GlobalSettings GlobalSettings<T> SettingsWrapper"
  },
  "api/MCM.Abstractions.Base.IFluentSettings.html": {
    "href": "api/MCM.Abstractions.Base.IFluentSettings.html",
    "title": "Interface IFluentSettings | MCM Documentation",
    "summary": "Interface IFluentSettings Namespace MCM.Abstractions.Base Assembly MCMv5.dll Interface that declares that the settings a fluent dynamic settings [Obsolete(\"Will be internal in the future\")] public interface IFluentSettings Properties SettingPropertyGroups List<SettingsPropertyGroupDefinition> SettingPropertyGroups { get; } Property Value List<SettingsPropertyGroupDefinition>"
  },
  "api/MCM.Abstractions.Base.PerCampaign.AttributePerCampaignSettings-1.html": {
    "href": "api/MCM.Abstractions.Base.PerCampaign.AttributePerCampaignSettings-1.html",
    "title": "Class AttributePerCampaignSettings<T> | MCM Documentation",
    "summary": "Class AttributePerCampaignSettings<T> Namespace MCM.Abstractions.Base.PerCampaign Assembly MCMv5.dll public abstract class AttributePerCampaignSettings<T> : PerCampaignSettings<T>, INotifyPropertyChanged where T : PerCampaignSettings, new() Type Parameters T Inheritance object BaseSettings PerCampaignSettings PerCampaignSettings<T> AttributePerCampaignSettings<T> Implements INotifyPropertyChanged Inherited Members PerCampaignSettings<T>.Instance PerCampaignSettings.Cache PerCampaignSettings.CacheInstance PerCampaignSettings.FormatType BaseSettings.SaveTriggered BaseSettings.LoadingComplete BaseSettings.DefaultPresetId BaseSettings.DefaultPresetName BaseSettings.PropertyChanged BaseSettings.Id BaseSettings.DisplayName BaseSettings.FolderName BaseSettings.SubFolder BaseSettings.UIVersion BaseSettings.SubGroupDelimiter BaseSettings.OnPropertyChanged(string) BaseSettings.CreateNew() BaseSettings.CopyAsNew() BaseSettings.GetBuiltInPresets() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings) BaseSettingsExtensions.GetExternalPresets(BaseSettings) BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) Properties DiscoveryType public override sealed string DiscoveryType { get; } Property Value string"
  },
  "api/MCM.Abstractions.Base.PerCampaign.BasePerCampaignSettingsWrapper.html": {
    "href": "api/MCM.Abstractions.Base.PerCampaign.BasePerCampaignSettingsWrapper.html",
    "title": "Class BasePerCampaignSettingsWrapper | MCM Documentation",
    "summary": "Class BasePerCampaignSettingsWrapper Namespace MCM.Abstractions.Base.PerCampaign Assembly MCMv5.dll [Obsolete(\"Will be removed from future API\", true)] public abstract class BasePerCampaignSettingsWrapper : PerCampaignSettings, INotifyPropertyChanged, IWrapper Inheritance object BaseSettings PerCampaignSettings BasePerCampaignSettingsWrapper Implements INotifyPropertyChanged IWrapper Inherited Members PerCampaignSettings.Cache PerCampaignSettings.CacheInstance PerCampaignSettings.FormatType BaseSettings.SaveTriggered BaseSettings.LoadingComplete BaseSettings.DefaultPresetId BaseSettings.DefaultPresetName BaseSettings.DiscoveryType BaseSettings.CreateNew() BaseSettings.CopyAsNew() BaseSettings.GetBuiltInPresets() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings) BaseSettingsExtensions.GetExternalPresets(BaseSettings) BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) Constructors BasePerCampaignSettingsWrapper(object) protected BasePerCampaignSettingsWrapper(object @object) Parameters object object Properties DisplayName The display name of the setting in the settings menu. public override string DisplayName { get; } Property Value string FolderName public override string FolderName { get; } Property Value string Id Unique identifier used to save to file. Make sure this is unique to your mod. public override string Id { get; } Property Value string Object public object Object { get; protected set; } Property Value object SubFolder If you want this settings file stored inside a subfolder, set this to the name of the subfolder. public override string SubFolder { get; } Property Value string SubGroupDelimiter public override char SubGroupDelimiter { get; } Property Value char UIVersion public override int UIVersion { get; } Property Value int Methods OnPropertyChanged(string?) public override void OnPropertyChanged(string? propertyName = null) Parameters propertyName string Events PropertyChanged public override event PropertyChangedEventHandler? PropertyChanged Event Type PropertyChangedEventHandler"
  },
  "api/MCM.Abstractions.Base.PerCampaign.EmptyPerCampaignSettings.html": {
    "href": "api/MCM.Abstractions.Base.PerCampaign.EmptyPerCampaignSettings.html",
    "title": "Class EmptyPerCampaignSettings | MCM Documentation",
    "summary": "Class EmptyPerCampaignSettings Namespace MCM.Abstractions.Base.PerCampaign Assembly MCMv5.dll public sealed class EmptyPerCampaignSettings : PerCampaignSettings<EmptyPerCampaignSettings>, INotifyPropertyChanged Inheritance object BaseSettings PerCampaignSettings PerCampaignSettings<EmptyPerCampaignSettings> EmptyPerCampaignSettings Implements INotifyPropertyChanged Inherited Members PerCampaignSettings<EmptyPerCampaignSettings>.Instance PerCampaignSettings.FormatType BaseSettings.SaveTriggered BaseSettings.LoadingComplete BaseSettings.DefaultPresetId BaseSettings.DefaultPresetName BaseSettings.PropertyChanged BaseSettings.FolderName BaseSettings.SubFolder BaseSettings.DiscoveryType BaseSettings.UIVersion BaseSettings.SubGroupDelimiter BaseSettings.OnPropertyChanged(string) BaseSettings.CreateNew() BaseSettings.CopyAsNew() BaseSettings.GetBuiltInPresets() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings) BaseSettingsExtensions.GetExternalPresets(BaseSettings) BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) Properties DisplayName The display name of the setting in the settings menu. public override string DisplayName { get; } Property Value string Id Unique identifier used to save to file. Make sure this is unique to your mod. public override string Id { get; } Property Value string"
  },
  "api/MCM.Abstractions.Base.PerCampaign.ExternalPerCampaignSettings.html": {
    "href": "api/MCM.Abstractions.Base.PerCampaign.ExternalPerCampaignSettings.html",
    "title": "Class ExternalPerCampaignSettings | MCM Documentation",
    "summary": "Class ExternalPerCampaignSettings Namespace MCM.Abstractions.Base.PerCampaign Assembly MCMv5.dll public sealed class ExternalPerCampaignSettings : FluentPerCampaignSettings, INotifyPropertyChanged, IFluentSettings Inheritance object BaseSettings PerCampaignSettings FluentPerCampaignSettings ExternalPerCampaignSettings Implements INotifyPropertyChanged IFluentSettings Inherited Members FluentPerCampaignSettings.Id FluentPerCampaignSettings.DisplayName FluentPerCampaignSettings.FolderName FluentPerCampaignSettings.SubFolder FluentPerCampaignSettings.DiscoveryType FluentPerCampaignSettings.UIVersion FluentPerCampaignSettings.SubGroupDelimiter FluentPerCampaignSettings.PropertyChanged FluentPerCampaignSettings.SettingPropertyGroups FluentPerCampaignSettings.Register() FluentPerCampaignSettings.Unregister() FluentPerCampaignSettings.CreateNew() FluentPerCampaignSettings.GetBuiltInPresets() PerCampaignSettings.FormatType BaseSettings.SaveTriggered BaseSettings.LoadingComplete BaseSettings.DefaultPresetId BaseSettings.DefaultPresetName BaseSettings.OnPropertyChanged(string) BaseSettings.CopyAsNew() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings) BaseSettingsExtensions.GetExternalPresets(BaseSettings) BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) Methods CreateFromXmlStream(Stream, Func<IPropertyDefinitionBase, IRef>, PropertyChangedEventHandler?) public static ExternalPerCampaignSettings? CreateFromXmlStream(Stream xmlStream, Func<IPropertyDefinitionBase, IRef> assignRefDelegate, PropertyChangedEventHandler? propertyChanged = null) Parameters xmlStream Stream assignRefDelegate Func<IPropertyDefinitionBase, IRef> propertyChanged PropertyChangedEventHandler Returns ExternalPerCampaignSettings"
  },
  "api/MCM.Abstractions.Base.PerCampaign.FluentPerCampaignSettings.html": {
    "href": "api/MCM.Abstractions.Base.PerCampaign.FluentPerCampaignSettings.html",
    "title": "Class FluentPerCampaignSettings | MCM Documentation",
    "summary": "Class FluentPerCampaignSettings Namespace MCM.Abstractions.Base.PerCampaign Assembly MCMv5.dll public class FluentPerCampaignSettings : PerCampaignSettings, INotifyPropertyChanged, IFluentSettings Inheritance object BaseSettings PerCampaignSettings FluentPerCampaignSettings Implements INotifyPropertyChanged IFluentSettings Derived ExternalPerCampaignSettings Inherited Members PerCampaignSettings.Cache PerCampaignSettings.CacheInstance PerCampaignSettings.FormatType BaseSettings.SaveTriggered BaseSettings.LoadingComplete BaseSettings.DefaultPresetId BaseSettings.DefaultPresetName BaseSettings.OnPropertyChanged(string) BaseSettings.CopyAsNew() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings) BaseSettingsExtensions.GetExternalPresets(BaseSettings) BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) Constructors FluentPerCampaignSettings(string, string, string, string, int, char, PropertyChangedEventHandler?, IEnumerable<SettingsPropertyGroupDefinition>, IEnumerable<ISettingsPresetBuilder>) public FluentPerCampaignSettings(string id, string displayName, string folderName, string subFolder, int uiVersion, char subGroupDelimiter, PropertyChangedEventHandler? onPropertyChanged, IEnumerable<SettingsPropertyGroupDefinition> settingPropertyGroups, IEnumerable<ISettingsPresetBuilder> presets) Parameters id string displayName string folderName string subFolder string uiVersion int subGroupDelimiter char onPropertyChanged PropertyChangedEventHandler settingPropertyGroups IEnumerable<SettingsPropertyGroupDefinition> presets IEnumerable<ISettingsPresetBuilder> Properties DiscoveryType public override string DiscoveryType { get; } Property Value string DisplayName The display name of the setting in the settings menu. public override sealed string DisplayName { get; } Property Value string FolderName public override sealed string FolderName { get; } Property Value string Id Unique identifier used to save to file. Make sure this is unique to your mod. public override sealed string Id { get; } Property Value string SettingPropertyGroups public List<SettingsPropertyGroupDefinition> SettingPropertyGroups { get; } Property Value List<SettingsPropertyGroupDefinition> SubFolder If you want this settings file stored inside a subfolder, set this to the name of the subfolder. public override sealed string SubFolder { get; } Property Value string SubGroupDelimiter public override sealed char SubGroupDelimiter { get; } Property Value char UIVersion public override sealed int UIVersion { get; } Property Value int Methods CreateNew() public override BaseSettings CreateNew() Returns BaseSettings GetBuiltInPresets() public override sealed IEnumerable<ISettingsPreset> GetBuiltInPresets() Returns IEnumerable<ISettingsPreset> Register() public void Register() Unregister() public void Unregister() Events PropertyChanged public override sealed event PropertyChangedEventHandler? PropertyChanged Event Type PropertyChangedEventHandler"
  },
  "api/MCM.Abstractions.Base.PerCampaign.PerCampaignSettings-1.html": {
    "href": "api/MCM.Abstractions.Base.PerCampaign.PerCampaignSettings-1.html",
    "title": "Class PerCampaignSettings<T> | MCM Documentation",
    "summary": "Class PerCampaignSettings<T> Namespace MCM.Abstractions.Base.PerCampaign Assembly MCMv5.dll public abstract class PerCampaignSettings<T> : PerCampaignSettings, INotifyPropertyChanged where T : PerCampaignSettings, new() Type Parameters T Inheritance object BaseSettings PerCampaignSettings PerCampaignSettings<T> Implements INotifyPropertyChanged Derived AttributePerCampaignSettings<T> EmptyPerCampaignSettings Inherited Members PerCampaignSettings.Cache PerCampaignSettings.CacheInstance PerCampaignSettings.FormatType BaseSettings.SaveTriggered BaseSettings.LoadingComplete BaseSettings.DefaultPresetId BaseSettings.DefaultPresetName BaseSettings.PropertyChanged BaseSettings.Id BaseSettings.DisplayName BaseSettings.FolderName BaseSettings.SubFolder BaseSettings.DiscoveryType BaseSettings.UIVersion BaseSettings.SubGroupDelimiter BaseSettings.OnPropertyChanged(string) BaseSettings.CreateNew() BaseSettings.CopyAsNew() BaseSettings.GetBuiltInPresets() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings) BaseSettingsExtensions.GetExternalPresets(BaseSettings) BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) Properties Instance A modder flriendly way to get settings from any place public static T? Instance { get; } Property Value T"
  },
  "api/MCM.Abstractions.Base.PerCampaign.PerCampaignSettings.html": {
    "href": "api/MCM.Abstractions.Base.PerCampaign.PerCampaignSettings.html",
    "title": "Class PerCampaignSettings | MCM Documentation",
    "summary": "Class PerCampaignSettings Namespace MCM.Abstractions.Base.PerCampaign Assembly MCMv5.dll public abstract class PerCampaignSettings : BaseSettings, INotifyPropertyChanged Inheritance object BaseSettings PerCampaignSettings Implements INotifyPropertyChanged Derived BasePerCampaignSettingsWrapper FluentPerCampaignSettings PerCampaignSettings<T> Inherited Members BaseSettings.SaveTriggered BaseSettings.LoadingComplete BaseSettings.DefaultPresetId BaseSettings.DefaultPresetName BaseSettings.PropertyChanged BaseSettings.Id BaseSettings.DisplayName BaseSettings.FolderName BaseSettings.SubFolder BaseSettings.DiscoveryType BaseSettings.UIVersion BaseSettings.SubGroupDelimiter BaseSettings.OnPropertyChanged(string) BaseSettings.CreateNew() BaseSettings.CopyAsNew() BaseSettings.GetBuiltInPresets() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings) BaseSettingsExtensions.GetExternalPresets(BaseSettings) BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) Fields Cache protected static readonly ConcurrentDictionary<Type, string> Cache Field Value ConcurrentDictionary<Type, string> CacheInstance protected static readonly ConcurrentDictionary<string, BaseSettings?> CacheInstance Field Value ConcurrentDictionary<string, BaseSettings> Properties FormatType public override sealed string FormatType { get; } Property Value string"
  },
  "api/MCM.Abstractions.Base.PerCampaign.html": {
    "href": "api/MCM.Abstractions.Base.PerCampaign.html",
    "title": "Namespace MCM.Abstractions.Base.PerCampaign | MCM Documentation",
    "summary": "Namespace MCM.Abstractions.Base.PerCampaign Classes AttributePerCampaignSettings<T> BasePerCampaignSettingsWrapper EmptyPerCampaignSettings ExternalPerCampaignSettings FluentPerCampaignSettings PerCampaignSettings PerCampaignSettings<T>"
  },
  "api/MCM.Abstractions.Base.PerSave.AttributePerSaveSettings-1.html": {
    "href": "api/MCM.Abstractions.Base.PerSave.AttributePerSaveSettings-1.html",
    "title": "Class AttributePerSaveSettings<T> | MCM Documentation",
    "summary": "Class AttributePerSaveSettings<T> Namespace MCM.Abstractions.Base.PerSave Assembly MCMv5.dll public abstract class AttributePerSaveSettings<T> : PerSaveSettings<T>, INotifyPropertyChanged where T : PerSaveSettings, new() Type Parameters T Inheritance object BaseSettings PerSaveSettings PerSaveSettings<T> AttributePerSaveSettings<T> Implements INotifyPropertyChanged Inherited Members PerSaveSettings<T>.Instance PerSaveSettings.Cache PerSaveSettings.CacheInstance PerSaveSettings.FormatType BaseSettings.SaveTriggered BaseSettings.LoadingComplete BaseSettings.DefaultPresetId BaseSettings.DefaultPresetName BaseSettings.PropertyChanged BaseSettings.Id BaseSettings.DisplayName BaseSettings.FolderName BaseSettings.SubFolder BaseSettings.UIVersion BaseSettings.SubGroupDelimiter BaseSettings.OnPropertyChanged(string) BaseSettings.CreateNew() BaseSettings.CopyAsNew() BaseSettings.GetBuiltInPresets() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings) BaseSettingsExtensions.GetExternalPresets(BaseSettings) BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) Properties DiscoveryType public override sealed string DiscoveryType { get; } Property Value string"
  },
  "api/MCM.Abstractions.Base.PerSave.BasePerSaveSettingsWrapper.html": {
    "href": "api/MCM.Abstractions.Base.PerSave.BasePerSaveSettingsWrapper.html",
    "title": "Class BasePerSaveSettingsWrapper | MCM Documentation",
    "summary": "Class BasePerSaveSettingsWrapper Namespace MCM.Abstractions.Base.PerSave Assembly MCMv5.dll [Obsolete(\"Will be removed from future API\", true)] public abstract class BasePerSaveSettingsWrapper : PerSaveSettings, INotifyPropertyChanged, IWrapper Inheritance object BaseSettings PerSaveSettings BasePerSaveSettingsWrapper Implements INotifyPropertyChanged IWrapper Inherited Members PerSaveSettings.Cache PerSaveSettings.CacheInstance PerSaveSettings.FormatType BaseSettings.SaveTriggered BaseSettings.LoadingComplete BaseSettings.DefaultPresetId BaseSettings.DefaultPresetName BaseSettings.DiscoveryType BaseSettings.CreateNew() BaseSettings.CopyAsNew() BaseSettings.GetBuiltInPresets() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings) BaseSettingsExtensions.GetExternalPresets(BaseSettings) BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) Constructors BasePerSaveSettingsWrapper(object) protected BasePerSaveSettingsWrapper(object @object) Parameters object object Properties DisplayName The display name of the setting in the settings menu. public override string DisplayName { get; } Property Value string FolderName public override string FolderName { get; } Property Value string Id Unique identifier used to save to file. Make sure this is unique to your mod. public override string Id { get; } Property Value string Object public object Object { get; protected set; } Property Value object SubFolder If you want this settings file stored inside a subfolder, set this to the name of the subfolder. public override string SubFolder { get; } Property Value string SubGroupDelimiter public override char SubGroupDelimiter { get; } Property Value char UIVersion public override int UIVersion { get; } Property Value int Methods OnPropertyChanged(string?) public override void OnPropertyChanged(string? propertyName = null) Parameters propertyName string Events PropertyChanged public override event PropertyChangedEventHandler? PropertyChanged Event Type PropertyChangedEventHandler"
  },
  "api/MCM.Abstractions.Base.PerSave.EmptyPerSaveSettings.html": {
    "href": "api/MCM.Abstractions.Base.PerSave.EmptyPerSaveSettings.html",
    "title": "Class EmptyPerSaveSettings | MCM Documentation",
    "summary": "Class EmptyPerSaveSettings Namespace MCM.Abstractions.Base.PerSave Assembly MCMv5.dll public sealed class EmptyPerSaveSettings : PerSaveSettings<EmptyPerSaveSettings>, INotifyPropertyChanged Inheritance object BaseSettings PerSaveSettings PerSaveSettings<EmptyPerSaveSettings> EmptyPerSaveSettings Implements INotifyPropertyChanged Inherited Members PerSaveSettings<EmptyPerSaveSettings>.Instance PerSaveSettings.FormatType BaseSettings.SaveTriggered BaseSettings.LoadingComplete BaseSettings.DefaultPresetId BaseSettings.DefaultPresetName BaseSettings.PropertyChanged BaseSettings.FolderName BaseSettings.SubFolder BaseSettings.DiscoveryType BaseSettings.UIVersion BaseSettings.SubGroupDelimiter BaseSettings.OnPropertyChanged(string) BaseSettings.CreateNew() BaseSettings.CopyAsNew() BaseSettings.GetBuiltInPresets() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings) BaseSettingsExtensions.GetExternalPresets(BaseSettings) BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) Properties DisplayName The display name of the setting in the settings menu. public override string DisplayName { get; } Property Value string Id Unique identifier used to save to file. Make sure this is unique to your mod. public override string Id { get; } Property Value string"
  },
  "api/MCM.Abstractions.Base.PerSave.ExternalPerSaveSettings.html": {
    "href": "api/MCM.Abstractions.Base.PerSave.ExternalPerSaveSettings.html",
    "title": "Class ExternalPerSaveSettings | MCM Documentation",
    "summary": "Class ExternalPerSaveSettings Namespace MCM.Abstractions.Base.PerSave Assembly MCMv5.dll public sealed class ExternalPerSaveSettings : FluentPerSaveSettings, INotifyPropertyChanged, IFluentSettings Inheritance object BaseSettings PerSaveSettings FluentPerSaveSettings ExternalPerSaveSettings Implements INotifyPropertyChanged IFluentSettings Inherited Members FluentPerSaveSettings.Id FluentPerSaveSettings.DisplayName FluentPerSaveSettings.FolderName FluentPerSaveSettings.SubFolder FluentPerSaveSettings.DiscoveryType FluentPerSaveSettings.UIVersion FluentPerSaveSettings.SubGroupDelimiter FluentPerSaveSettings.PropertyChanged FluentPerSaveSettings.SettingPropertyGroups FluentPerSaveSettings.Register() FluentPerSaveSettings.Unregister() FluentPerSaveSettings.CreateNew() FluentPerSaveSettings.GetBuiltInPresets() PerSaveSettings.FormatType BaseSettings.SaveTriggered BaseSettings.LoadingComplete BaseSettings.DefaultPresetId BaseSettings.DefaultPresetName BaseSettings.OnPropertyChanged(string) BaseSettings.CopyAsNew() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings) BaseSettingsExtensions.GetExternalPresets(BaseSettings) BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) Methods CreateFromXmlStream(Stream, Func<IPropertyDefinitionBase, IRef>, PropertyChangedEventHandler?) public static ExternalPerSaveSettings? CreateFromXmlStream(Stream xmlStream, Func<IPropertyDefinitionBase, IRef> assignRefDelegate, PropertyChangedEventHandler? propertyChanged = null) Parameters xmlStream Stream assignRefDelegate Func<IPropertyDefinitionBase, IRef> propertyChanged PropertyChangedEventHandler Returns ExternalPerSaveSettings"
  },
  "api/MCM.Abstractions.Base.PerSave.FluentPerSaveSettings.html": {
    "href": "api/MCM.Abstractions.Base.PerSave.FluentPerSaveSettings.html",
    "title": "Class FluentPerSaveSettings | MCM Documentation",
    "summary": "Class FluentPerSaveSettings Namespace MCM.Abstractions.Base.PerSave Assembly MCMv5.dll public class FluentPerSaveSettings : PerSaveSettings, INotifyPropertyChanged, IFluentSettings Inheritance object BaseSettings PerSaveSettings FluentPerSaveSettings Implements INotifyPropertyChanged IFluentSettings Derived ExternalPerSaveSettings Inherited Members PerSaveSettings.Cache PerSaveSettings.CacheInstance PerSaveSettings.FormatType BaseSettings.SaveTriggered BaseSettings.LoadingComplete BaseSettings.DefaultPresetId BaseSettings.DefaultPresetName BaseSettings.OnPropertyChanged(string) BaseSettings.CopyAsNew() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings) BaseSettingsExtensions.GetExternalPresets(BaseSettings) BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) Constructors FluentPerSaveSettings(string, string, string, string, int, char, PropertyChangedEventHandler?, IEnumerable<SettingsPropertyGroupDefinition>, IEnumerable<ISettingsPresetBuilder>) public FluentPerSaveSettings(string id, string displayName, string folderName, string subFolder, int uiVersion, char subGroupDelimiter, PropertyChangedEventHandler? onPropertyChanged, IEnumerable<SettingsPropertyGroupDefinition> settingPropertyGroups, IEnumerable<ISettingsPresetBuilder> presets) Parameters id string displayName string folderName string subFolder string uiVersion int subGroupDelimiter char onPropertyChanged PropertyChangedEventHandler settingPropertyGroups IEnumerable<SettingsPropertyGroupDefinition> presets IEnumerable<ISettingsPresetBuilder> Properties DiscoveryType public override string DiscoveryType { get; } Property Value string DisplayName The display name of the setting in the settings menu. public override sealed string DisplayName { get; } Property Value string FolderName public override sealed string FolderName { get; } Property Value string Id Unique identifier used to save to file. Make sure this is unique to your mod. public override sealed string Id { get; } Property Value string SettingPropertyGroups public List<SettingsPropertyGroupDefinition> SettingPropertyGroups { get; } Property Value List<SettingsPropertyGroupDefinition> SubFolder If you want this settings file stored inside a subfolder, set this to the name of the subfolder. public override sealed string SubFolder { get; } Property Value string SubGroupDelimiter public override sealed char SubGroupDelimiter { get; } Property Value char UIVersion public override sealed int UIVersion { get; } Property Value int Methods CreateNew() public override BaseSettings CreateNew() Returns BaseSettings GetBuiltInPresets() public override sealed IEnumerable<ISettingsPreset> GetBuiltInPresets() Returns IEnumerable<ISettingsPreset> Register() public void Register() Unregister() public void Unregister() Events PropertyChanged public override sealed event PropertyChangedEventHandler? PropertyChanged Event Type PropertyChangedEventHandler"
  },
  "api/MCM.Abstractions.Base.PerSave.PerSaveSettings-1.html": {
    "href": "api/MCM.Abstractions.Base.PerSave.PerSaveSettings-1.html",
    "title": "Class PerSaveSettings<T> | MCM Documentation",
    "summary": "Class PerSaveSettings<T> Namespace MCM.Abstractions.Base.PerSave Assembly MCMv5.dll public abstract class PerSaveSettings<T> : PerSaveSettings, INotifyPropertyChanged where T : PerSaveSettings, new() Type Parameters T Inheritance object BaseSettings PerSaveSettings PerSaveSettings<T> Implements INotifyPropertyChanged Derived AttributePerSaveSettings<T> EmptyPerSaveSettings Inherited Members PerSaveSettings.Cache PerSaveSettings.CacheInstance PerSaveSettings.FormatType BaseSettings.SaveTriggered BaseSettings.LoadingComplete BaseSettings.DefaultPresetId BaseSettings.DefaultPresetName BaseSettings.PropertyChanged BaseSettings.Id BaseSettings.DisplayName BaseSettings.FolderName BaseSettings.SubFolder BaseSettings.DiscoveryType BaseSettings.UIVersion BaseSettings.SubGroupDelimiter BaseSettings.OnPropertyChanged(string) BaseSettings.CreateNew() BaseSettings.CopyAsNew() BaseSettings.GetBuiltInPresets() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings) BaseSettingsExtensions.GetExternalPresets(BaseSettings) BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) Properties Instance A modder flriendly way to get settings from any place public static T? Instance { get; } Property Value T"
  },
  "api/MCM.Abstractions.Base.PerSave.PerSaveSettings.html": {
    "href": "api/MCM.Abstractions.Base.PerSave.PerSaveSettings.html",
    "title": "Class PerSaveSettings | MCM Documentation",
    "summary": "Class PerSaveSettings Namespace MCM.Abstractions.Base.PerSave Assembly MCMv5.dll public abstract class PerSaveSettings : BaseSettings, INotifyPropertyChanged Inheritance object BaseSettings PerSaveSettings Implements INotifyPropertyChanged Derived BasePerSaveSettingsWrapper FluentPerSaveSettings PerSaveSettings<T> Inherited Members BaseSettings.SaveTriggered BaseSettings.LoadingComplete BaseSettings.DefaultPresetId BaseSettings.DefaultPresetName BaseSettings.PropertyChanged BaseSettings.Id BaseSettings.DisplayName BaseSettings.FolderName BaseSettings.SubFolder BaseSettings.DiscoveryType BaseSettings.UIVersion BaseSettings.SubGroupDelimiter BaseSettings.OnPropertyChanged(string) BaseSettings.CreateNew() BaseSettings.CopyAsNew() BaseSettings.GetBuiltInPresets() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings) BaseSettingsExtensions.GetExternalPresets(BaseSettings) BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) Fields Cache protected static readonly ConcurrentDictionary<Type, string> Cache Field Value ConcurrentDictionary<Type, string> CacheInstance protected static readonly ConcurrentDictionary<string, BaseSettings?> CacheInstance Field Value ConcurrentDictionary<string, BaseSettings> Properties FormatType public override sealed string FormatType { get; } Property Value string"
  },
  "api/MCM.Abstractions.Base.PerSave.html": {
    "href": "api/MCM.Abstractions.Base.PerSave.html",
    "title": "Namespace MCM.Abstractions.Base.PerSave | MCM Documentation",
    "summary": "Namespace MCM.Abstractions.Base.PerSave Classes AttributePerSaveSettings<T> BasePerSaveSettingsWrapper EmptyPerSaveSettings ExternalPerSaveSettings FluentPerSaveSettings PerSaveSettings PerSaveSettings<T>"
  },
  "api/MCM.Abstractions.Base.html": {
    "href": "api/MCM.Abstractions.Base.html",
    "title": "Namespace MCM.Abstractions.Base | MCM Documentation",
    "summary": "Namespace MCM.Abstractions.Base Classes BaseSettings Base model for MCM settings Interfaces IFluentSettings Interface that declares that the settings a fluent dynamic settings"
  },
  "api/MCM.Abstractions.BaseSettingsExtensions.html": {
    "href": "api/MCM.Abstractions.BaseSettingsExtensions.html",
    "title": "Class BaseSettingsExtensions | MCM Documentation",
    "summary": "Class BaseSettingsExtensions Namespace MCM.Abstractions Assembly MCMv5.dll public static class BaseSettingsExtensions Inheritance object BaseSettingsExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetAllSettingPropertyDefinitions(BaseSettings) public static IEnumerable<ISettingsPropertyDefinition> GetAllSettingPropertyDefinitions(this BaseSettings settings) Parameters settings BaseSettings Returns IEnumerable<ISettingsPropertyDefinition> GetAllSettingPropertyGroupDefinitions(BaseSettings) public static IEnumerable<SettingsPropertyGroupDefinition> GetAllSettingPropertyGroupDefinitions(this BaseSettings settings) Parameters settings BaseSettings Returns IEnumerable<SettingsPropertyGroupDefinition> GetExternalPresets(BaseSettings) public static IEnumerable<ISettingsPreset> GetExternalPresets(this BaseSettings settings) Parameters settings BaseSettings Returns IEnumerable<ISettingsPreset> GetSettingPropertyGroups(BaseSettings) public static List<SettingsPropertyGroupDefinition> GetSettingPropertyGroups(this BaseSettings settings) Parameters settings BaseSettings Returns List<SettingsPropertyGroupDefinition> GetUnsortedSettingPropertyGroups(BaseSettings) public static IEnumerable<SettingsPropertyGroupDefinition> GetUnsortedSettingPropertyGroups(this BaseSettings settings) Parameters settings BaseSettings Returns IEnumerable<SettingsPropertyGroupDefinition>"
  },
  "api/MCM.Abstractions.BaseSettingsProvider.html": {
    "href": "api/MCM.Abstractions.BaseSettingsProvider.html",
    "title": "Class BaseSettingsProvider | MCM Documentation",
    "summary": "Class BaseSettingsProvider Namespace MCM.Abstractions Assembly MCMv5.dll The interface that is responsible for providing and manipulating settings for the end user - modder public abstract class BaseSettingsProvider Inheritance object BaseSettingsProvider Derived SettingsProviderWrapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Instance public static BaseSettingsProvider? Instance { get; } Property Value BaseSettingsProvider SettingsDefinitions public abstract IEnumerable<SettingsDefinition> SettingsDefinitions { get; } Property Value IEnumerable<SettingsDefinition> Methods GetPresets(string) public abstract IEnumerable<ISettingsPreset> GetPresets(string id) Parameters id string Returns IEnumerable<ISettingsPreset> GetSettings(string) public abstract BaseSettings? GetSettings(string id) Parameters id string Returns BaseSettings GetUnavailableSettings() public abstract IEnumerable<UnavailableSetting> GetUnavailableSettings() Returns IEnumerable<UnavailableSetting> LoadAvailableSnapshots(IEnumerable<SettingSnapshot>) public abstract IEnumerable<BaseSettings> LoadAvailableSnapshots(IEnumerable<SettingSnapshot> snapshots) Parameters snapshots IEnumerable<SettingSnapshot> Returns IEnumerable<BaseSettings> OverrideSettings(BaseSettings) public abstract void OverrideSettings(BaseSettings settings) Parameters settings BaseSettings ResetSettings(BaseSettings) public abstract void ResetSettings(BaseSettings settings) Parameters settings BaseSettings SaveAvailableSnapshots() public abstract IEnumerable<SettingSnapshot> SaveAvailableSnapshots() Returns IEnumerable<SettingSnapshot> SaveSettings(BaseSettings) public abstract void SaveSettings(BaseSettings settings) Parameters settings BaseSettings"
  },
  "api/MCM.Abstractions.ExternalSettingsProviderInvalidateCacheType.html": {
    "href": "api/MCM.Abstractions.ExternalSettingsProviderInvalidateCacheType.html",
    "title": "Enum ExternalSettingsProviderInvalidateCacheType | MCM Documentation",
    "summary": "Enum ExternalSettingsProviderInvalidateCacheType Namespace MCM.Abstractions Assembly MCMv5.dll public enum ExternalSettingsProviderInvalidateCacheType Fields Global = 1 None = 0 PerCampaign = 2 PerSave = 3"
  },
  "api/MCM.Abstractions.FluentBuilder.BaseSettingsBuilder.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.BaseSettingsBuilder.html",
    "title": "Class BaseSettingsBuilder | MCM Documentation",
    "summary": "Class BaseSettingsBuilder Namespace MCM.Abstractions.FluentBuilder Assembly MCMv5.dll public abstract class BaseSettingsBuilder : ISettingsBuilder Inheritance object BaseSettingsBuilder Implements ISettingsBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BuildAsGlobal() Returns a Global setting instance. Use Register and Unregister for MCM to use it. public abstract FluentGlobalSettings BuildAsGlobal() Returns FluentGlobalSettings BuildAsPerCampaign() Returns a PerCampaign setting instance. Use Register and Unregister for MCM to use it. The registered settings will be cleared before and after player joins the campaign, so do the register thing when the campaign was already joined in. public abstract FluentPerCampaignSettings BuildAsPerCampaign() Returns FluentPerCampaignSettings BuildAsPerSave() Returns a PerSave setting instance. Use Register and Unregister for MCM to use it. The registered settings will be cleared before and after player joins the campaign, so do the register thing when the campaign was already joined in. public abstract FluentPerSaveSettings BuildAsPerSave() Returns FluentPerSaveSettings Create(string, string) public static ISettingsBuilder? Create(string id, string displayName) Parameters id string displayName string Returns ISettingsBuilder CreateGroup(string, Action<ISettingsPropertyGroupBuilder>) Creates a property group where you can define your properties. The default Group name is 'Misc'. Use the action delegate to configure the property group. public abstract ISettingsBuilder CreateGroup(string name, Action<ISettingsPropertyGroupBuilder> builder) Parameters name string builder Action<ISettingsPropertyGroupBuilder> Returns ISettingsBuilder The settings builder. CreatePreset(string, string, Action<ISettingsPresetBuilder>) public abstract ISettingsBuilder CreatePreset(string id, string name, Action<ISettingsPresetBuilder> builder) Parameters id string name string builder Action<ISettingsPresetBuilder> Returns ISettingsBuilder The settings builder. SetFolderName(string) See FolderName. public abstract ISettingsBuilder SetFolderName(string value) Parameters value string The value. Returns ISettingsBuilder The settings builder. SetFormat(string) See FormatType. public abstract ISettingsBuilder SetFormat(string value) Parameters value string The value. Returns ISettingsBuilder The settings builder. SetOnPropertyChanged(PropertyChangedEventHandler) See OnPropertyChanged(string?). public abstract ISettingsBuilder SetOnPropertyChanged(PropertyChangedEventHandler value) Parameters value PropertyChangedEventHandler The value. Returns ISettingsBuilder The settings builder. SetSubFolder(string) See SubFolder. public abstract ISettingsBuilder SetSubFolder(string value) Parameters value string The value. Returns ISettingsBuilder The settings builder. SetSubGroupDelimiter(char) See SubGroupDelimiter. public abstract ISettingsBuilder SetSubGroupDelimiter(char value) Parameters value char The value. Returns ISettingsBuilder The settings builder. SetUIVersion(int) See UIVersion. public abstract ISettingsBuilder SetUIVersion(int value) Parameters value int The value. Returns ISettingsBuilder The settings builder. WithoutDefaultPreset() public abstract ISettingsBuilder WithoutDefaultPreset() Returns ISettingsBuilder"
  },
  "api/MCM.Abstractions.FluentBuilder.ISettingsBuilder.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.ISettingsBuilder.html",
    "title": "Interface ISettingsBuilder | MCM Documentation",
    "summary": "Interface ISettingsBuilder Namespace MCM.Abstractions.FluentBuilder Assembly MCMv5.dll An interface that defines the necessary members for implementing a settings builder. public interface ISettingsBuilder Methods BuildAsGlobal() Returns a Global setting instance. Use Register and Unregister for MCM to use it. FluentGlobalSettings BuildAsGlobal() Returns FluentGlobalSettings BuildAsPerCampaign() Returns a PerCampaign setting instance. Use Register and Unregister for MCM to use it. The registered settings will be cleared before and after player joins the campaign, so do the register thing when the campaign was already joined in. FluentPerCampaignSettings BuildAsPerCampaign() Returns FluentPerCampaignSettings BuildAsPerSave() Returns a PerSave setting instance. Use Register and Unregister for MCM to use it. The registered settings will be cleared before and after player joins the campaign, so do the register thing when the campaign was already joined in. FluentPerSaveSettings BuildAsPerSave() Returns FluentPerSaveSettings CreateGroup(string, Action<ISettingsPropertyGroupBuilder>) Creates a property group where you can define your properties. The default Group name is 'Misc'. Use the action delegate to configure the property group. ISettingsBuilder CreateGroup(string name, Action<ISettingsPropertyGroupBuilder> builder) Parameters name string builder Action<ISettingsPropertyGroupBuilder> Returns ISettingsBuilder The settings builder. CreatePreset(string, string, Action<ISettingsPresetBuilder>) ISettingsBuilder CreatePreset(string id, string name, Action<ISettingsPresetBuilder> builder) Parameters id string name string builder Action<ISettingsPresetBuilder> Returns ISettingsBuilder The settings builder. SetFolderName(string) See FolderName. ISettingsBuilder SetFolderName(string value) Parameters value string The value. Returns ISettingsBuilder The settings builder. SetFormat(string) See FormatType. ISettingsBuilder SetFormat(string value) Parameters value string The value. Returns ISettingsBuilder The settings builder. SetOnPropertyChanged(PropertyChangedEventHandler) See OnPropertyChanged(string?). ISettingsBuilder SetOnPropertyChanged(PropertyChangedEventHandler value) Parameters value PropertyChangedEventHandler The value. Returns ISettingsBuilder The settings builder. SetSubFolder(string) See SubFolder. ISettingsBuilder SetSubFolder(string value) Parameters value string The value. Returns ISettingsBuilder The settings builder. SetSubGroupDelimiter(char) See SubGroupDelimiter. ISettingsBuilder SetSubGroupDelimiter(char value) Parameters value char The value. Returns ISettingsBuilder The settings builder. SetUIVersion(int) See UIVersion. ISettingsBuilder SetUIVersion(int value) Parameters value int The value. Returns ISettingsBuilder The settings builder. WithoutDefaultPreset() ISettingsBuilder WithoutDefaultPreset() Returns ISettingsBuilder"
  },
  "api/MCM.Abstractions.FluentBuilder.ISettingsBuilderFactory.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.ISettingsBuilderFactory.html",
    "title": "Interface ISettingsBuilderFactory | MCM Documentation",
    "summary": "Interface ISettingsBuilderFactory Namespace MCM.Abstractions.FluentBuilder Assembly MCMv5.dll public interface ISettingsBuilderFactory Methods Create(string, string) ISettingsBuilder Create(string id, string displayName) Parameters id string displayName string Returns ISettingsBuilder"
  },
  "api/MCM.Abstractions.FluentBuilder.ISettingsPresetBuilder.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.ISettingsPresetBuilder.html",
    "title": "Interface ISettingsPresetBuilder | MCM Documentation",
    "summary": "Interface ISettingsPresetBuilder Namespace MCM.Abstractions.FluentBuilder Assembly MCMv5.dll public interface ISettingsPresetBuilder Methods Build(BaseSettings) ISettingsPreset Build(BaseSettings settings) Parameters settings BaseSettings Returns ISettingsPreset SetPropertyValue(string, object?) ISettingsPresetBuilder SetPropertyValue(string propertyName, object? value) Parameters propertyName string value object Returns ISettingsPresetBuilder"
  },
  "api/MCM.Abstractions.FluentBuilder.ISettingsPropertyBuilder-1.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.ISettingsPropertyBuilder-1.html",
    "title": "Interface ISettingsPropertyBuilder<TSettingsPropertyBuilder> | MCM Documentation",
    "summary": "Interface ISettingsPropertyBuilder<TSettingsPropertyBuilder> Namespace MCM.Abstractions.FluentBuilder Assembly MCMv5.dll An interface that defines the necessary members for implementing a settings property builder. public interface ISettingsPropertyBuilder<out TSettingsPropertyBuilder> : ISettingsPropertyBuilder where TSettingsPropertyBuilder : ISettingsPropertyBuilder Type Parameters TSettingsPropertyBuilder Inherited Members ISettingsPropertyBuilder.Name ISettingsPropertyBuilder.PropertyReference ISettingsPropertyBuilder.GetDefinitions() Methods SetHintText(string) The hint text that is displayed at the bottom of the screen when the user hovers over the setting in the settings menu. TSettingsPropertyBuilder SetHintText(string value) Parameters value string The value. Returns TSettingsPropertyBuilder The settings property builder. SetOrder(int) Require restart of the game if the value is changed. TSettingsPropertyBuilder SetOrder(int value) Parameters value int The value. Returns TSettingsPropertyBuilder The settings property builder. SetRequireRestart(bool) Require restart of the game if the value is changed. TSettingsPropertyBuilder SetRequireRestart(bool value) Parameters value bool The value. Returns TSettingsPropertyBuilder The settings property builder."
  },
  "api/MCM.Abstractions.FluentBuilder.ISettingsPropertyBuilder.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.ISettingsPropertyBuilder.html",
    "title": "Interface ISettingsPropertyBuilder | MCM Documentation",
    "summary": "Interface ISettingsPropertyBuilder Namespace MCM.Abstractions.FluentBuilder Assembly MCMv5.dll An interface that defines the necessary members for implementing a settings property builder. public interface ISettingsPropertyBuilder Properties Name See DisplayName string Name { get; } Property Value string PropertyReference Mono.Cecil.PropertyReference IRef PropertyReference { get; } Property Value IRef Methods GetDefinitions() Gets this property definition. IEnumerable<IPropertyDefinitionBase> GetDefinitions() Returns IEnumerable<IPropertyDefinitionBase> An enumerable of the property definitions."
  },
  "api/MCM.Abstractions.FluentBuilder.ISettingsPropertyGroupBuilder.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.ISettingsPropertyGroupBuilder.html",
    "title": "Interface ISettingsPropertyGroupBuilder | MCM Documentation",
    "summary": "Interface ISettingsPropertyGroupBuilder Namespace MCM.Abstractions.FluentBuilder Assembly MCMv5.dll An interface that defines the necessary members for implementing a settings property group builder. public interface ISettingsPropertyGroupBuilder Properties Properties The actual properties stored in the builder. Dictionary<string, ISettingsPropertyBuilder> Properties { get; } Property Value Dictionary<string, ISettingsPropertyBuilder> Methods AddBool(string, string, IRef, Action<ISettingsPropertyBoolBuilder>?) Creates a Bool property. ISettingsPropertyGroupBuilder AddBool(string id, string name, IRef @ref, Action<ISettingsPropertyBoolBuilder>? builder) Parameters id string Internal ID that will be used for serialization. name string Will be shown at the setting screen. ref IRef Reference to the value used by the property. builder Action<ISettingsPropertyBoolBuilder> Settings property builder. Returns ISettingsPropertyGroupBuilder The settings property group builder. AddButton(string, string, IRef, string, Action<ISettingsPropertyButtonBuilder>?) Creates an Button property. ISettingsPropertyGroupBuilder AddButton(string id, string name, IRef @ref, string content, Action<ISettingsPropertyButtonBuilder>? builder) Parameters id string Internal ID that will be used for serialization. name string Will be shown at the setting screen. ref IRef Reference to the value used by the property. content string Button content. builder Action<ISettingsPropertyButtonBuilder> Settings property builder. Returns ISettingsPropertyGroupBuilder The settings property group builder. AddCustom<TSettingsPropertyBuilder>(ISettingsPropertyBuilder<TSettingsPropertyBuilder>) Adds a custom property. The custom property should implement one of the interfaces defined in MCM.Abstractions.Settings.Definitions namespace. Currently there is no way of defining a custom UI Control. One of the possible fixes would be to use UIExtender library. ISettingsPropertyGroupBuilder AddCustom<TSettingsPropertyBuilder>(ISettingsPropertyBuilder<TSettingsPropertyBuilder> builder) where TSettingsPropertyBuilder : ISettingsPropertyBuilder Parameters builder ISettingsPropertyBuilder<TSettingsPropertyBuilder> Settings property builder. Returns ISettingsPropertyGroupBuilder The settings property group builder. Type Parameters TSettingsPropertyBuilder A derived class of ISettingsPropertyBuilder. AddDropdown(string, string, int, IRef, Action<ISettingsPropertyDropdownBuilder>?) Creates a Dropdown property. ISettingsPropertyGroupBuilder AddDropdown(string id, string name, int selectedIndex, IRef @ref, Action<ISettingsPropertyDropdownBuilder>? builder) Parameters id string Internal ID that will be used for serialization. name string Will be shown at the setting screen. selectedIndex int See SelectedIndex. ref IRef Reference to the value used by the property. builder Action<ISettingsPropertyDropdownBuilder> Settings property builder. Returns ISettingsPropertyGroupBuilder The settings property group builder. AddFloatingInteger(string, string, float, float, IRef, Action<ISettingsPropertyFloatingIntegerBuilder>?) Creates an Float Slider property. ISettingsPropertyGroupBuilder AddFloatingInteger(string id, string name, float minValue, float maxValue, IRef @ref, Action<ISettingsPropertyFloatingIntegerBuilder>? builder) Parameters id string Internal ID that will be used for serialization. name string Will be shown at the setting screen. minValue float See MinValue. maxValue float See MaxValue. ref IRef Reference to the value used by the property. builder Action<ISettingsPropertyFloatingIntegerBuilder> Settings property builder. Returns ISettingsPropertyGroupBuilder The settings property group builder. AddInteger(string, string, int, int, IRef, Action<ISettingsPropertyIntegerBuilder>?) Creates an Integer Slider property. ISettingsPropertyGroupBuilder AddInteger(string id, string name, int minValue, int maxValue, IRef @ref, Action<ISettingsPropertyIntegerBuilder>? builder) Parameters id string Internal ID that will be used for serialization. name string Will be shown at the setting screen. minValue int MinValue. maxValue int MaxValue. ref IRef Reference to the value used by the property. builder Action<ISettingsPropertyIntegerBuilder> Settings property builder. Returns ISettingsPropertyGroupBuilder The settings property group builder. AddText(string, string, IRef, Action<ISettingsPropertyTextBuilder>?) Creates an TextBox property. ISettingsPropertyGroupBuilder AddText(string id, string name, IRef @ref, Action<ISettingsPropertyTextBuilder>? builder) Parameters id string Internal ID that will be used for serialization. name string Will be shown at the setting screen. ref IRef Reference to the value used by the property. builder Action<ISettingsPropertyTextBuilder> Settings property builder. Returns ISettingsPropertyGroupBuilder The settings property group builder. AddToggle(string, string, IRef, Action<ISettingsPropertyGroupToggleBuilder>?) Creates a Toggle(bool) property. ISettingsPropertyGroupBuilder AddToggle(string id, string name, IRef @ref, Action<ISettingsPropertyGroupToggleBuilder>? builder) Parameters id string Internal ID that will be used for serialization. name string Will be shown at the setting screen. ref IRef Reference to the value used by the property. builder Action<ISettingsPropertyGroupToggleBuilder> Settings property builder. Returns ISettingsPropertyGroupBuilder The settings property group builder. GetPropertyGroupDefinition() Gets this property group definition. IPropertyGroupDefinition GetPropertyGroupDefinition() Returns IPropertyGroupDefinition A property group definition. SetGroupOrder(int) ISettingsPropertyGroupBuilder SetGroupOrder(int value) Parameters value int The value. Returns ISettingsPropertyGroupBuilder The settings property group builder."
  },
  "api/MCM.Abstractions.FluentBuilder.Models.ISettingsPropertyBoolBuilder.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.Models.ISettingsPropertyBoolBuilder.html",
    "title": "Interface ISettingsPropertyBoolBuilder | MCM Documentation",
    "summary": "Interface ISettingsPropertyBoolBuilder Namespace MCM.Abstractions.FluentBuilder.Models Assembly MCMv5.dll public interface ISettingsPropertyBoolBuilder : ISettingsPropertyBuilder<ISettingsPropertyBoolBuilder>, ISettingsPropertyBuilder Inherited Members ISettingsPropertyBuilder<ISettingsPropertyBoolBuilder>.SetOrder(int) ISettingsPropertyBuilder<ISettingsPropertyBoolBuilder>.SetRequireRestart(bool) ISettingsPropertyBuilder<ISettingsPropertyBoolBuilder>.SetHintText(string) ISettingsPropertyBuilder.Name ISettingsPropertyBuilder.PropertyReference ISettingsPropertyBuilder.GetDefinitions()"
  },
  "api/MCM.Abstractions.FluentBuilder.Models.ISettingsPropertyButtonBuilder.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.Models.ISettingsPropertyButtonBuilder.html",
    "title": "Interface ISettingsPropertyButtonBuilder | MCM Documentation",
    "summary": "Interface ISettingsPropertyButtonBuilder Namespace MCM.Abstractions.FluentBuilder.Models Assembly MCMv5.dll public interface ISettingsPropertyButtonBuilder : ISettingsPropertyBuilder<ISettingsPropertyButtonBuilder>, ISettingsPropertyBuilder Inherited Members ISettingsPropertyBuilder<ISettingsPropertyButtonBuilder>.SetOrder(int) ISettingsPropertyBuilder<ISettingsPropertyButtonBuilder>.SetRequireRestart(bool) ISettingsPropertyBuilder<ISettingsPropertyButtonBuilder>.SetHintText(string) ISettingsPropertyBuilder.Name ISettingsPropertyBuilder.PropertyReference ISettingsPropertyBuilder.GetDefinitions()"
  },
  "api/MCM.Abstractions.FluentBuilder.Models.ISettingsPropertyDropdownBuilder.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.Models.ISettingsPropertyDropdownBuilder.html",
    "title": "Interface ISettingsPropertyDropdownBuilder | MCM Documentation",
    "summary": "Interface ISettingsPropertyDropdownBuilder Namespace MCM.Abstractions.FluentBuilder.Models Assembly MCMv5.dll public interface ISettingsPropertyDropdownBuilder : ISettingsPropertyBuilder<ISettingsPropertyDropdownBuilder>, ISettingsPropertyBuilder Inherited Members ISettingsPropertyBuilder<ISettingsPropertyDropdownBuilder>.SetOrder(int) ISettingsPropertyBuilder<ISettingsPropertyDropdownBuilder>.SetRequireRestart(bool) ISettingsPropertyBuilder<ISettingsPropertyDropdownBuilder>.SetHintText(string) ISettingsPropertyBuilder.Name ISettingsPropertyBuilder.PropertyReference ISettingsPropertyBuilder.GetDefinitions()"
  },
  "api/MCM.Abstractions.FluentBuilder.Models.ISettingsPropertyFloatingIntegerBuilder.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.Models.ISettingsPropertyFloatingIntegerBuilder.html",
    "title": "Interface ISettingsPropertyFloatingIntegerBuilder | MCM Documentation",
    "summary": "Interface ISettingsPropertyFloatingIntegerBuilder Namespace MCM.Abstractions.FluentBuilder.Models Assembly MCMv5.dll public interface ISettingsPropertyFloatingIntegerBuilder : ISettingsPropertyBuilder<ISettingsPropertyFloatingIntegerBuilder>, ISettingsPropertyBuilder Inherited Members ISettingsPropertyBuilder<ISettingsPropertyFloatingIntegerBuilder>.SetOrder(int) ISettingsPropertyBuilder<ISettingsPropertyFloatingIntegerBuilder>.SetRequireRestart(bool) ISettingsPropertyBuilder<ISettingsPropertyFloatingIntegerBuilder>.SetHintText(string) ISettingsPropertyBuilder.Name ISettingsPropertyBuilder.PropertyReference ISettingsPropertyBuilder.GetDefinitions() Methods AddValueFormat(string) ISettingsPropertyBuilder AddValueFormat(string value) Parameters value string Returns ISettingsPropertyBuilder"
  },
  "api/MCM.Abstractions.FluentBuilder.Models.ISettingsPropertyGroupToggleBuilder.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.Models.ISettingsPropertyGroupToggleBuilder.html",
    "title": "Interface ISettingsPropertyGroupToggleBuilder | MCM Documentation",
    "summary": "Interface ISettingsPropertyGroupToggleBuilder Namespace MCM.Abstractions.FluentBuilder.Models Assembly MCMv5.dll public interface ISettingsPropertyGroupToggleBuilder : ISettingsPropertyBuilder<ISettingsPropertyGroupToggleBuilder>, ISettingsPropertyBuilder Inherited Members ISettingsPropertyBuilder<ISettingsPropertyGroupToggleBuilder>.SetOrder(int) ISettingsPropertyBuilder<ISettingsPropertyGroupToggleBuilder>.SetRequireRestart(bool) ISettingsPropertyBuilder<ISettingsPropertyGroupToggleBuilder>.SetHintText(string) ISettingsPropertyBuilder.Name ISettingsPropertyBuilder.PropertyReference ISettingsPropertyBuilder.GetDefinitions()"
  },
  "api/MCM.Abstractions.FluentBuilder.Models.ISettingsPropertyIntegerBuilder.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.Models.ISettingsPropertyIntegerBuilder.html",
    "title": "Interface ISettingsPropertyIntegerBuilder | MCM Documentation",
    "summary": "Interface ISettingsPropertyIntegerBuilder Namespace MCM.Abstractions.FluentBuilder.Models Assembly MCMv5.dll public interface ISettingsPropertyIntegerBuilder : ISettingsPropertyBuilder<ISettingsPropertyIntegerBuilder>, ISettingsPropertyBuilder Inherited Members ISettingsPropertyBuilder<ISettingsPropertyIntegerBuilder>.SetOrder(int) ISettingsPropertyBuilder<ISettingsPropertyIntegerBuilder>.SetRequireRestart(bool) ISettingsPropertyBuilder<ISettingsPropertyIntegerBuilder>.SetHintText(string) ISettingsPropertyBuilder.Name ISettingsPropertyBuilder.PropertyReference ISettingsPropertyBuilder.GetDefinitions() Methods AddValueFormat(string) ISettingsPropertyBuilder AddValueFormat(string value) Parameters value string Returns ISettingsPropertyBuilder"
  },
  "api/MCM.Abstractions.FluentBuilder.Models.ISettingsPropertyTextBuilder.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.Models.ISettingsPropertyTextBuilder.html",
    "title": "Interface ISettingsPropertyTextBuilder | MCM Documentation",
    "summary": "Interface ISettingsPropertyTextBuilder Namespace MCM.Abstractions.FluentBuilder.Models Assembly MCMv5.dll public interface ISettingsPropertyTextBuilder : ISettingsPropertyBuilder<ISettingsPropertyTextBuilder>, ISettingsPropertyBuilder Inherited Members ISettingsPropertyBuilder<ISettingsPropertyTextBuilder>.SetOrder(int) ISettingsPropertyBuilder<ISettingsPropertyTextBuilder>.SetRequireRestart(bool) ISettingsPropertyBuilder<ISettingsPropertyTextBuilder>.SetHintText(string) ISettingsPropertyBuilder.Name ISettingsPropertyBuilder.PropertyReference ISettingsPropertyBuilder.GetDefinitions()"
  },
  "api/MCM.Abstractions.FluentBuilder.Models.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.Models.html",
    "title": "Namespace MCM.Abstractions.FluentBuilder.Models | MCM Documentation",
    "summary": "Namespace MCM.Abstractions.FluentBuilder.Models Interfaces ISettingsPropertyBoolBuilder ISettingsPropertyButtonBuilder ISettingsPropertyDropdownBuilder ISettingsPropertyFloatingIntegerBuilder ISettingsPropertyGroupToggleBuilder ISettingsPropertyIntegerBuilder ISettingsPropertyTextBuilder"
  },
  "api/MCM.Abstractions.FluentBuilder.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.html",
    "title": "Namespace MCM.Abstractions.FluentBuilder | MCM Documentation",
    "summary": "Namespace MCM.Abstractions.FluentBuilder Classes BaseSettingsBuilder Interfaces ISettingsBuilder An interface that defines the necessary members for implementing a settings builder. ISettingsBuilderFactory ISettingsPresetBuilder ISettingsPropertyBuilder An interface that defines the necessary members for implementing a settings property builder. ISettingsPropertyBuilder<TSettingsPropertyBuilder> An interface that defines the necessary members for implementing a settings property builder. ISettingsPropertyGroupBuilder An interface that defines the necessary members for implementing a settings property group builder."
  },
  "api/MCM.Abstractions.GameFeatures.GameDirectory.html": {
    "href": "api/MCM.Abstractions.GameFeatures.GameDirectory.html",
    "title": "Class GameDirectory | MCM Documentation",
    "summary": "Class GameDirectory Namespace MCM.Abstractions.GameFeatures Assembly MCMv5.dll public record GameDirectory : IEquatable<GameDirectory> Inheritance object GameDirectory Implements IEquatable<GameDirectory> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GameDirectory(PlatformDirectoryType, string) public GameDirectory(PlatformDirectoryType Type, string Path) Parameters Type PlatformDirectoryType Path string Properties Path public string Path { get; init; } Property Value string Type public PlatformDirectoryType Type { get; init; } Property Value PlatformDirectoryType"
  },
  "api/MCM.Abstractions.GameFeatures.GameFile.html": {
    "href": "api/MCM.Abstractions.GameFeatures.GameFile.html",
    "title": "Class GameFile | MCM Documentation",
    "summary": "Class GameFile Namespace MCM.Abstractions.GameFeatures Assembly MCMv5.dll public record GameFile : IEquatable<GameFile> Inheritance object GameFile Implements IEquatable<GameFile> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GameFile(GameDirectory, string) public GameFile(GameDirectory Owner, string Name) Parameters Owner GameDirectory Name string Properties Name public string Name { get; init; } Property Value string Owner public GameDirectory Owner { get; init; } Property Value GameDirectory"
  },
  "api/MCM.Abstractions.GameFeatures.ICampaignIdProvider.html": {
    "href": "api/MCM.Abstractions.GameFeatures.ICampaignIdProvider.html",
    "title": "Interface ICampaignIdProvider | MCM Documentation",
    "summary": "Interface ICampaignIdProvider Namespace MCM.Abstractions.GameFeatures Assembly MCMv5.dll public interface ICampaignIdProvider Methods GetCurrentCampaignId() string? GetCurrentCampaignId() Returns string"
  },
  "api/MCM.Abstractions.GameFeatures.IFileSystemProvider.html": {
    "href": "api/MCM.Abstractions.GameFeatures.IFileSystemProvider.html",
    "title": "Interface IFileSystemProvider | MCM Documentation",
    "summary": "Interface IFileSystemProvider Namespace MCM.Abstractions.GameFeatures Assembly MCMv5.dll public interface IFileSystemProvider Methods GetDirectory(GameDirectory, string) GameDirectory? GetDirectory(GameDirectory directory, string directoryName) Parameters directory GameDirectory directoryName string Returns GameDirectory GetFile(GameDirectory, string) GameFile? GetFile(GameDirectory directory, string fileName) Parameters directory GameDirectory fileName string Returns GameFile GetFiles(GameDirectory, string) GameFile[] GetFiles(GameDirectory directory, string searchPattern) Parameters directory GameDirectory searchPattern string Returns GameFile[] GetModSettingsDirectory() GameDirectory GetModSettingsDirectory() Returns GameDirectory GetOrCreateDirectory(GameDirectory, string) GameDirectory GetOrCreateDirectory(GameDirectory rootFolder, string id) Parameters rootFolder GameDirectory id string Returns GameDirectory GetOrCreateFile(GameDirectory, string) GameFile GetOrCreateFile(GameDirectory directory, string fileName) Parameters directory GameDirectory fileName string Returns GameFile GetSystemPath(GameDirectory) string? GetSystemPath(GameDirectory directory) Parameters directory GameDirectory Returns string GetSystemPath(GameFile) string? GetSystemPath(GameFile file) Parameters file GameFile Returns string ReadData(GameFile) byte[]? ReadData(GameFile file) Parameters file GameFile Returns byte[] WriteData(GameFile, byte[]?) bool WriteData(GameFile file, byte[]? data) Parameters file GameFile data byte[] Returns bool"
  },
  "api/MCM.Abstractions.GameFeatures.IGameEventListener.html": {
    "href": "api/MCM.Abstractions.GameFeatures.IGameEventListener.html",
    "title": "Interface IGameEventListener | MCM Documentation",
    "summary": "Interface IGameEventListener Namespace MCM.Abstractions.GameFeatures Assembly MCMv5.dll public interface IGameEventListener Events GameEnded event Action GameEnded Event Type Action GameLoaded event Action GameLoaded Event Type Action GameStarted event Action GameStarted Event Type Action"
  },
  "api/MCM.Abstractions.GameFeatures.IPerSaveSettingsProvider.html": {
    "href": "api/MCM.Abstractions.GameFeatures.IPerSaveSettingsProvider.html",
    "title": "Interface IPerSaveSettingsProvider | MCM Documentation",
    "summary": "Interface IPerSaveSettingsProvider Namespace MCM.Abstractions.GameFeatures Assembly MCMv5.dll public interface IPerSaveSettingsProvider Methods LoadSettings(PerSaveSettings) void LoadSettings(PerSaveSettings perSaveSettings) Parameters perSaveSettings PerSaveSettings SaveSettings(PerSaveSettings) bool SaveSettings(PerSaveSettings perSaveSettings) Parameters perSaveSettings PerSaveSettings Returns bool"
  },
  "api/MCM.Abstractions.GameFeatures.PlatformDirectoryType.html": {
    "href": "api/MCM.Abstractions.GameFeatures.PlatformDirectoryType.html",
    "title": "Enum PlatformDirectoryType | MCM Documentation",
    "summary": "Enum PlatformDirectoryType Namespace MCM.Abstractions.GameFeatures Assembly MCMv5.dll public enum PlatformDirectoryType Fields Application = 1 Temporary = 2 User = 0"
  },
  "api/MCM.Abstractions.GameFeatures.html": {
    "href": "api/MCM.Abstractions.GameFeatures.html",
    "title": "Namespace MCM.Abstractions.GameFeatures | MCM Documentation",
    "summary": "Namespace MCM.Abstractions.GameFeatures Classes GameDirectory GameFile Interfaces ICampaignIdProvider IFileSystemProvider IGameEventListener IPerSaveSettingsProvider Enums PlatformDirectoryType"
  },
  "api/MCM.Abstractions.Global.IFluentGlobalSettingsContainer.html": {
    "href": "api/MCM.Abstractions.Global.IFluentGlobalSettingsContainer.html",
    "title": "Interface IFluentGlobalSettingsContainer | MCM Documentation",
    "summary": "Interface IFluentGlobalSettingsContainer Namespace MCM.Abstractions.Global Assembly MCMv5.dll public interface IFluentGlobalSettingsContainer : IGlobalSettingsContainer, ISettingsContainer, ISettingsContainerHasSettingsDefinitions, ISettingsContainerCanOverride, ISettingsContainerCanReset, ISettingsContainerPresets, ISettingsContainerHasSettingsPack Inherited Members ISettingsContainer.GetSettings(string) ISettingsContainer.SaveSettings(BaseSettings) ISettingsContainerHasSettingsDefinitions.SettingsDefinitions ISettingsContainerCanOverride.OverrideSettings(BaseSettings) ISettingsContainerCanReset.ResetSettings(BaseSettings) ISettingsContainerPresets.GetPresets(string) ISettingsContainerPresets.SavePresets(ISettingsPreset) ISettingsContainerHasSettingsPack.SaveAvailableSnapshots() ISettingsContainerHasSettingsPack.LoadAvailableSnapshots(IEnumerable<SettingSnapshot>) Methods Register(FluentGlobalSettings) void Register(FluentGlobalSettings settings) Parameters settings FluentGlobalSettings Unregister(FluentGlobalSettings) void Unregister(FluentGlobalSettings settings) Parameters settings FluentGlobalSettings"
  },
  "api/MCM.Abstractions.Global.IGlobalSettingsContainer.html": {
    "href": "api/MCM.Abstractions.Global.IGlobalSettingsContainer.html",
    "title": "Interface IGlobalSettingsContainer | MCM Documentation",
    "summary": "Interface IGlobalSettingsContainer Namespace MCM.Abstractions.Global Assembly MCMv5.dll public interface IGlobalSettingsContainer : ISettingsContainer, ISettingsContainerHasSettingsDefinitions, ISettingsContainerCanOverride, ISettingsContainerCanReset, ISettingsContainerPresets, ISettingsContainerHasSettingsPack Inherited Members ISettingsContainer.GetSettings(string) ISettingsContainer.SaveSettings(BaseSettings) ISettingsContainerHasSettingsDefinitions.SettingsDefinitions ISettingsContainerCanOverride.OverrideSettings(BaseSettings) ISettingsContainerCanReset.ResetSettings(BaseSettings) ISettingsContainerPresets.GetPresets(string) ISettingsContainerPresets.SavePresets(ISettingsPreset) ISettingsContainerHasSettingsPack.SaveAvailableSnapshots() ISettingsContainerHasSettingsPack.LoadAvailableSnapshots(IEnumerable<SettingSnapshot>)"
  },
  "api/MCM.Abstractions.Global.html": {
    "href": "api/MCM.Abstractions.Global.html",
    "title": "Namespace MCM.Abstractions.Global | MCM Documentation",
    "summary": "Namespace MCM.Abstractions.Global Interfaces IFluentGlobalSettingsContainer IGlobalSettingsContainer"
  },
  "api/MCM.Abstractions.IExternalSettingsProvider.html": {
    "href": "api/MCM.Abstractions.IExternalSettingsProvider.html",
    "title": "Interface IExternalSettingsProvider | MCM Documentation",
    "summary": "Interface IExternalSettingsProvider Namespace MCM.Abstractions Assembly MCMv5.dll Used to add foreign Options API's that MCM will be able to use. Most likely will be used to ease backwards compatibility ports of older MCM API's so we'll be able to reuse more code. This is a higher level alternative to using ISettingsContainer. public interface IExternalSettingsProvider Properties SettingsDefinitions IEnumerable<SettingsDefinition> SettingsDefinitions { get; } Property Value IEnumerable<SettingsDefinition> Methods GetPresets(string) IEnumerable<ISettingsPreset> GetPresets(string id) Parameters id string Returns IEnumerable<ISettingsPreset> GetSettings(string) BaseSettings? GetSettings(string id) Parameters id string Returns BaseSettings OverrideSettings(BaseSettings) void OverrideSettings(BaseSettings settings) Parameters settings BaseSettings ResetSettings(BaseSettings) void ResetSettings(BaseSettings settings) Parameters settings BaseSettings SaveSettings(BaseSettings) void SaveSettings(BaseSettings settings) Parameters settings BaseSettings"
  },
  "api/MCM.Abstractions.IExternalSettingsProviderCanInvalidateCache.html": {
    "href": "api/MCM.Abstractions.IExternalSettingsProviderCanInvalidateCache.html",
    "title": "Interface IExternalSettingsProviderCanInvalidateCache | MCM Documentation",
    "summary": "Interface IExternalSettingsProviderCanInvalidateCache Namespace MCM.Abstractions Assembly MCMv5.dll Used to add foreign Options API's that MCM will be able to use. Most likely will be used to ease backwards compatibility ports of older MCM API's so we'll be able to reuse more code. This is a higher level alternative to using ISettingsContainer. public interface IExternalSettingsProviderCanInvalidateCache Events InstanceCacheInvalidated event Action<ExternalSettingsProviderInvalidateCacheType> InstanceCacheInvalidated Event Type Action<ExternalSettingsProviderInvalidateCacheType>"
  },
  "api/MCM.Abstractions.IPropertyDefinitionBase.html": {
    "href": "api/MCM.Abstractions.IPropertyDefinitionBase.html",
    "title": "Interface IPropertyDefinitionBase | MCM Documentation",
    "summary": "Interface IPropertyDefinitionBase Namespace MCM.Abstractions Assembly MCMv5.dll public interface IPropertyDefinitionBase Properties DisplayName The display name of the setting in the settings menu. string DisplayName { get; } Property Value string HintText The hint text that is displayed at the bottom of the screen when the user hovers over the setting in the settings menu. string HintText { get; } Property Value string Order Require restart of the game if the value is changed. int Order { get; } Property Value int RequireRestart Require restart of the game if the value is changed. bool RequireRestart { get; } Property Value bool"
  },
  "api/MCM.Abstractions.IPropertyDefinitionBool.html": {
    "href": "api/MCM.Abstractions.IPropertyDefinitionBool.html",
    "title": "Interface IPropertyDefinitionBool | MCM Documentation",
    "summary": "Interface IPropertyDefinitionBool Namespace MCM.Abstractions Assembly MCMv5.dll public interface IPropertyDefinitionBool : IPropertyDefinitionBase Inherited Members IPropertyDefinitionBase.DisplayName IPropertyDefinitionBase.Order IPropertyDefinitionBase.RequireRestart IPropertyDefinitionBase.HintText"
  },
  "api/MCM.Abstractions.IPropertyDefinitionButton.html": {
    "href": "api/MCM.Abstractions.IPropertyDefinitionButton.html",
    "title": "Interface IPropertyDefinitionButton | MCM Documentation",
    "summary": "Interface IPropertyDefinitionButton Namespace MCM.Abstractions Assembly MCMv5.dll public interface IPropertyDefinitionButton : IPropertyDefinitionBase Inherited Members IPropertyDefinitionBase.DisplayName IPropertyDefinitionBase.Order IPropertyDefinitionBase.RequireRestart IPropertyDefinitionBase.HintText Properties Content string Content { get; } Property Value string"
  },
  "api/MCM.Abstractions.IPropertyDefinitionDropdown.html": {
    "href": "api/MCM.Abstractions.IPropertyDefinitionDropdown.html",
    "title": "Interface IPropertyDefinitionDropdown | MCM Documentation",
    "summary": "Interface IPropertyDefinitionDropdown Namespace MCM.Abstractions Assembly MCMv5.dll public interface IPropertyDefinitionDropdown : IPropertyDefinitionBase Inherited Members IPropertyDefinitionBase.DisplayName IPropertyDefinitionBase.Order IPropertyDefinitionBase.RequireRestart IPropertyDefinitionBase.HintText Properties SelectedIndex int SelectedIndex { get; } Property Value int"
  },
  "api/MCM.Abstractions.IPropertyDefinitionGroupToggle.html": {
    "href": "api/MCM.Abstractions.IPropertyDefinitionGroupToggle.html",
    "title": "Interface IPropertyDefinitionGroupToggle | MCM Documentation",
    "summary": "Interface IPropertyDefinitionGroupToggle Namespace MCM.Abstractions Assembly MCMv5.dll public interface IPropertyDefinitionGroupToggle : IPropertyDefinitionBase Inherited Members IPropertyDefinitionBase.DisplayName IPropertyDefinitionBase.Order IPropertyDefinitionBase.RequireRestart IPropertyDefinitionBase.HintText Properties IsToggle bool IsToggle { get; } Property Value bool"
  },
  "api/MCM.Abstractions.IPropertyDefinitionText.html": {
    "href": "api/MCM.Abstractions.IPropertyDefinitionText.html",
    "title": "Interface IPropertyDefinitionText | MCM Documentation",
    "summary": "Interface IPropertyDefinitionText Namespace MCM.Abstractions Assembly MCMv5.dll public interface IPropertyDefinitionText : IPropertyDefinitionBase Inherited Members IPropertyDefinitionBase.DisplayName IPropertyDefinitionBase.Order IPropertyDefinitionBase.RequireRestart IPropertyDefinitionBase.HintText"
  },
  "api/MCM.Abstractions.IPropertyDefinitionWithActionFormat.html": {
    "href": "api/MCM.Abstractions.IPropertyDefinitionWithActionFormat.html",
    "title": "Interface IPropertyDefinitionWithActionFormat | MCM Documentation",
    "summary": "Interface IPropertyDefinitionWithActionFormat Namespace MCM.Abstractions Assembly MCMv5.dll public interface IPropertyDefinitionWithActionFormat Properties ValueFormatFunc Func<object, string>? ValueFormatFunc { get; } Property Value Func<object, string>"
  },
  "api/MCM.Abstractions.IPropertyDefinitionWithCustomFormatter.html": {
    "href": "api/MCM.Abstractions.IPropertyDefinitionWithCustomFormatter.html",
    "title": "Interface IPropertyDefinitionWithCustomFormatter | MCM Documentation",
    "summary": "Interface IPropertyDefinitionWithCustomFormatter Namespace MCM.Abstractions Assembly MCMv5.dll public interface IPropertyDefinitionWithCustomFormatter Properties CustomFormatter Type? CustomFormatter { get; } Property Value Type"
  },
  "api/MCM.Abstractions.IPropertyDefinitionWithEditableMinMax.html": {
    "href": "api/MCM.Abstractions.IPropertyDefinitionWithEditableMinMax.html",
    "title": "Interface IPropertyDefinitionWithEditableMinMax | MCM Documentation",
    "summary": "Interface IPropertyDefinitionWithEditableMinMax Namespace MCM.Abstractions Assembly MCMv5.dll public interface IPropertyDefinitionWithEditableMinMax Properties EditableMaxValue decimal EditableMaxValue { get; } Property Value decimal EditableMinValue decimal EditableMinValue { get; } Property Value decimal"
  },
  "api/MCM.Abstractions.IPropertyDefinitionWithFormat.html": {
    "href": "api/MCM.Abstractions.IPropertyDefinitionWithFormat.html",
    "title": "Interface IPropertyDefinitionWithFormat | MCM Documentation",
    "summary": "Interface IPropertyDefinitionWithFormat Namespace MCM.Abstractions Assembly MCMv5.dll public interface IPropertyDefinitionWithFormat Properties ValueFormat The format in which the slider's value will be displayed in. string ValueFormat { get; } Property Value string"
  },
  "api/MCM.Abstractions.IPropertyDefinitionWithId.html": {
    "href": "api/MCM.Abstractions.IPropertyDefinitionWithId.html",
    "title": "Interface IPropertyDefinitionWithId | MCM Documentation",
    "summary": "Interface IPropertyDefinitionWithId Namespace MCM.Abstractions Assembly MCMv5.dll public interface IPropertyDefinitionWithId Properties Id string Id { get; } Property Value string"
  },
  "api/MCM.Abstractions.IPropertyDefinitionWithMinMax.html": {
    "href": "api/MCM.Abstractions.IPropertyDefinitionWithMinMax.html",
    "title": "Interface IPropertyDefinitionWithMinMax | MCM Documentation",
    "summary": "Interface IPropertyDefinitionWithMinMax Namespace MCM.Abstractions Assembly MCMv5.dll public interface IPropertyDefinitionWithMinMax Properties MaxValue The maximum value the setting can be set to. Used by the slider control. decimal MaxValue { get; } Property Value decimal MinValue The minimum value the setting can be set to. Used by the slider control. decimal MinValue { get; } Property Value decimal"
  },
  "api/MCM.Abstractions.IPropertyGroupDefinition.html": {
    "href": "api/MCM.Abstractions.IPropertyGroupDefinition.html",
    "title": "Interface IPropertyGroupDefinition | MCM Documentation",
    "summary": "Interface IPropertyGroupDefinition Namespace MCM.Abstractions Assembly MCMv5.dll public interface IPropertyGroupDefinition Properties GroupName The name of the settings group. Includes SubGroup notation if present. string GroupName { get; } Property Value string GroupOrder int GroupOrder { get; } Property Value int"
  },
  "api/MCM.Abstractions.ISettingsContainer.html": {
    "href": "api/MCM.Abstractions.ISettingsContainer.html",
    "title": "Interface ISettingsContainer | MCM Documentation",
    "summary": "Interface ISettingsContainer Namespace MCM.Abstractions Assembly MCMv5.dll public interface ISettingsContainer Methods GetSettings(string) BaseSettings? GetSettings(string id) Parameters id string Returns BaseSettings SaveSettings(BaseSettings) bool SaveSettings(BaseSettings settings) Parameters settings BaseSettings Returns bool"
  },
  "api/MCM.Abstractions.ISettingsContainerCanInvalidateCache.html": {
    "href": "api/MCM.Abstractions.ISettingsContainerCanInvalidateCache.html",
    "title": "Interface ISettingsContainerCanInvalidateCache | MCM Documentation",
    "summary": "Interface ISettingsContainerCanInvalidateCache Namespace MCM.Abstractions Assembly MCMv5.dll public interface ISettingsContainerCanInvalidateCache Events InstanceCacheInvalidated event Action InstanceCacheInvalidated Event Type Action"
  },
  "api/MCM.Abstractions.ISettingsContainerCanOverride.html": {
    "href": "api/MCM.Abstractions.ISettingsContainerCanOverride.html",
    "title": "Interface ISettingsContainerCanOverride | MCM Documentation",
    "summary": "Interface ISettingsContainerCanOverride Namespace MCM.Abstractions Assembly MCMv5.dll Interface that declares that the ISettingsContainer can override its settings public interface ISettingsContainerCanOverride Methods OverrideSettings(BaseSettings) bool OverrideSettings(BaseSettings settings) Parameters settings BaseSettings Returns bool"
  },
  "api/MCM.Abstractions.ISettingsContainerCanReset.html": {
    "href": "api/MCM.Abstractions.ISettingsContainerCanReset.html",
    "title": "Interface ISettingsContainerCanReset | MCM Documentation",
    "summary": "Interface ISettingsContainerCanReset Namespace MCM.Abstractions Assembly MCMv5.dll Interface that declares that the ISettingsContainer can reset its settings public interface ISettingsContainerCanReset Methods ResetSettings(BaseSettings) bool ResetSettings(BaseSettings settings) Parameters settings BaseSettings Returns bool"
  },
  "api/MCM.Abstractions.ISettingsContainerHasSettingsDefinitions.html": {
    "href": "api/MCM.Abstractions.ISettingsContainerHasSettingsDefinitions.html",
    "title": "Interface ISettingsContainerHasSettingsDefinitions | MCM Documentation",
    "summary": "Interface ISettingsContainerHasSettingsDefinitions Namespace MCM.Abstractions Assembly MCMv5.dll Interface that declares that the ISettingsContainer provides SettingsDefinition public interface ISettingsContainerHasSettingsDefinitions Properties SettingsDefinitions IEnumerable<SettingsDefinition> SettingsDefinitions { get; } Property Value IEnumerable<SettingsDefinition>"
  },
  "api/MCM.Abstractions.ISettingsContainerHasSettingsPack.html": {
    "href": "api/MCM.Abstractions.ISettingsContainerHasSettingsPack.html",
    "title": "Interface ISettingsContainerHasSettingsPack | MCM Documentation",
    "summary": "Interface ISettingsContainerHasSettingsPack Namespace MCM.Abstractions Assembly MCMv5.dll public interface ISettingsContainerHasSettingsPack Methods LoadAvailableSnapshots(IEnumerable<SettingSnapshot>) IEnumerable<BaseSettings> LoadAvailableSnapshots(IEnumerable<SettingSnapshot> snapshots) Parameters snapshots IEnumerable<SettingSnapshot> Returns IEnumerable<BaseSettings> SaveAvailableSnapshots() IEnumerable<SettingSnapshot> SaveAvailableSnapshots() Returns IEnumerable<SettingSnapshot>"
  },
  "api/MCM.Abstractions.ISettingsContainerHasUnavailable.html": {
    "href": "api/MCM.Abstractions.ISettingsContainerHasUnavailable.html",
    "title": "Interface ISettingsContainerHasUnavailable | MCM Documentation",
    "summary": "Interface ISettingsContainerHasUnavailable Namespace MCM.Abstractions Assembly MCMv5.dll Interface that lists unavailable settings in the global menu public interface ISettingsContainerHasUnavailable Methods GetUnavailableSettings() IEnumerable<UnavailableSetting> GetUnavailableSettings() Returns IEnumerable<UnavailableSetting>"
  },
  "api/MCM.Abstractions.ISettingsContainerPresets.html": {
    "href": "api/MCM.Abstractions.ISettingsContainerPresets.html",
    "title": "Interface ISettingsContainerPresets | MCM Documentation",
    "summary": "Interface ISettingsContainerPresets Namespace MCM.Abstractions Assembly MCMv5.dll public interface ISettingsContainerPresets Methods GetPresets(string) IEnumerable<ISettingsPreset> GetPresets(string settingsId) Parameters settingsId string Returns IEnumerable<ISettingsPreset> SavePresets(ISettingsPreset) bool SavePresets(ISettingsPreset preset) Parameters preset ISettingsPreset Returns bool"
  },
  "api/MCM.Abstractions.ISettingsFormat.html": {
    "href": "api/MCM.Abstractions.ISettingsFormat.html",
    "title": "Interface ISettingsFormat | MCM Documentation",
    "summary": "Interface ISettingsFormat Namespace MCM.Abstractions Assembly MCMv5.dll public interface ISettingsFormat Properties FormatTypes IEnumerable<string> FormatTypes { get; } Property Value IEnumerable<string> Methods Load(BaseSettings, GameDirectory, string) BaseSettings Load(BaseSettings settings, GameDirectory directory, string filename) Parameters settings BaseSettings directory GameDirectory filename string Returns BaseSettings Save(BaseSettings, GameDirectory, string) bool Save(BaseSettings settings, GameDirectory directory, string filename) Parameters settings BaseSettings directory GameDirectory filename string Returns bool"
  },
  "api/MCM.Abstractions.ISettingsPreset.html": {
    "href": "api/MCM.Abstractions.ISettingsPreset.html",
    "title": "Interface ISettingsPreset | MCM Documentation",
    "summary": "Interface ISettingsPreset Namespace MCM.Abstractions Assembly MCMv5.dll public interface ISettingsPreset Properties Id string Id { get; } Property Value string Name string Name { get; } Property Value string SettingsId string SettingsId { get; } Property Value string Methods LoadPreset() BaseSettings LoadPreset() Returns BaseSettings SavePreset(BaseSettings) bool SavePreset(BaseSettings settings) Parameters settings BaseSettings Returns bool"
  },
  "api/MCM.Abstractions.ISettingsPropertyDefinition.html": {
    "href": "api/MCM.Abstractions.ISettingsPropertyDefinition.html",
    "title": "Interface ISettingsPropertyDefinition | MCM Documentation",
    "summary": "Interface ISettingsPropertyDefinition Namespace MCM.Abstractions Assembly MCMv5.dll public interface ISettingsPropertyDefinition : IPropertyDefinitionBool, IPropertyDefinitionDropdown, IPropertyDefinitionWithMinMax, IPropertyDefinitionWithEditableMinMax, IPropertyDefinitionWithFormat, IPropertyDefinitionWithCustomFormatter, IPropertyDefinitionWithId, IPropertyDefinitionText, IPropertyDefinitionGroupToggle, IPropertyGroupDefinition, IPropertyDefinitionButton, IPropertyDefinitionBase Inherited Members IPropertyDefinitionDropdown.SelectedIndex IPropertyDefinitionWithMinMax.MinValue IPropertyDefinitionWithMinMax.MaxValue IPropertyDefinitionWithEditableMinMax.EditableMinValue IPropertyDefinitionWithEditableMinMax.EditableMaxValue IPropertyDefinitionWithFormat.ValueFormat IPropertyDefinitionWithCustomFormatter.CustomFormatter IPropertyDefinitionWithId.Id IPropertyDefinitionGroupToggle.IsToggle IPropertyGroupDefinition.GroupName IPropertyGroupDefinition.GroupOrder IPropertyDefinitionButton.Content IPropertyDefinitionBase.DisplayName IPropertyDefinitionBase.Order IPropertyDefinitionBase.RequireRestart IPropertyDefinitionBase.HintText Properties PropertyReference IRef PropertyReference { get; } Property Value IRef SettingType SettingType SettingType { get; } Property Value SettingType Methods Clone(bool) SettingsPropertyDefinition Clone(bool keepRefs = true) Parameters keepRefs bool Returns SettingsPropertyDefinition"
  },
  "api/MCM.Abstractions.MemorySettingsFormat.html": {
    "href": "api/MCM.Abstractions.MemorySettingsFormat.html",
    "title": "Class MemorySettingsFormat | MCM Documentation",
    "summary": "Class MemorySettingsFormat Namespace MCM.Abstractions Assembly MCMv5.dll public sealed class MemorySettingsFormat : ISettingsFormat Inheritance object MemorySettingsFormat Implements ISettingsFormat Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties FormatTypes public IEnumerable<string> FormatTypes { get; } Property Value IEnumerable<string> Methods Load(BaseSettings, GameDirectory, string) public BaseSettings Load(BaseSettings settings, GameDirectory directory, string filename) Parameters settings BaseSettings directory GameDirectory filename string Returns BaseSettings Save(BaseSettings, GameDirectory, string) public bool Save(BaseSettings settings, GameDirectory directory, string filename) Parameters settings BaseSettings directory GameDirectory filename string Returns bool"
  },
  "api/MCM.Abstractions.MemorySettingsPreset.html": {
    "href": "api/MCM.Abstractions.MemorySettingsPreset.html",
    "title": "Class MemorySettingsPreset | MCM Documentation",
    "summary": "Class MemorySettingsPreset Namespace MCM.Abstractions Assembly MCMv5.dll A readonly non serializable preset public sealed class MemorySettingsPreset : ISettingsPreset Inheritance object MemorySettingsPreset Implements ISettingsPreset Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors MemorySettingsPreset(string, string, string, Func<BaseSettings>) public MemorySettingsPreset(string settingId, string id, string name, Func<BaseSettings> template) Parameters settingId string id string name string template Func<BaseSettings> Properties Id public string Id { get; } Property Value string Name public string Name { get; } Property Value string SettingsId public string SettingsId { get; } Property Value string Methods LoadPreset() public BaseSettings LoadPreset() Returns BaseSettings SavePreset(BaseSettings) public bool SavePreset(BaseSettings settings) Parameters settings BaseSettings Returns bool"
  },
  "api/MCM.Abstractions.NoneSettingsFormat.html": {
    "href": "api/MCM.Abstractions.NoneSettingsFormat.html",
    "title": "Class NoneSettingsFormat | MCM Documentation",
    "summary": "Class NoneSettingsFormat Namespace MCM.Abstractions Assembly MCMv5.dll public sealed class NoneSettingsFormat : ISettingsFormat Inheritance object NoneSettingsFormat Implements ISettingsFormat Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties FormatTypes public IEnumerable<string> FormatTypes { get; } Property Value IEnumerable<string> Methods Load(BaseSettings, GameDirectory, string) public BaseSettings Load(BaseSettings settings, GameDirectory directory, string filename) Parameters settings BaseSettings directory GameDirectory filename string Returns BaseSettings Save(BaseSettings, GameDirectory, string) public bool Save(BaseSettings settings, GameDirectory directory, string filename) Parameters settings BaseSettings directory GameDirectory filename string Returns bool"
  },
  "api/MCM.Abstractions.PerCampaign.IFluentPerCampaignSettingsContainer.html": {
    "href": "api/MCM.Abstractions.PerCampaign.IFluentPerCampaignSettingsContainer.html",
    "title": "Interface IFluentPerCampaignSettingsContainer | MCM Documentation",
    "summary": "Interface IFluentPerCampaignSettingsContainer Namespace MCM.Abstractions.PerCampaign Assembly MCMv5.dll public interface IFluentPerCampaignSettingsContainer : IPerCampaignSettingsContainer, ISettingsContainer, ISettingsContainerHasSettingsDefinitions, ISettingsContainerCanOverride, ISettingsContainerCanReset, ISettingsContainerPresets, ISettingsContainerHasUnavailable, ISettingsContainerHasSettingsPack, ISettingsContainerCanInvalidateCache Inherited Members ISettingsContainer.GetSettings(string) ISettingsContainer.SaveSettings(BaseSettings) ISettingsContainerHasSettingsDefinitions.SettingsDefinitions ISettingsContainerCanOverride.OverrideSettings(BaseSettings) ISettingsContainerCanReset.ResetSettings(BaseSettings) ISettingsContainerPresets.GetPresets(string) ISettingsContainerPresets.SavePresets(ISettingsPreset) ISettingsContainerHasUnavailable.GetUnavailableSettings() ISettingsContainerHasSettingsPack.SaveAvailableSnapshots() ISettingsContainerHasSettingsPack.LoadAvailableSnapshots(IEnumerable<SettingSnapshot>) ISettingsContainerCanInvalidateCache.InstanceCacheInvalidated Methods Register(FluentPerCampaignSettings) void Register(FluentPerCampaignSettings settings) Parameters settings FluentPerCampaignSettings Unregister(FluentPerCampaignSettings) void Unregister(FluentPerCampaignSettings settings) Parameters settings FluentPerCampaignSettings"
  },
  "api/MCM.Abstractions.PerCampaign.IPerCampaignSettingsContainer.html": {
    "href": "api/MCM.Abstractions.PerCampaign.IPerCampaignSettingsContainer.html",
    "title": "Interface IPerCampaignSettingsContainer | MCM Documentation",
    "summary": "Interface IPerCampaignSettingsContainer Namespace MCM.Abstractions.PerCampaign Assembly MCMv5.dll public interface IPerCampaignSettingsContainer : ISettingsContainer, ISettingsContainerHasSettingsDefinitions, ISettingsContainerCanOverride, ISettingsContainerCanReset, ISettingsContainerPresets, ISettingsContainerHasUnavailable, ISettingsContainerHasSettingsPack, ISettingsContainerCanInvalidateCache Inherited Members ISettingsContainer.GetSettings(string) ISettingsContainer.SaveSettings(BaseSettings) ISettingsContainerHasSettingsDefinitions.SettingsDefinitions ISettingsContainerCanOverride.OverrideSettings(BaseSettings) ISettingsContainerCanReset.ResetSettings(BaseSettings) ISettingsContainerPresets.GetPresets(string) ISettingsContainerPresets.SavePresets(ISettingsPreset) ISettingsContainerHasUnavailable.GetUnavailableSettings() ISettingsContainerHasSettingsPack.SaveAvailableSnapshots() ISettingsContainerHasSettingsPack.LoadAvailableSnapshots(IEnumerable<SettingSnapshot>) ISettingsContainerCanInvalidateCache.InstanceCacheInvalidated"
  },
  "api/MCM.Abstractions.PerCampaign.html": {
    "href": "api/MCM.Abstractions.PerCampaign.html",
    "title": "Namespace MCM.Abstractions.PerCampaign | MCM Documentation",
    "summary": "Namespace MCM.Abstractions.PerCampaign Interfaces IFluentPerCampaignSettingsContainer IPerCampaignSettingsContainer"
  },
  "api/MCM.Abstractions.PerSave.IFluentPerSaveSettingsContainer.html": {
    "href": "api/MCM.Abstractions.PerSave.IFluentPerSaveSettingsContainer.html",
    "title": "Interface IFluentPerSaveSettingsContainer | MCM Documentation",
    "summary": "Interface IFluentPerSaveSettingsContainer Namespace MCM.Abstractions.PerSave Assembly MCMv5.dll public interface IFluentPerSaveSettingsContainer : IPerSaveSettingsContainer, ISettingsContainer, ISettingsContainerHasSettingsDefinitions, ISettingsContainerCanOverride, ISettingsContainerCanReset, ISettingsContainerPresets, ISettingsContainerHasUnavailable, ISettingsContainerHasSettingsPack, ISettingsContainerCanInvalidateCache Inherited Members IPerSaveSettingsContainer.LoadSettings() ISettingsContainer.GetSettings(string) ISettingsContainer.SaveSettings(BaseSettings) ISettingsContainerHasSettingsDefinitions.SettingsDefinitions ISettingsContainerCanOverride.OverrideSettings(BaseSettings) ISettingsContainerCanReset.ResetSettings(BaseSettings) ISettingsContainerPresets.GetPresets(string) ISettingsContainerPresets.SavePresets(ISettingsPreset) ISettingsContainerHasUnavailable.GetUnavailableSettings() ISettingsContainerHasSettingsPack.SaveAvailableSnapshots() ISettingsContainerHasSettingsPack.LoadAvailableSnapshots(IEnumerable<SettingSnapshot>) ISettingsContainerCanInvalidateCache.InstanceCacheInvalidated Methods Register(FluentPerSaveSettings) void Register(FluentPerSaveSettings settings) Parameters settings FluentPerSaveSettings Unregister(FluentPerSaveSettings) void Unregister(FluentPerSaveSettings settings) Parameters settings FluentPerSaveSettings"
  },
  "api/MCM.Abstractions.PerSave.IPerSaveSettingsContainer.html": {
    "href": "api/MCM.Abstractions.PerSave.IPerSaveSettingsContainer.html",
    "title": "Interface IPerSaveSettingsContainer | MCM Documentation",
    "summary": "Interface IPerSaveSettingsContainer Namespace MCM.Abstractions.PerSave Assembly MCMv5.dll public interface IPerSaveSettingsContainer : ISettingsContainer, ISettingsContainerHasSettingsDefinitions, ISettingsContainerCanOverride, ISettingsContainerCanReset, ISettingsContainerPresets, ISettingsContainerHasUnavailable, ISettingsContainerHasSettingsPack, ISettingsContainerCanInvalidateCache Inherited Members ISettingsContainer.GetSettings(string) ISettingsContainer.SaveSettings(BaseSettings) ISettingsContainerHasSettingsDefinitions.SettingsDefinitions ISettingsContainerCanOverride.OverrideSettings(BaseSettings) ISettingsContainerCanReset.ResetSettings(BaseSettings) ISettingsContainerPresets.GetPresets(string) ISettingsContainerPresets.SavePresets(ISettingsPreset) ISettingsContainerHasUnavailable.GetUnavailableSettings() ISettingsContainerHasSettingsPack.SaveAvailableSnapshots() ISettingsContainerHasSettingsPack.LoadAvailableSnapshots(IEnumerable<SettingSnapshot>) ISettingsContainerCanInvalidateCache.InstanceCacheInvalidated Methods LoadSettings() void LoadSettings()"
  },
  "api/MCM.Abstractions.PerSave.html": {
    "href": "api/MCM.Abstractions.PerSave.html",
    "title": "Namespace MCM.Abstractions.PerSave | MCM Documentation",
    "summary": "Namespace MCM.Abstractions.PerSave Interfaces IFluentPerSaveSettingsContainer IPerSaveSettingsContainer"
  },
  "api/MCM.Abstractions.Properties.IAttributeSettingsPropertyDiscoverer.html": {
    "href": "api/MCM.Abstractions.Properties.IAttributeSettingsPropertyDiscoverer.html",
    "title": "Interface IAttributeSettingsPropertyDiscoverer | MCM Documentation",
    "summary": "Interface IAttributeSettingsPropertyDiscoverer Namespace MCM.Abstractions.Properties Assembly MCMv5.dll So it can be overriden by an external library public interface IAttributeSettingsPropertyDiscoverer : ISettingsPropertyDiscoverer Inherited Members ISettingsPropertyDiscoverer.DiscoveryTypes ISettingsPropertyDiscoverer.GetProperties(BaseSettings)"
  },
  "api/MCM.Abstractions.Properties.IFluentSettingsPropertyDiscoverer.html": {
    "href": "api/MCM.Abstractions.Properties.IFluentSettingsPropertyDiscoverer.html",
    "title": "Interface IFluentSettingsPropertyDiscoverer | MCM Documentation",
    "summary": "Interface IFluentSettingsPropertyDiscoverer Namespace MCM.Abstractions.Properties Assembly MCMv5.dll public interface IFluentSettingsPropertyDiscoverer : ISettingsPropertyDiscoverer Inherited Members ISettingsPropertyDiscoverer.DiscoveryTypes ISettingsPropertyDiscoverer.GetProperties(BaseSettings)"
  },
  "api/MCM.Abstractions.Properties.ISettingsPropertyDiscoverer.html": {
    "href": "api/MCM.Abstractions.Properties.ISettingsPropertyDiscoverer.html",
    "title": "Interface ISettingsPropertyDiscoverer | MCM Documentation",
    "summary": "Interface ISettingsPropertyDiscoverer Namespace MCM.Abstractions.Properties Assembly MCMv5.dll public interface ISettingsPropertyDiscoverer Properties DiscoveryTypes IEnumerable<string> DiscoveryTypes { get; } Property Value IEnumerable<string> Methods GetProperties(BaseSettings) IEnumerable<ISettingsPropertyDefinition> GetProperties(BaseSettings settings) Parameters settings BaseSettings Returns IEnumerable<ISettingsPropertyDefinition>"
  },
  "api/MCM.Abstractions.Properties.NoneSettingsPropertyDiscoverer.html": {
    "href": "api/MCM.Abstractions.Properties.NoneSettingsPropertyDiscoverer.html",
    "title": "Class NoneSettingsPropertyDiscoverer | MCM Documentation",
    "summary": "Class NoneSettingsPropertyDiscoverer Namespace MCM.Abstractions.Properties Assembly MCMv5.dll public sealed class NoneSettingsPropertyDiscoverer : ISettingsPropertyDiscoverer Inheritance object NoneSettingsPropertyDiscoverer Implements ISettingsPropertyDiscoverer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties DiscoveryTypes public IEnumerable<string> DiscoveryTypes { get; } Property Value IEnumerable<string> Methods GetProperties(BaseSettings) public IEnumerable<ISettingsPropertyDefinition> GetProperties(BaseSettings settings) Parameters settings BaseSettings Returns IEnumerable<ISettingsPropertyDefinition>"
  },
  "api/MCM.Abstractions.Properties.html": {
    "href": "api/MCM.Abstractions.Properties.html",
    "title": "Namespace MCM.Abstractions.Properties | MCM Documentation",
    "summary": "Namespace MCM.Abstractions.Properties Classes NoneSettingsPropertyDiscoverer Interfaces IAttributeSettingsPropertyDiscoverer So it can be overriden by an external library IFluentSettingsPropertyDiscoverer ISettingsPropertyDiscoverer"
  },
  "api/MCM.Abstractions.ServiceCollectionExtensions.html": {
    "href": "api/MCM.Abstractions.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | MCM Documentation",
    "summary": "Class ServiceCollectionExtensions Namespace MCM.Abstractions Assembly MCMv5.dll public static class ServiceCollectionExtensions Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddExternalSettingsProvider<TImplementation>(IGenericServiceContainer) public static IGenericServiceContainer AddExternalSettingsProvider<TImplementation>(this IGenericServiceContainer services) where TImplementation : class, IExternalSettingsProvider Parameters services IGenericServiceContainer Returns IGenericServiceContainer Type Parameters TImplementation AddSettingsBuilderFactory<TImplementation>(IGenericServiceContainer) public static IGenericServiceContainer AddSettingsBuilderFactory<TImplementation>(this IGenericServiceContainer services) where TImplementation : class, ISettingsBuilderFactory Parameters services IGenericServiceContainer Returns IGenericServiceContainer Type Parameters TImplementation AddSettingsContainer<TImplementation>(IGenericServiceContainer) public static IGenericServiceContainer AddSettingsContainer<TImplementation>(this IGenericServiceContainer services) where TImplementation : class, ISettingsContainer Parameters services IGenericServiceContainer Returns IGenericServiceContainer Type Parameters TImplementation AddSettingsContainer<TService, TImplementation>(IGenericServiceContainer) public static IGenericServiceContainer AddSettingsContainer<TService, TImplementation>(this IGenericServiceContainer services) where TService : class, ISettingsContainer where TImplementation : class, TService Parameters services IGenericServiceContainer Returns IGenericServiceContainer Type Parameters TService TImplementation AddSettingsFormat<TImplementation>(IGenericServiceContainer) public static IGenericServiceContainer AddSettingsFormat<TImplementation>(this IGenericServiceContainer services) where TImplementation : class, ISettingsFormat Parameters services IGenericServiceContainer Returns IGenericServiceContainer Type Parameters TImplementation AddSettingsFormat<TService, TImplementation>(IGenericServiceContainer) public static IGenericServiceContainer AddSettingsFormat<TService, TImplementation>(this IGenericServiceContainer services) where TService : class, ISettingsFormat where TImplementation : class, TService Parameters services IGenericServiceContainer Returns IGenericServiceContainer Type Parameters TService TImplementation AddSettingsPropertyDiscoverer<TImplementation>(IGenericServiceContainer) public static IGenericServiceContainer AddSettingsPropertyDiscoverer<TImplementation>(this IGenericServiceContainer services) where TImplementation : class, ISettingsPropertyDiscoverer Parameters services IGenericServiceContainer Returns IGenericServiceContainer Type Parameters TImplementation AddSettingsPropertyDiscoverer<TService, TImplementation>(IGenericServiceContainer) public static IGenericServiceContainer AddSettingsPropertyDiscoverer<TService, TImplementation>(this IGenericServiceContainer services) where TService : class, ISettingsPropertyDiscoverer where TImplementation : class, TService Parameters services IGenericServiceContainer Returns IGenericServiceContainer Type Parameters TService TImplementation AddSettingsProvider<TImplementation>(IGenericServiceContainer) public static IGenericServiceContainer AddSettingsProvider<TImplementation>(this IGenericServiceContainer services) where TImplementation : BaseSettingsProvider Parameters services IGenericServiceContainer Returns IGenericServiceContainer Type Parameters TImplementation AddSettingsProvider<TService, TImplementation>(IGenericServiceContainer) public static IGenericServiceContainer AddSettingsProvider<TService, TImplementation>(this IGenericServiceContainer services) where TService : BaseSettingsProvider where TImplementation : class, TService Parameters services IGenericServiceContainer Returns IGenericServiceContainer Type Parameters TService TImplementation"
  },
  "api/MCM.Abstractions.SettingSnapshot.html": {
    "href": "api/MCM.Abstractions.SettingSnapshot.html",
    "title": "Class SettingSnapshot | MCM Documentation",
    "summary": "Class SettingSnapshot Namespace MCM.Abstractions Assembly MCMv5.dll public sealed record SettingSnapshot : IEquatable<SettingSnapshot> Inheritance object SettingSnapshot Implements IEquatable<SettingSnapshot> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SettingSnapshot(string, string) public SettingSnapshot(string Path, string JsonContent) Parameters Path string JsonContent string Properties JsonContent public string JsonContent { get; init; } Property Value string Path public string Path { get; init; } Property Value string"
  },
  "api/MCM.Abstractions.SettingType.html": {
    "href": "api/MCM.Abstractions.SettingType.html",
    "title": "Enum SettingType | MCM Documentation",
    "summary": "Enum SettingType Namespace MCM.Abstractions Assembly MCMv5.dll Defines the different types of settings that can be used. public enum SettingType Fields Bool = 0 A boolean setting with true/false values. Button = 5 A button that can trigger some action. Dropdown = 4 A dropdown list setting. Float = 2 A floating point number setting. Int = 1 An integer number setting. NONE = -1 A default value indicating no setting type. String = 3 A text string setting."
  },
  "api/MCM.Abstractions.SettingsDefinition.html": {
    "href": "api/MCM.Abstractions.SettingsDefinition.html",
    "title": "Class SettingsDefinition | MCM Documentation",
    "summary": "Class SettingsDefinition Namespace MCM.Abstractions Assembly MCMv5.dll public class SettingsDefinition Inheritance object SettingsDefinition Derived SettingsDefinitionWrapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SettingsDefinition(string) public SettingsDefinition(string id) Parameters id string SettingsDefinition(string, string, IEnumerable<SettingsPropertyDefinition>) public SettingsDefinition(string id, string displayName, IEnumerable<SettingsPropertyDefinition> settingsProperties) Parameters id string displayName string settingsProperties IEnumerable<SettingsPropertyDefinition> SettingsDefinition(string, string, List<SettingsPropertyGroupDefinition>) public SettingsDefinition(string id, string displayName, List<SettingsPropertyGroupDefinition> settingsPropertyGroups) Parameters id string displayName string settingsPropertyGroups List<SettingsPropertyGroupDefinition> Properties DisplayName public string DisplayName { get; } Property Value string SettingPropertyGroups public List<SettingsPropertyGroupDefinition> SettingPropertyGroups { get; } Property Value List<SettingsPropertyGroupDefinition> SettingsId public string SettingsId { get; } Property Value string"
  },
  "api/MCM.Abstractions.SettingsPresetWrapper-1.html": {
    "href": "api/MCM.Abstractions.SettingsPresetWrapper-1.html",
    "title": "Class SettingsPresetWrapper<TSetting> | MCM Documentation",
    "summary": "Class SettingsPresetWrapper<TSetting> Namespace MCM.Abstractions Assembly MCMv5.dll public abstract class SettingsPresetWrapper<TSetting> : ISettingsPreset, IWrapper where TSetting : BaseSettings, IWrapper Type Parameters TSetting Inheritance object SettingsPresetWrapper<TSetting> Implements ISettingsPreset IWrapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SettingsPresetWrapper(object?) protected SettingsPresetWrapper(object? @object) Parameters object object Properties Id public string Id { get; } Property Value string Name public string Name { get; } Property Value string Object public object? Object { get; } Property Value object SettingsId public string SettingsId { get; } Property Value string Methods Create(object?) protected abstract TSetting Create(object? @object) Parameters object object Returns TSetting LoadPreset() public BaseSettings LoadPreset() Returns BaseSettings SavePreset(BaseSettings) public bool SavePreset(BaseSettings settings) Parameters settings BaseSettings Returns bool"
  },
  "api/MCM.Abstractions.SettingsPropertyDefinition.html": {
    "href": "api/MCM.Abstractions.SettingsPropertyDefinition.html",
    "title": "Class SettingsPropertyDefinition | MCM Documentation",
    "summary": "Class SettingsPropertyDefinition Namespace MCM.Abstractions Assembly MCMv5.dll public sealed class SettingsPropertyDefinition : ISettingsPropertyDefinition, IPropertyDefinitionBool, IPropertyDefinitionDropdown, IPropertyDefinitionWithMinMax, IPropertyDefinitionWithEditableMinMax, IPropertyDefinitionWithFormat, IPropertyDefinitionWithCustomFormatter, IPropertyDefinitionWithId, IPropertyDefinitionText, IPropertyDefinitionGroupToggle, IPropertyGroupDefinition, IPropertyDefinitionButton, IPropertyDefinitionBase Inheritance object SettingsPropertyDefinition Implements ISettingsPropertyDefinition IPropertyDefinitionBool IPropertyDefinitionDropdown IPropertyDefinitionWithMinMax IPropertyDefinitionWithEditableMinMax IPropertyDefinitionWithFormat IPropertyDefinitionWithCustomFormatter IPropertyDefinitionWithId IPropertyDefinitionText IPropertyDefinitionGroupToggle IPropertyGroupDefinition IPropertyDefinitionButton IPropertyDefinitionBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Constructors SettingsPropertyDefinition(IPropertyDefinitionBase, IPropertyGroupDefinition, IRef, char) public SettingsPropertyDefinition(IPropertyDefinitionBase propertyDefinition, IPropertyGroupDefinition propertyGroupDefinition, IRef propertyReference, char subGroupDelimiter) Parameters propertyDefinition IPropertyDefinitionBase propertyGroupDefinition IPropertyGroupDefinition propertyReference IRef subGroupDelimiter char SettingsPropertyDefinition(IEnumerable<IPropertyDefinitionBase>, IPropertyGroupDefinition, IRef, char) public SettingsPropertyDefinition(IEnumerable<IPropertyDefinitionBase> propertyDefinitions, IPropertyGroupDefinition propertyGroupDefinition, IRef propertyReference, char subGroupDelimiter) Parameters propertyDefinitions IEnumerable<IPropertyDefinitionBase> propertyGroupDefinition IPropertyGroupDefinition propertyReference IRef subGroupDelimiter char Properties Content public string Content { get; } Property Value string CustomFormatter public Type? CustomFormatter { get; } Property Value Type DisplayName The display name of the setting in the settings menu. public string DisplayName { get; } Property Value string EditableMaxValue public decimal EditableMaxValue { get; } Property Value decimal EditableMinValue public decimal EditableMinValue { get; } Property Value decimal GroupName The name of the settings group. Includes SubGroup notation if present. public string GroupName { get; } Property Value string GroupOrder public int GroupOrder { get; } Property Value int HintText The hint text that is displayed at the bottom of the screen when the user hovers over the setting in the settings menu. public string HintText { get; } Property Value string Id public string Id { get; } Property Value string IsToggle public bool IsToggle { get; } Property Value bool MaxValue The maximum value the setting can be set to. Used by the slider control. public decimal MaxValue { get; } Property Value decimal MinValue The minimum value the setting can be set to. Used by the slider control. public decimal MinValue { get; } Property Value decimal Order Require restart of the game if the value is changed. public int Order { get; } Property Value int PropertyReference public IRef PropertyReference { get; } Property Value IRef RequireRestart Require restart of the game if the value is changed. public bool RequireRestart { get; } Property Value bool SelectedIndex public int SelectedIndex { get; } Property Value int SettingType public SettingType SettingType { get; } Property Value SettingType ValueFormat The format in which the slider's value will be displayed in. public string ValueFormat { get; } Property Value string Methods Clone(bool) public SettingsPropertyDefinition Clone(bool keepRefs = true) Parameters keepRefs bool Returns SettingsPropertyDefinition ToString() public override string ToString() Returns string"
  },
  "api/MCM.Abstractions.SettingsPropertyGroupDefinition.html": {
    "href": "api/MCM.Abstractions.SettingsPropertyGroupDefinition.html",
    "title": "Class SettingsPropertyGroupDefinition | MCM Documentation",
    "summary": "Class SettingsPropertyGroupDefinition Namespace MCM.Abstractions Assembly MCMv5.dll public class SettingsPropertyGroupDefinition Inheritance object SettingsPropertyGroupDefinition Derived SettingsPropertyGroupDefinitionWrapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SettingsPropertyGroupDefinition(string, int) public SettingsPropertyGroupDefinition(string groupName, int order = -1) Parameters groupName string order int SettingsPropertyGroupDefinition(string, string?, int) [Obsolete(\"Override not needed\", true)] public SettingsPropertyGroupDefinition(string groupName, string? _, int order = -1) Parameters groupName string _ string order int Fields DefaultGroup The default group used for settings that don't have a group explicitly set. public static readonly IPropertyGroupDefinition DefaultGroup Field Value IPropertyGroupDefinition DefaultGroupName The default group used for settings that don't have a group explicitly set. public static readonly string DefaultGroupName Field Value string _groupNameOverrideRaw protected readonly string _groupNameOverrideRaw Field Value string _groupNameRaw protected readonly string _groupNameRaw Field Value string settingProperties protected readonly List<ISettingsPropertyDefinition> settingProperties Field Value List<ISettingsPropertyDefinition> subGroups protected readonly List<SettingsPropertyGroupDefinition> subGroups Field Value List<SettingsPropertyGroupDefinition> Properties DisplayGroupNameRaw public string DisplayGroupNameRaw { get; } Property Value string GroupName public string GroupName { get; } Property Value string GroupNameRaw public string GroupNameRaw { get; } Property Value string Order public int Order { get; } Property Value int Parent public SettingsPropertyGroupDefinition? Parent { get; set; } Property Value SettingsPropertyGroupDefinition SettingProperties public IEnumerable<ISettingsPropertyDefinition> SettingProperties { get; } Property Value IEnumerable<ISettingsPropertyDefinition> SubGroupDelimiter protected char SubGroupDelimiter { get; set; } Property Value char SubGroups public IEnumerable<SettingsPropertyGroupDefinition> SubGroups { get; } Property Value IEnumerable<SettingsPropertyGroupDefinition> Methods Add(ISettingsPropertyDefinition) public void Add(ISettingsPropertyDefinition settingProp) Parameters settingProp ISettingsPropertyDefinition Add(SettingsPropertyGroupDefinition) public void Add(SettingsPropertyGroupDefinition settingProp) Parameters settingProp SettingsPropertyGroupDefinition Clone(bool) public SettingsPropertyGroupDefinition Clone(bool keepRefs = true) Parameters keepRefs bool Returns SettingsPropertyGroupDefinition GetGroup(string) public SettingsPropertyGroupDefinition? GetGroup(string groupName) Parameters groupName string Returns SettingsPropertyGroupDefinition GetGroupFor(string) [Obsolete(\"Use GetGroup\", true)] public SettingsPropertyGroupDefinition? GetGroupFor(string groupName) Parameters groupName string Returns SettingsPropertyGroupDefinition SetParent(SettingsPropertyGroupDefinition) public SettingsPropertyGroupDefinition SetParent(SettingsPropertyGroupDefinition parent) Parameters parent SettingsPropertyGroupDefinition Returns SettingsPropertyGroupDefinition SetSubGroupDelimiter(char) public SettingsPropertyGroupDefinition SetSubGroupDelimiter(char subGroupDelimiter) Parameters subGroupDelimiter char Returns SettingsPropertyGroupDefinition ToString() public override string ToString() Returns string"
  },
  "api/MCM.Abstractions.SettingsProviderWrapper.html": {
    "href": "api/MCM.Abstractions.SettingsProviderWrapper.html",
    "title": "Class SettingsProviderWrapper | MCM Documentation",
    "summary": "Class SettingsProviderWrapper Namespace MCM.Abstractions Assembly MCMv5.dll public abstract class SettingsProviderWrapper : BaseSettingsProvider, IWrapper Inheritance object BaseSettingsProvider SettingsProviderWrapper Implements IWrapper Inherited Members BaseSettingsProvider.Instance BaseSettingsProvider.GetUnavailableSettings() BaseSettingsProvider.SaveAvailableSnapshots() BaseSettingsProvider.LoadAvailableSnapshots(IEnumerable<SettingSnapshot>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SettingsProviderWrapper(object) protected SettingsProviderWrapper(object @object) Parameters object object Properties Object public object Object { get; } Property Value object SettingsDefinitions public override IEnumerable<SettingsDefinition> SettingsDefinitions { get; } Property Value IEnumerable<SettingsDefinition> Methods Create(object) protected abstract BaseSettings? Create(object obj) Parameters obj object Returns BaseSettings GetPresets(string) public override abstract IEnumerable<ISettingsPreset> GetPresets(string id) Parameters id string Returns IEnumerable<ISettingsPreset> GetSettings(string) public override BaseSettings? GetSettings(string id) Parameters id string Returns BaseSettings IsSettings(BaseSettings, out object?) protected abstract bool IsSettings(BaseSettings settings, out object? wrapped) Parameters settings BaseSettings wrapped object Returns bool OverrideSettings(BaseSettings) public override void OverrideSettings(BaseSettings settings) Parameters settings BaseSettings ResetSettings(BaseSettings) public override void ResetSettings(BaseSettings settings) Parameters settings BaseSettings SaveSettings(BaseSettings) public override void SaveSettings(BaseSettings settings) Parameters settings BaseSettings"
  },
  "api/MCM.Abstractions.SettingsUtils.html": {
    "href": "api/MCM.Abstractions.SettingsUtils.html",
    "title": "Class SettingsUtils | MCM Documentation",
    "summary": "Class SettingsUtils Namespace MCM.Abstractions Assembly MCMv5.dll public class SettingsUtils Inheritance object SettingsUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckIsValid(ISettingsPropertyDefinition, object?) public static void CheckIsValid(ISettingsPropertyDefinition prop, object? settings) Parameters prop ISettingsPropertyDefinition settings object Equals(BaseSettings, BaseSettings) public static bool Equals(BaseSettings settings1, BaseSettings settings2) Parameters settings1 BaseSettings settings2 BaseSettings Returns bool Equals(ISettingsPropertyDefinition?, ISettingsPropertyDefinition?) public static bool Equals(ISettingsPropertyDefinition? currentDefinition, ISettingsPropertyDefinition? newDefinition) Parameters currentDefinition ISettingsPropertyDefinition newDefinition ISettingsPropertyDefinition Returns bool GetAllSettingPropertyDefinitions(SettingsPropertyGroupDefinition) public static IEnumerable<ISettingsPropertyDefinition> GetAllSettingPropertyDefinitions(SettingsPropertyGroupDefinition settingPropertyGroup1) Parameters settingPropertyGroup1 SettingsPropertyGroupDefinition Returns IEnumerable<ISettingsPropertyDefinition> GetAllSettingPropertyGroupDefinitions(SettingsPropertyGroupDefinition) public static IEnumerable<SettingsPropertyGroupDefinition> GetAllSettingPropertyGroupDefinitions(SettingsPropertyGroupDefinition settingPropertyGroup) Parameters settingPropertyGroup SettingsPropertyGroupDefinition Returns IEnumerable<SettingsPropertyGroupDefinition> GetGroupFor(char, ISettingsPropertyDefinition, ICollection<SettingsPropertyGroupDefinition>) public static SettingsPropertyGroupDefinition GetGroupFor(char subGroupDelimiter, ISettingsPropertyDefinition sp, ICollection<SettingsPropertyGroupDefinition> rootCollection) Parameters subGroupDelimiter char sp ISettingsPropertyDefinition rootCollection ICollection<SettingsPropertyGroupDefinition> Returns SettingsPropertyGroupDefinition GetGroupForRecursive(char, string, SettingsPropertyGroupDefinition, ISettingsPropertyDefinition) public static SettingsPropertyGroupDefinition GetGroupForRecursive(char subGroupDelimiter, string groupName, SettingsPropertyGroupDefinition sgp, ISettingsPropertyDefinition sp) Parameters subGroupDelimiter char groupName string sgp SettingsPropertyGroupDefinition sp ISettingsPropertyDefinition Returns SettingsPropertyGroupDefinition GetPropertyDefinitionWrappers(IReadOnlyCollection<object>) public static IEnumerable<IPropertyDefinitionBase> GetPropertyDefinitionWrappers(IReadOnlyCollection<object> properties) Parameters properties IReadOnlyCollection<object> Returns IEnumerable<IPropertyDefinitionBase> GetPropertyDefinitionWrappers(object) public static IEnumerable<IPropertyDefinitionBase> GetPropertyDefinitionWrappers(object property) Parameters property object Returns IEnumerable<IPropertyDefinitionBase> GetSettingsPropertyGroups(char, IEnumerable<ISettingsPropertyDefinition>) public static List<SettingsPropertyGroupDefinition> GetSettingsPropertyGroups(char subGroupDelimiter, IEnumerable<ISettingsPropertyDefinition> settingsPropertyDefinitions) Parameters subGroupDelimiter char settingsPropertyDefinitions IEnumerable<ISettingsPropertyDefinition> Returns List<SettingsPropertyGroupDefinition> GetTopGroupName(char, string, out string) public static string GetTopGroupName(char subGroupDelimiter, string groupName, out string truncatedGroupName) Parameters subGroupDelimiter char groupName string truncatedGroupName string Returns string IsForCheckboxDropdown(object?) public static bool IsForCheckboxDropdown(object? obj) Parameters obj object Returns bool IsForCheckboxDropdown(Type) public static bool IsForCheckboxDropdown(Type type) Parameters type Type Returns bool IsForGenericDropdown(Type) public static bool IsForGenericDropdown(Type type) Parameters type Type Returns bool IsForTextDropdown(object?) public static bool IsForTextDropdown(object? obj) Parameters obj object Returns bool IsForTextDropdown(Type) public static bool IsForTextDropdown(Type type) Parameters type Type Returns bool OverrideSettings(BaseSettings, BaseSettings) public static void OverrideSettings(BaseSettings settings, BaseSettings overrideSettings) Parameters settings BaseSettings overrideSettings BaseSettings OverrideValues(BaseSettings, BaseSettings) public static void OverrideValues(BaseSettings current, BaseSettings @new) Parameters current BaseSettings new BaseSettings OverrideValues(ISettingsPropertyDefinition, ISettingsPropertyDefinition) public static void OverrideValues(ISettingsPropertyDefinition current, ISettingsPropertyDefinition @new) Parameters current ISettingsPropertyDefinition new ISettingsPropertyDefinition OverrideValues(SettingsPropertyGroupDefinition, SettingsPropertyGroupDefinition) public static void OverrideValues(SettingsPropertyGroupDefinition current, SettingsPropertyGroupDefinition @new) Parameters current SettingsPropertyGroupDefinition new SettingsPropertyGroupDefinition ResetSettings(BaseSettings) public static void ResetSettings(BaseSettings settings) Parameters settings BaseSettings"
  },
  "api/MCM.Abstractions.UnavailableSetting.html": {
    "href": "api/MCM.Abstractions.UnavailableSetting.html",
    "title": "Class UnavailableSetting | MCM Documentation",
    "summary": "Class UnavailableSetting Namespace MCM.Abstractions Assembly MCMv5.dll public sealed record UnavailableSetting : IEquatable<UnavailableSetting> Inheritance object UnavailableSetting Implements IEquatable<UnavailableSetting> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors UnavailableSetting(string, string, UnavailableSettingType) public UnavailableSetting(string Id, string DisplayName, UnavailableSettingType Type) Parameters Id string DisplayName string Type UnavailableSettingType Properties DisplayName public string DisplayName { get; init; } Property Value string Id public string Id { get; init; } Property Value string Type public UnavailableSettingType Type { get; init; } Property Value UnavailableSettingType"
  },
  "api/MCM.Abstractions.UnavailableSettingType.html": {
    "href": "api/MCM.Abstractions.UnavailableSettingType.html",
    "title": "Enum UnavailableSettingType | MCM Documentation",
    "summary": "Enum UnavailableSettingType Namespace MCM.Abstractions Assembly MCMv5.dll public enum UnavailableSettingType Fields PerCampaign = 0 PerSave = 1"
  },
  "api/MCM.Abstractions.Wrapper.AttributePropertyDefinitionGroupToggleWrapper.html": {
    "href": "api/MCM.Abstractions.Wrapper.AttributePropertyDefinitionGroupToggleWrapper.html",
    "title": "Class AttributePropertyDefinitionGroupToggleWrapper | MCM Documentation",
    "summary": "Class AttributePropertyDefinitionGroupToggleWrapper Namespace MCM.Abstractions.Wrapper Assembly MCMv5.dll public sealed class AttributePropertyDefinitionGroupToggleWrapper : BasePropertyDefinitionWrapper, IPropertyDefinitionGroupToggle, IPropertyDefinitionBase Inheritance object BasePropertyDefinitionWrapper AttributePropertyDefinitionGroupToggleWrapper Implements IPropertyDefinitionGroupToggle IPropertyDefinitionBase Inherited Members BasePropertyDefinitionWrapper.DisplayName BasePropertyDefinitionWrapper.Order BasePropertyDefinitionWrapper.RequireRestart BasePropertyDefinitionWrapper.HintText object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors AttributePropertyDefinitionGroupToggleWrapper(object) public AttributePropertyDefinitionGroupToggleWrapper(object @object) Parameters object object Properties IsToggle public bool IsToggle { get; } Property Value bool"
  },
  "api/MCM.Abstractions.Wrapper.BasePropertyDefinitionWrapper.html": {
    "href": "api/MCM.Abstractions.Wrapper.BasePropertyDefinitionWrapper.html",
    "title": "Class BasePropertyDefinitionWrapper | MCM Documentation",
    "summary": "Class BasePropertyDefinitionWrapper Namespace MCM.Abstractions.Wrapper Assembly MCMv5.dll public abstract class BasePropertyDefinitionWrapper : IPropertyDefinitionBase Inheritance object BasePropertyDefinitionWrapper Implements IPropertyDefinitionBase Derived AttributePropertyDefinitionGroupToggleWrapper PropertyDefinitionBoolWrapper PropertyDefinitionButtonWrapper PropertyDefinitionDropdownWrapper PropertyDefinitionGroupToggleWrapper PropertyDefinitionTextWrapper PropertyDefinitionWithActionFormatWrapper PropertyDefinitionWithCustomFormatterWrapper PropertyDefinitionWithEditableMinMaxWrapper PropertyDefinitionWithFormatWrapper PropertyDefinitionWithIdWrapper PropertyDefinitionWithMinMaxWrapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BasePropertyDefinitionWrapper(object) protected BasePropertyDefinitionWrapper(object @object) Parameters object object Properties DisplayName The display name of the setting in the settings menu. public string DisplayName { get; } Property Value string HintText The hint text that is displayed at the bottom of the screen when the user hovers over the setting in the settings menu. public string HintText { get; } Property Value string Order Require restart of the game if the value is changed. public int Order { get; } Property Value int RequireRestart Require restart of the game if the value is changed. public bool RequireRestart { get; } Property Value bool"
  },
  "api/MCM.Abstractions.Wrapper.PropertyDefinitionBoolWrapper.html": {
    "href": "api/MCM.Abstractions.Wrapper.PropertyDefinitionBoolWrapper.html",
    "title": "Class PropertyDefinitionBoolWrapper | MCM Documentation",
    "summary": "Class PropertyDefinitionBoolWrapper Namespace MCM.Abstractions.Wrapper Assembly MCMv5.dll public sealed class PropertyDefinitionBoolWrapper : BasePropertyDefinitionWrapper, IPropertyDefinitionBool, IPropertyDefinitionBase Inheritance object BasePropertyDefinitionWrapper PropertyDefinitionBoolWrapper Implements IPropertyDefinitionBool IPropertyDefinitionBase Inherited Members BasePropertyDefinitionWrapper.DisplayName BasePropertyDefinitionWrapper.Order BasePropertyDefinitionWrapper.RequireRestart BasePropertyDefinitionWrapper.HintText object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors PropertyDefinitionBoolWrapper(object) public PropertyDefinitionBoolWrapper(object @object) Parameters object object"
  },
  "api/MCM.Abstractions.Wrapper.PropertyDefinitionButtonWrapper.html": {
    "href": "api/MCM.Abstractions.Wrapper.PropertyDefinitionButtonWrapper.html",
    "title": "Class PropertyDefinitionButtonWrapper | MCM Documentation",
    "summary": "Class PropertyDefinitionButtonWrapper Namespace MCM.Abstractions.Wrapper Assembly MCMv5.dll public sealed class PropertyDefinitionButtonWrapper : BasePropertyDefinitionWrapper, IPropertyDefinitionButton, IPropertyDefinitionBase Inheritance object BasePropertyDefinitionWrapper PropertyDefinitionButtonWrapper Implements IPropertyDefinitionButton IPropertyDefinitionBase Inherited Members BasePropertyDefinitionWrapper.DisplayName BasePropertyDefinitionWrapper.Order BasePropertyDefinitionWrapper.RequireRestart BasePropertyDefinitionWrapper.HintText object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors PropertyDefinitionButtonWrapper(object) public PropertyDefinitionButtonWrapper(object @object) Parameters object object Properties Content public string Content { get; } Property Value string"
  },
  "api/MCM.Abstractions.Wrapper.PropertyDefinitionDropdownWrapper.html": {
    "href": "api/MCM.Abstractions.Wrapper.PropertyDefinitionDropdownWrapper.html",
    "title": "Class PropertyDefinitionDropdownWrapper | MCM Documentation",
    "summary": "Class PropertyDefinitionDropdownWrapper Namespace MCM.Abstractions.Wrapper Assembly MCMv5.dll public sealed class PropertyDefinitionDropdownWrapper : BasePropertyDefinitionWrapper, IPropertyDefinitionDropdown, IPropertyDefinitionBase Inheritance object BasePropertyDefinitionWrapper PropertyDefinitionDropdownWrapper Implements IPropertyDefinitionDropdown IPropertyDefinitionBase Inherited Members BasePropertyDefinitionWrapper.DisplayName BasePropertyDefinitionWrapper.Order BasePropertyDefinitionWrapper.RequireRestart BasePropertyDefinitionWrapper.HintText object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors PropertyDefinitionDropdownWrapper(object) public PropertyDefinitionDropdownWrapper(object @object) Parameters object object Properties SelectedIndex public int SelectedIndex { get; } Property Value int"
  },
  "api/MCM.Abstractions.Wrapper.PropertyDefinitionGroupToggleWrapper.html": {
    "href": "api/MCM.Abstractions.Wrapper.PropertyDefinitionGroupToggleWrapper.html",
    "title": "Class PropertyDefinitionGroupToggleWrapper | MCM Documentation",
    "summary": "Class PropertyDefinitionGroupToggleWrapper Namespace MCM.Abstractions.Wrapper Assembly MCMv5.dll public sealed class PropertyDefinitionGroupToggleWrapper : BasePropertyDefinitionWrapper, IPropertyDefinitionGroupToggle, IPropertyDefinitionBase Inheritance object BasePropertyDefinitionWrapper PropertyDefinitionGroupToggleWrapper Implements IPropertyDefinitionGroupToggle IPropertyDefinitionBase Inherited Members BasePropertyDefinitionWrapper.DisplayName BasePropertyDefinitionWrapper.Order BasePropertyDefinitionWrapper.RequireRestart BasePropertyDefinitionWrapper.HintText object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors PropertyDefinitionGroupToggleWrapper(object) public PropertyDefinitionGroupToggleWrapper(object @object) Parameters object object Properties IsToggle public bool IsToggle { get; } Property Value bool"
  },
  "api/MCM.Abstractions.Wrapper.PropertyDefinitionTextWrapper.html": {
    "href": "api/MCM.Abstractions.Wrapper.PropertyDefinitionTextWrapper.html",
    "title": "Class PropertyDefinitionTextWrapper | MCM Documentation",
    "summary": "Class PropertyDefinitionTextWrapper Namespace MCM.Abstractions.Wrapper Assembly MCMv5.dll public sealed class PropertyDefinitionTextWrapper : BasePropertyDefinitionWrapper, IPropertyDefinitionText, IPropertyDefinitionBase Inheritance object BasePropertyDefinitionWrapper PropertyDefinitionTextWrapper Implements IPropertyDefinitionText IPropertyDefinitionBase Inherited Members BasePropertyDefinitionWrapper.DisplayName BasePropertyDefinitionWrapper.Order BasePropertyDefinitionWrapper.RequireRestart BasePropertyDefinitionWrapper.HintText object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors PropertyDefinitionTextWrapper(object) public PropertyDefinitionTextWrapper(object @object) Parameters object object"
  },
  "api/MCM.Abstractions.Wrapper.PropertyDefinitionWithActionFormatWrapper.html": {
    "href": "api/MCM.Abstractions.Wrapper.PropertyDefinitionWithActionFormatWrapper.html",
    "title": "Class PropertyDefinitionWithActionFormatWrapper | MCM Documentation",
    "summary": "Class PropertyDefinitionWithActionFormatWrapper Namespace MCM.Abstractions.Wrapper Assembly MCMv5.dll public sealed class PropertyDefinitionWithActionFormatWrapper : BasePropertyDefinitionWrapper, IPropertyDefinitionBase, IPropertyDefinitionWithActionFormat Inheritance object BasePropertyDefinitionWrapper PropertyDefinitionWithActionFormatWrapper Implements IPropertyDefinitionBase IPropertyDefinitionWithActionFormat Inherited Members BasePropertyDefinitionWrapper.DisplayName BasePropertyDefinitionWrapper.Order BasePropertyDefinitionWrapper.RequireRestart BasePropertyDefinitionWrapper.HintText object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors PropertyDefinitionWithActionFormatWrapper(object) public PropertyDefinitionWithActionFormatWrapper(object @object) Parameters object object Properties ValueFormatFunc public Func<object, string> ValueFormatFunc { get; } Property Value Func<object, string>"
  },
  "api/MCM.Abstractions.Wrapper.PropertyDefinitionWithCustomFormatterWrapper.html": {
    "href": "api/MCM.Abstractions.Wrapper.PropertyDefinitionWithCustomFormatterWrapper.html",
    "title": "Class PropertyDefinitionWithCustomFormatterWrapper | MCM Documentation",
    "summary": "Class PropertyDefinitionWithCustomFormatterWrapper Namespace MCM.Abstractions.Wrapper Assembly MCMv5.dll public sealed class PropertyDefinitionWithCustomFormatterWrapper : BasePropertyDefinitionWrapper, IPropertyDefinitionBase, IPropertyDefinitionWithCustomFormatter Inheritance object BasePropertyDefinitionWrapper PropertyDefinitionWithCustomFormatterWrapper Implements IPropertyDefinitionBase IPropertyDefinitionWithCustomFormatter Inherited Members BasePropertyDefinitionWrapper.DisplayName BasePropertyDefinitionWrapper.Order BasePropertyDefinitionWrapper.RequireRestart BasePropertyDefinitionWrapper.HintText object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors PropertyDefinitionWithCustomFormatterWrapper(object) public PropertyDefinitionWithCustomFormatterWrapper(object @object) Parameters object object Properties CustomFormatter public Type? CustomFormatter { get; } Property Value Type"
  },
  "api/MCM.Abstractions.Wrapper.PropertyDefinitionWithEditableMinMaxWrapper.html": {
    "href": "api/MCM.Abstractions.Wrapper.PropertyDefinitionWithEditableMinMaxWrapper.html",
    "title": "Class PropertyDefinitionWithEditableMinMaxWrapper | MCM Documentation",
    "summary": "Class PropertyDefinitionWithEditableMinMaxWrapper Namespace MCM.Abstractions.Wrapper Assembly MCMv5.dll public sealed class PropertyDefinitionWithEditableMinMaxWrapper : BasePropertyDefinitionWrapper, IPropertyDefinitionBase, IPropertyDefinitionWithEditableMinMax Inheritance object BasePropertyDefinitionWrapper PropertyDefinitionWithEditableMinMaxWrapper Implements IPropertyDefinitionBase IPropertyDefinitionWithEditableMinMax Inherited Members BasePropertyDefinitionWrapper.DisplayName BasePropertyDefinitionWrapper.Order BasePropertyDefinitionWrapper.RequireRestart BasePropertyDefinitionWrapper.HintText object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors PropertyDefinitionWithEditableMinMaxWrapper(object) public PropertyDefinitionWithEditableMinMaxWrapper(object @object) Parameters object object Properties EditableMaxValue public decimal EditableMaxValue { get; } Property Value decimal EditableMinValue public decimal EditableMinValue { get; } Property Value decimal"
  },
  "api/MCM.Abstractions.Wrapper.PropertyDefinitionWithFormatWrapper.html": {
    "href": "api/MCM.Abstractions.Wrapper.PropertyDefinitionWithFormatWrapper.html",
    "title": "Class PropertyDefinitionWithFormatWrapper | MCM Documentation",
    "summary": "Class PropertyDefinitionWithFormatWrapper Namespace MCM.Abstractions.Wrapper Assembly MCMv5.dll public sealed class PropertyDefinitionWithFormatWrapper : BasePropertyDefinitionWrapper, IPropertyDefinitionBase, IPropertyDefinitionWithFormat Inheritance object BasePropertyDefinitionWrapper PropertyDefinitionWithFormatWrapper Implements IPropertyDefinitionBase IPropertyDefinitionWithFormat Inherited Members BasePropertyDefinitionWrapper.DisplayName BasePropertyDefinitionWrapper.Order BasePropertyDefinitionWrapper.RequireRestart BasePropertyDefinitionWrapper.HintText object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors PropertyDefinitionWithFormatWrapper(object) public PropertyDefinitionWithFormatWrapper(object @object) Parameters object object Properties ValueFormat The format in which the slider's value will be displayed in. public string ValueFormat { get; } Property Value string"
  },
  "api/MCM.Abstractions.Wrapper.PropertyDefinitionWithIdWrapper.html": {
    "href": "api/MCM.Abstractions.Wrapper.PropertyDefinitionWithIdWrapper.html",
    "title": "Class PropertyDefinitionWithIdWrapper | MCM Documentation",
    "summary": "Class PropertyDefinitionWithIdWrapper Namespace MCM.Abstractions.Wrapper Assembly MCMv5.dll public sealed class PropertyDefinitionWithIdWrapper : BasePropertyDefinitionWrapper, IPropertyDefinitionBase, IPropertyDefinitionWithId Inheritance object BasePropertyDefinitionWrapper PropertyDefinitionWithIdWrapper Implements IPropertyDefinitionBase IPropertyDefinitionWithId Inherited Members BasePropertyDefinitionWrapper.DisplayName BasePropertyDefinitionWrapper.Order BasePropertyDefinitionWrapper.RequireRestart BasePropertyDefinitionWrapper.HintText object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors PropertyDefinitionWithIdWrapper(object) public PropertyDefinitionWithIdWrapper(object @object) Parameters object object Properties Id public string Id { get; } Property Value string"
  },
  "api/MCM.Abstractions.Wrapper.PropertyDefinitionWithMinMaxWrapper.html": {
    "href": "api/MCM.Abstractions.Wrapper.PropertyDefinitionWithMinMaxWrapper.html",
    "title": "Class PropertyDefinitionWithMinMaxWrapper | MCM Documentation",
    "summary": "Class PropertyDefinitionWithMinMaxWrapper Namespace MCM.Abstractions.Wrapper Assembly MCMv5.dll public sealed class PropertyDefinitionWithMinMaxWrapper : BasePropertyDefinitionWrapper, IPropertyDefinitionBase, IPropertyDefinitionWithMinMax Inheritance object BasePropertyDefinitionWrapper PropertyDefinitionWithMinMaxWrapper Implements IPropertyDefinitionBase IPropertyDefinitionWithMinMax Inherited Members BasePropertyDefinitionWrapper.DisplayName BasePropertyDefinitionWrapper.Order BasePropertyDefinitionWrapper.RequireRestart BasePropertyDefinitionWrapper.HintText object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors PropertyDefinitionWithMinMaxWrapper(object) public PropertyDefinitionWithMinMaxWrapper(object @object) Parameters object object Properties MaxValue The maximum value the setting can be set to. Used by the slider control. public decimal MaxValue { get; } Property Value decimal MinValue The minimum value the setting can be set to. Used by the slider control. public decimal MinValue { get; } Property Value decimal"
  },
  "api/MCM.Abstractions.Wrapper.PropertyGroupDefinitionWrapper.html": {
    "href": "api/MCM.Abstractions.Wrapper.PropertyGroupDefinitionWrapper.html",
    "title": "Class PropertyGroupDefinitionWrapper | MCM Documentation",
    "summary": "Class PropertyGroupDefinitionWrapper Namespace MCM.Abstractions.Wrapper Assembly MCMv5.dll public sealed class PropertyGroupDefinitionWrapper : IPropertyGroupDefinition Inheritance object PropertyGroupDefinitionWrapper Implements IPropertyGroupDefinition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors PropertyGroupDefinitionWrapper(object) public PropertyGroupDefinitionWrapper(object @object) Parameters object object Properties GroupName The name of the settings group. Includes SubGroup notation if present. public string GroupName { get; } Property Value string GroupOrder public int GroupOrder { get; } Property Value int"
  },
  "api/MCM.Abstractions.Wrapper.SettingsDefinitionWrapper.html": {
    "href": "api/MCM.Abstractions.Wrapper.SettingsDefinitionWrapper.html",
    "title": "Class SettingsDefinitionWrapper | MCM Documentation",
    "summary": "Class SettingsDefinitionWrapper Namespace MCM.Abstractions.Wrapper Assembly MCMv5.dll public sealed class SettingsDefinitionWrapper : SettingsDefinition Inheritance object SettingsDefinition SettingsDefinitionWrapper Inherited Members SettingsDefinition.SettingsId SettingsDefinition.DisplayName SettingsDefinition.SettingPropertyGroups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SettingsDefinitionWrapper(object) public SettingsDefinitionWrapper(object @object) Parameters object object"
  },
  "api/MCM.Abstractions.Wrapper.SettingsPropertyDefinitionWrapper.html": {
    "href": "api/MCM.Abstractions.Wrapper.SettingsPropertyDefinitionWrapper.html",
    "title": "Class SettingsPropertyDefinitionWrapper | MCM Documentation",
    "summary": "Class SettingsPropertyDefinitionWrapper Namespace MCM.Abstractions.Wrapper Assembly MCMv5.dll public sealed class SettingsPropertyDefinitionWrapper : ISettingsPropertyDefinition, IPropertyDefinitionBool, IPropertyDefinitionDropdown, IPropertyDefinitionWithMinMax, IPropertyDefinitionWithEditableMinMax, IPropertyDefinitionWithFormat, IPropertyDefinitionWithCustomFormatter, IPropertyDefinitionWithId, IPropertyDefinitionText, IPropertyDefinitionGroupToggle, IPropertyGroupDefinition, IPropertyDefinitionButton, IPropertyDefinitionBase Inheritance object SettingsPropertyDefinitionWrapper Implements ISettingsPropertyDefinition IPropertyDefinitionBool IPropertyDefinitionDropdown IPropertyDefinitionWithMinMax IPropertyDefinitionWithEditableMinMax IPropertyDefinitionWithFormat IPropertyDefinitionWithCustomFormatter IPropertyDefinitionWithId IPropertyDefinitionText IPropertyDefinitionGroupToggle IPropertyGroupDefinition IPropertyDefinitionButton IPropertyDefinitionBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SettingsPropertyDefinitionWrapper(object) public SettingsPropertyDefinitionWrapper(object @object) Parameters object object Properties Content public string Content { get; } Property Value string CustomFormatter public Type? CustomFormatter { get; } Property Value Type DisplayName The display name of the setting in the settings menu. public string DisplayName { get; } Property Value string EditableMaxValue public decimal EditableMaxValue { get; } Property Value decimal EditableMinValue public decimal EditableMinValue { get; } Property Value decimal GroupName The name of the settings group. Includes SubGroup notation if present. public string GroupName { get; } Property Value string GroupOrder public int GroupOrder { get; } Property Value int HintText The hint text that is displayed at the bottom of the screen when the user hovers over the setting in the settings menu. public string HintText { get; } Property Value string Id public string Id { get; } Property Value string IsToggle public bool IsToggle { get; } Property Value bool MaxValue The maximum value the setting can be set to. Used by the slider control. public decimal MaxValue { get; } Property Value decimal MinValue The minimum value the setting can be set to. Used by the slider control. public decimal MinValue { get; } Property Value decimal Order Require restart of the game if the value is changed. public int Order { get; } Property Value int PropertyReference public IRef PropertyReference { get; } Property Value IRef RequireRestart Require restart of the game if the value is changed. public bool RequireRestart { get; } Property Value bool SelectedIndex public int SelectedIndex { get; } Property Value int SettingType public SettingType SettingType { get; } Property Value SettingType ValueFormat The format in which the slider's value will be displayed in. public string ValueFormat { get; } Property Value string Methods Clone(bool) public SettingsPropertyDefinition Clone(bool keepRefs = true) Parameters keepRefs bool Returns SettingsPropertyDefinition"
  },
  "api/MCM.Abstractions.Wrapper.SettingsPropertyGroupDefinitionWrapper.html": {
    "href": "api/MCM.Abstractions.Wrapper.SettingsPropertyGroupDefinitionWrapper.html",
    "title": "Class SettingsPropertyGroupDefinitionWrapper | MCM Documentation",
    "summary": "Class SettingsPropertyGroupDefinitionWrapper Namespace MCM.Abstractions.Wrapper Assembly MCMv5.dll public sealed class SettingsPropertyGroupDefinitionWrapper : SettingsPropertyGroupDefinition Inheritance object SettingsPropertyGroupDefinition SettingsPropertyGroupDefinitionWrapper Inherited Members SettingsPropertyGroupDefinition.DefaultGroupName SettingsPropertyGroupDefinition.DefaultGroup SettingsPropertyGroupDefinition.Parent SettingsPropertyGroupDefinition.GroupNameRaw SettingsPropertyGroupDefinition.GroupName SettingsPropertyGroupDefinition.DisplayGroupNameRaw SettingsPropertyGroupDefinition.Order SettingsPropertyGroupDefinition.SubGroups SettingsPropertyGroupDefinition.SettingProperties SettingsPropertyGroupDefinition.SetParent(SettingsPropertyGroupDefinition) SettingsPropertyGroupDefinition.SetSubGroupDelimiter(char) SettingsPropertyGroupDefinition.Add(ISettingsPropertyDefinition) SettingsPropertyGroupDefinition.Add(SettingsPropertyGroupDefinition) SettingsPropertyGroupDefinition.GetGroup(string) SettingsPropertyGroupDefinition.GetGroupFor(string) SettingsPropertyGroupDefinition.ToString() SettingsPropertyGroupDefinition.Clone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Constructors SettingsPropertyGroupDefinitionWrapper(object) public SettingsPropertyGroupDefinitionWrapper(object @object) Parameters object object"
  },
  "api/MCM.Abstractions.Wrapper.html": {
    "href": "api/MCM.Abstractions.Wrapper.html",
    "title": "Namespace MCM.Abstractions.Wrapper | MCM Documentation",
    "summary": "Namespace MCM.Abstractions.Wrapper Classes AttributePropertyDefinitionGroupToggleWrapper BasePropertyDefinitionWrapper PropertyDefinitionBoolWrapper PropertyDefinitionButtonWrapper PropertyDefinitionDropdownWrapper PropertyDefinitionGroupToggleWrapper PropertyDefinitionTextWrapper PropertyDefinitionWithActionFormatWrapper PropertyDefinitionWithCustomFormatterWrapper PropertyDefinitionWithEditableMinMaxWrapper PropertyDefinitionWithFormatWrapper PropertyDefinitionWithIdWrapper PropertyDefinitionWithMinMaxWrapper PropertyGroupDefinitionWrapper SettingsDefinitionWrapper SettingsPropertyDefinitionWrapper SettingsPropertyGroupDefinitionWrapper"
  },
  "api/MCM.Abstractions.Xml.PropertyBaseXmlModel.html": {
    "href": "api/MCM.Abstractions.Xml.PropertyBaseXmlModel.html",
    "title": "Class PropertyBaseXmlModel | MCM Documentation",
    "summary": "Class PropertyBaseXmlModel Namespace MCM.Abstractions.Xml Assembly MCMv5.dll [Serializable] public abstract class PropertyBaseXmlModel : IPropertyDefinitionBase, IPropertyDefinitionWithId Inheritance object PropertyBaseXmlModel Implements IPropertyDefinitionBase IPropertyDefinitionWithId Derived PropertyBoolXmlModel PropertyDropdownXmlModel PropertyFloatingIntegerXmlModel PropertyIntegerXmlModel PropertyTextXmlModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayName The display name of the setting in the settings menu. public string DisplayName { get; set; } Property Value string HintText The hint text that is displayed at the bottom of the screen when the user hovers over the setting in the settings menu. public string HintText { get; set; } Property Value string Id public string Id { get; set; } Property Value string Order Require restart of the game if the value is changed. public int Order { get; set; } Property Value int RequireRestart Require restart of the game if the value is changed. public bool RequireRestart { get; set; } Property Value bool"
  },
  "api/MCM.Abstractions.Xml.PropertyBoolXmlModel.html": {
    "href": "api/MCM.Abstractions.Xml.PropertyBoolXmlModel.html",
    "title": "Class PropertyBoolXmlModel | MCM Documentation",
    "summary": "Class PropertyBoolXmlModel Namespace MCM.Abstractions.Xml Assembly MCMv5.dll [Serializable] public class PropertyBoolXmlModel : PropertyBaseXmlModel, IPropertyDefinitionWithId, IPropertyDefinitionBool, IPropertyDefinitionGroupToggle, IPropertyDefinitionBase Inheritance object PropertyBaseXmlModel PropertyBoolXmlModel Implements IPropertyDefinitionWithId IPropertyDefinitionBool IPropertyDefinitionGroupToggle IPropertyDefinitionBase Inherited Members PropertyBaseXmlModel.Id PropertyBaseXmlModel.DisplayName PropertyBaseXmlModel.Order PropertyBaseXmlModel.HintText PropertyBaseXmlModel.RequireRestart object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsToggle public bool IsToggle { get; set; } Property Value bool Value public bool Value { get; set; } Property Value bool"
  },
  "api/MCM.Abstractions.Xml.PropertyDropdownXmlModel.html": {
    "href": "api/MCM.Abstractions.Xml.PropertyDropdownXmlModel.html",
    "title": "Class PropertyDropdownXmlModel | MCM Documentation",
    "summary": "Class PropertyDropdownXmlModel Namespace MCM.Abstractions.Xml Assembly MCMv5.dll [Serializable] public class PropertyDropdownXmlModel : PropertyBaseXmlModel, IPropertyDefinitionWithId, IPropertyDefinitionDropdown, IPropertyDefinitionBase Inheritance object PropertyBaseXmlModel PropertyDropdownXmlModel Implements IPropertyDefinitionWithId IPropertyDefinitionDropdown IPropertyDefinitionBase Inherited Members PropertyBaseXmlModel.Id PropertyBaseXmlModel.DisplayName PropertyBaseXmlModel.Order PropertyBaseXmlModel.HintText PropertyBaseXmlModel.RequireRestart object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties SelectedIndex public int SelectedIndex { get; set; } Property Value int Values public string[] Values { get; set; } Property Value string[]"
  },
  "api/MCM.Abstractions.Xml.PropertyFloatingIntegerXmlModel.html": {
    "href": "api/MCM.Abstractions.Xml.PropertyFloatingIntegerXmlModel.html",
    "title": "Class PropertyFloatingIntegerXmlModel | MCM Documentation",
    "summary": "Class PropertyFloatingIntegerXmlModel Namespace MCM.Abstractions.Xml Assembly MCMv5.dll [Serializable] public class PropertyFloatingIntegerXmlModel : PropertyBaseXmlModel, IPropertyDefinitionBase, IPropertyDefinitionWithId, IPropertyDefinitionWithMinMax Inheritance object PropertyBaseXmlModel PropertyFloatingIntegerXmlModel Implements IPropertyDefinitionBase IPropertyDefinitionWithId IPropertyDefinitionWithMinMax Inherited Members PropertyBaseXmlModel.Id PropertyBaseXmlModel.DisplayName PropertyBaseXmlModel.Order PropertyBaseXmlModel.HintText PropertyBaseXmlModel.RequireRestart object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties MaxValue The maximum value the setting can be set to. Used by the slider control. public decimal MaxValue { get; set; } Property Value decimal MinValue The minimum value the setting can be set to. Used by the slider control. public decimal MinValue { get; set; } Property Value decimal Value public decimal Value { get; set; } Property Value decimal"
  },
  "api/MCM.Abstractions.Xml.PropertyGroupXmlModel.html": {
    "href": "api/MCM.Abstractions.Xml.PropertyGroupXmlModel.html",
    "title": "Class PropertyGroupXmlModel | MCM Documentation",
    "summary": "Class PropertyGroupXmlModel Namespace MCM.Abstractions.Xml Assembly MCMv5.dll [Serializable] public class PropertyGroupXmlModel : IPropertyGroupDefinition Inheritance object PropertyGroupXmlModel Implements IPropertyGroupDefinition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties GroupName The name of the settings group. Includes SubGroup notation if present. public string GroupName { get; set; } Property Value string GroupOrder public int GroupOrder { get; set; } Property Value int Properties public List<PropertyBaseXmlModel> Properties { get; set; } Property Value List<PropertyBaseXmlModel>"
  },
  "api/MCM.Abstractions.Xml.PropertyIntegerXmlModel.html": {
    "href": "api/MCM.Abstractions.Xml.PropertyIntegerXmlModel.html",
    "title": "Class PropertyIntegerXmlModel | MCM Documentation",
    "summary": "Class PropertyIntegerXmlModel Namespace MCM.Abstractions.Xml Assembly MCMv5.dll [Serializable] public class PropertyIntegerXmlModel : PropertyBaseXmlModel, IPropertyDefinitionBase, IPropertyDefinitionWithId, IPropertyDefinitionWithMinMax Inheritance object PropertyBaseXmlModel PropertyIntegerXmlModel Implements IPropertyDefinitionBase IPropertyDefinitionWithId IPropertyDefinitionWithMinMax Inherited Members PropertyBaseXmlModel.Id PropertyBaseXmlModel.DisplayName PropertyBaseXmlModel.Order PropertyBaseXmlModel.HintText PropertyBaseXmlModel.RequireRestart object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties MaxValue The maximum value the setting can be set to. Used by the slider control. public decimal MaxValue { get; set; } Property Value decimal MinValue The minimum value the setting can be set to. Used by the slider control. public decimal MinValue { get; set; } Property Value decimal Value public decimal Value { get; set; } Property Value decimal"
  },
  "api/MCM.Abstractions.Xml.PropertyTextXmlModel.html": {
    "href": "api/MCM.Abstractions.Xml.PropertyTextXmlModel.html",
    "title": "Class PropertyTextXmlModel | MCM Documentation",
    "summary": "Class PropertyTextXmlModel Namespace MCM.Abstractions.Xml Assembly MCMv5.dll [Serializable] public class PropertyTextXmlModel : PropertyBaseXmlModel, IPropertyDefinitionWithId, IPropertyDefinitionText, IPropertyDefinitionBase Inheritance object PropertyBaseXmlModel PropertyTextXmlModel Implements IPropertyDefinitionWithId IPropertyDefinitionText IPropertyDefinitionBase Inherited Members PropertyBaseXmlModel.Id PropertyBaseXmlModel.DisplayName PropertyBaseXmlModel.Order PropertyBaseXmlModel.HintText PropertyBaseXmlModel.RequireRestart object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Value public string Value { get; set; } Property Value string"
  },
  "api/MCM.Abstractions.Xml.SettingsXmlModel.html": {
    "href": "api/MCM.Abstractions.Xml.SettingsXmlModel.html",
    "title": "Class SettingsXmlModel | MCM Documentation",
    "summary": "Class SettingsXmlModel Namespace MCM.Abstractions.Xml Assembly MCMv5.dll [Serializable] public class SettingsXmlModel Inheritance object SettingsXmlModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayName public string DisplayName { get; set; } Property Value string FolderName public string FolderName { get; } Property Value string FormatType public string FormatType { get; set; } Property Value string Groups public List<PropertyGroupXmlModel> Groups { get; set; } Property Value List<PropertyGroupXmlModel> Id public string Id { get; set; } Property Value string Properties public List<PropertyBaseXmlModel> Properties { get; set; } Property Value List<PropertyBaseXmlModel> SubFolder public string SubFolder { get; } Property Value string SubGroupDelimiter public string SubGroupDelimiter { get; set; } Property Value string UIVersion public int UIVersion { get; set; } Property Value int"
  },
  "api/MCM.Abstractions.Xml.html": {
    "href": "api/MCM.Abstractions.Xml.html",
    "title": "Namespace MCM.Abstractions.Xml | MCM Documentation",
    "summary": "Namespace MCM.Abstractions.Xml Classes PropertyBaseXmlModel PropertyBoolXmlModel PropertyDropdownXmlModel PropertyFloatingIntegerXmlModel PropertyGroupXmlModel PropertyIntegerXmlModel PropertyTextXmlModel SettingsXmlModel"
  },
  "api/MCM.Abstractions.html": {
    "href": "api/MCM.Abstractions.html",
    "title": "Namespace MCM.Abstractions | MCM Documentation",
    "summary": "Namespace MCM.Abstractions Classes BaseSettingsExtensions BaseSettingsProvider The interface that is responsible for providing and manipulating settings for the end user - modder MemorySettingsFormat MemorySettingsPreset A readonly non serializable preset NoneSettingsFormat ServiceCollectionExtensions SettingSnapshot SettingsDefinition SettingsPresetWrapper<TSetting> SettingsPropertyDefinition SettingsPropertyGroupDefinition SettingsProviderWrapper SettingsUtils UnavailableSetting Interfaces IExternalSettingsProvider Used to add foreign Options API's that MCM will be able to use. Most likely will be used to ease backwards compatibility ports of older MCM API's so we'll be able to reuse more code. This is a higher level alternative to using ISettingsContainer. IExternalSettingsProviderCanInvalidateCache Used to add foreign Options API's that MCM will be able to use. Most likely will be used to ease backwards compatibility ports of older MCM API's so we'll be able to reuse more code. This is a higher level alternative to using ISettingsContainer. IPropertyDefinitionBase IPropertyDefinitionBool IPropertyDefinitionButton IPropertyDefinitionDropdown IPropertyDefinitionGroupToggle IPropertyDefinitionText IPropertyDefinitionWithActionFormat IPropertyDefinitionWithCustomFormatter IPropertyDefinitionWithEditableMinMax IPropertyDefinitionWithFormat IPropertyDefinitionWithId IPropertyDefinitionWithMinMax IPropertyGroupDefinition ISettingsContainer ISettingsContainerCanInvalidateCache ISettingsContainerCanOverride Interface that declares that the ISettingsContainer can override its settings ISettingsContainerCanReset Interface that declares that the ISettingsContainer can reset its settings ISettingsContainerHasSettingsDefinitions Interface that declares that the ISettingsContainer provides SettingsDefinition ISettingsContainerHasSettingsPack ISettingsContainerHasUnavailable Interface that lists unavailable settings in the global menu ISettingsContainerPresets ISettingsFormat ISettingsPreset ISettingsPropertyDefinition Enums ExternalSettingsProviderInvalidateCacheType SettingType Defines the different types of settings that can be used. UnavailableSettingType"
  },
  "api/MCM.Common.Constants.html": {
    "href": "api/MCM.Common.Constants.html",
    "title": "Class Constants | MCM Documentation",
    "summary": "Class Constants Namespace MCM.Common Assembly MCMv5.dll public static class Constants Inheritance object Constants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Tolerance public const float Tolerance = 1E-06 Field Value float"
  },
  "api/MCM.Common.Dropdown-1.html": {
    "href": "api/MCM.Common.Dropdown-1.html",
    "title": "Class Dropdown<T> | MCM Documentation",
    "summary": "Class Dropdown<T> Namespace MCM.Common Assembly MCMv5.dll public sealed class Dropdown<T> : List<T>, IList<T>, ICollection<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable, IEqualityComparer<Dropdown<T>>, INotifyPropertyChanged, ICloneable Type Parameters T Inheritance object List<T> Dropdown<T> Implements IList<T> ICollection<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IList ICollection IEnumerable IEqualityComparer<Dropdown<T>> INotifyPropertyChanged ICloneable Inherited Members List<T>.Add(T) List<T>.AddRange(IEnumerable<T>) List<T>.AsReadOnly() List<T>.BinarySearch(T) List<T>.BinarySearch(T, IComparer<T>) List<T>.BinarySearch(int, int, T, IComparer<T>) List<T>.Clear() List<T>.Contains(T) List<T>.ConvertAll<TOutput>(Converter<T, TOutput>) List<T>.CopyTo(T[]) List<T>.CopyTo(T[], int) List<T>.CopyTo(int, T[], int, int) List<T>.Exists(Predicate<T>) List<T>.Find(Predicate<T>) List<T>.FindAll(Predicate<T>) List<T>.FindIndex(int, int, Predicate<T>) List<T>.FindIndex(int, Predicate<T>) List<T>.FindIndex(Predicate<T>) List<T>.FindLast(Predicate<T>) List<T>.FindLastIndex(int, int, Predicate<T>) List<T>.FindLastIndex(int, Predicate<T>) List<T>.FindLastIndex(Predicate<T>) List<T>.ForEach(Action<T>) List<T>.GetEnumerator() List<T>.GetRange(int, int) List<T>.IndexOf(T) List<T>.IndexOf(T, int) List<T>.IndexOf(T, int, int) List<T>.Insert(int, T) List<T>.InsertRange(int, IEnumerable<T>) List<T>.LastIndexOf(T) List<T>.LastIndexOf(T, int) List<T>.LastIndexOf(T, int, int) List<T>.Remove(T) List<T>.RemoveAll(Predicate<T>) List<T>.RemoveAt(int) List<T>.RemoveRange(int, int) List<T>.Reverse() List<T>.Reverse(int, int) List<T>.Sort() List<T>.Sort(IComparer<T>) List<T>.Sort(Comparison<T>) List<T>.Sort(int, int, IComparer<T>) List<T>.ToArray() List<T>.TrimExcess() List<T>.TrueForAll(Predicate<T>) List<T>.Capacity List<T>.Count List<T>.this[int] object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Dropdown(IEnumerable<T>, int) public Dropdown(IEnumerable<T> values, int selectedIndex) Parameters values IEnumerable<T> selectedIndex int Properties Empty public static Dropdown<T> Empty { get; } Property Value Dropdown<T> SelectedIndex public int SelectedIndex { get; set; } Property Value int SelectedValue public T SelectedValue { get; set; } Property Value T Methods Clone() public object Clone() Returns object Equals(Dropdown<T>?, Dropdown<T>?) public bool Equals(Dropdown<T>? x, Dropdown<T>? y) Parameters x Dropdown<T> y Dropdown<T> Returns bool Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int GetHashCode(Dropdown<T>) public int GetHashCode(Dropdown<T> obj) Parameters obj Dropdown<T> Returns int Events PropertyChanged public event PropertyChangedEventHandler? PropertyChanged Event Type PropertyChangedEventHandler"
  },
  "api/MCM.Common.IRef.html": {
    "href": "api/MCM.Common.IRef.html",
    "title": "Interface IRef | MCM Documentation",
    "summary": "Interface IRef Namespace MCM.Common Assembly MCMv5.dll An interface that provides access to some value for MCM to get/set. public interface IRef : INotifyPropertyChanged Inherited Members INotifyPropertyChanged.PropertyChanged Properties Type Underlying type of the value Type Type { get; } Property Value Type Value object? Value { get; set; } Property Value object"
  },
  "api/MCM.Common.IWrapper.html": {
    "href": "api/MCM.Common.IWrapper.html",
    "title": "Interface IWrapper | MCM Documentation",
    "summary": "Interface IWrapper Namespace MCM.Common Assembly MCMv5.dll public interface IWrapper Properties Object object? Object { get; } Property Value object"
  },
  "api/MCM.Common.LocalizationUtils.html": {
    "href": "api/MCM.Common.LocalizationUtils.html",
    "title": "Class LocalizationUtils | MCM Documentation",
    "summary": "Class LocalizationUtils Namespace MCM.Common Assembly MCMv5.dll public static class LocalizationUtils Inheritance object LocalizationUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Localize(string, Dictionary<string, object>?) public static string Localize(string rawText, Dictionary<string, object>? attributes = null) Parameters rawText string attributes Dictionary<string, object> Returns string"
  },
  "api/MCM.Common.MCMException.html": {
    "href": "api/MCM.Common.MCMException.html",
    "title": "Class MCMException | MCM Documentation",
    "summary": "Class MCMException Namespace MCM.Common Assembly MCMv5.dll [Serializable] public class MCMException : Exception, ISerializable Inheritance object Exception MCMException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MCMException() public MCMException() MCMException(SerializationInfo, StreamingContext) protected MCMException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo context StreamingContext MCMException(string) public MCMException(string message) Parameters message string MCMException(string, Exception) public MCMException(string message, Exception inner) Parameters message string inner Exception"
  },
  "api/MCM.Common.PropertyRef.html": {
    "href": "api/MCM.Common.PropertyRef.html",
    "title": "Class PropertyRef | MCM Documentation",
    "summary": "Class PropertyRef Namespace MCM.Common Assembly MCMv5.dll Wraps a class property for MCM to get/set its value public class PropertyRef : IRef, INotifyPropertyChanged, IEquatable<PropertyRef> Inheritance object PropertyRef Implements IRef INotifyPropertyChanged IEquatable<PropertyRef> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PropertyRef(PropertyInfo, object) public PropertyRef(PropertyInfo propInfo, object instance) Parameters propInfo PropertyInfo instance object Properties Instance public object Instance { get; } Property Value object PropertyInfo public PropertyInfo PropertyInfo { get; } Property Value PropertyInfo Type Underlying type of the value public Type Type { get; } Property Value Type Value public object? Value { get; set; } Property Value object Methods Equals(PropertyRef?) public bool Equals(PropertyRef? other) Parameters other PropertyRef Returns bool Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int OnPropertyChanged(string?) protected virtual void OnPropertyChanged(string? propertyName = null) Parameters propertyName string Events PropertyChanged public event PropertyChangedEventHandler? PropertyChanged Event Type PropertyChangedEventHandler Operators operator ==(PropertyRef?, PropertyRef?) public static bool operator ==(PropertyRef? left, PropertyRef? right) Parameters left PropertyRef right PropertyRef Returns bool operator !=(PropertyRef?, PropertyRef?) public static bool operator !=(PropertyRef? left, PropertyRef? right) Parameters left PropertyRef right PropertyRef Returns bool"
  },
  "api/MCM.Common.ProxyRef-1.html": {
    "href": "api/MCM.Common.ProxyRef-1.html",
    "title": "Class ProxyRef<T> | MCM Documentation",
    "summary": "Class ProxyRef<T> Namespace MCM.Common Assembly MCMv5.dll A broader wrapper. Uses functions for getting/setting the value public class ProxyRef<T> : IRef, INotifyPropertyChanged, IEquatable<ProxyRef<T>> Type Parameters T Inheritance object ProxyRef<T> Implements IRef INotifyPropertyChanged IEquatable<ProxyRef<T>> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProxyRef(Func<T>, Action<T>?) public ProxyRef(Func<T> getter, Action<T>? setter) Parameters getter Func<T> setter Action<T> Properties Type Underlying type of the value public Type Type { get; } Property Value Type Value public object? Value { get; set; } Property Value object Methods Equals(ProxyRef<T>?) public bool Equals(ProxyRef<T>? other) Parameters other ProxyRef<T> Returns bool Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int OnPropertyChanged(string?) protected virtual void OnPropertyChanged(string? propertyName = null) Parameters propertyName string Events PropertyChanged public event PropertyChangedEventHandler? PropertyChanged Event Type PropertyChangedEventHandler Operators operator ==(ProxyRef<T>?, ProxyRef<T>?) public static bool operator ==(ProxyRef<T>? left, ProxyRef<T>? right) Parameters left ProxyRef<T> right ProxyRef<T> Returns bool operator !=(ProxyRef<T>?, ProxyRef<T>?) public static bool operator !=(ProxyRef<T>? left, ProxyRef<T>? right) Parameters left ProxyRef<T> right ProxyRef<T> Returns bool"
  },
  "api/MCM.Common.RefWrapper.html": {
    "href": "api/MCM.Common.RefWrapper.html",
    "title": "Class RefWrapper | MCM Documentation",
    "summary": "Class RefWrapper Namespace MCM.Common Assembly MCMv5.dll Wrapper around any type that implements IRef. We don't use casting because it might not be safe. public class RefWrapper : IRef, INotifyPropertyChanged, IWrapper Inheritance object RefWrapper Implements IRef INotifyPropertyChanged IWrapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RefWrapper(object) public RefWrapper(object @object) Parameters object object Properties Object public object Object { get; } Property Value object Type Underlying type of the value public Type Type { get; } Property Value Type Value public object? Value { get; set; } Property Value object Events PropertyChanged public event PropertyChangedEventHandler? PropertyChanged Event Type PropertyChangedEventHandler"
  },
  "api/MCM.Common.SelectedIndexWrapper.html": {
    "href": "api/MCM.Common.SelectedIndexWrapper.html",
    "title": "Struct SelectedIndexWrapper | MCM Documentation",
    "summary": "Struct SelectedIndexWrapper Namespace MCM.Common Assembly MCMv5.dll public readonly ref struct SelectedIndexWrapper Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors SelectedIndexWrapper(object?) public SelectedIndexWrapper(object? @object) Parameters object object Properties SelectedIndex public int SelectedIndex { get; set; } Property Value int"
  },
  "api/MCM.Common.StorageRef-1.html": {
    "href": "api/MCM.Common.StorageRef-1.html",
    "title": "Class StorageRef<T> | MCM Documentation",
    "summary": "Class StorageRef<T> Namespace MCM.Common Assembly MCMv5.dll public sealed class StorageRef<T> : IRef, INotifyPropertyChanged Type Parameters T Inheritance object StorageRef<T> Implements IRef INotifyPropertyChanged Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors StorageRef(T?) public StorageRef(T? value) Parameters value T Properties Type Underlying type of the value public Type Type { get; } Property Value Type Value public object? Value { get; set; } Property Value object Events PropertyChanged public event PropertyChangedEventHandler? PropertyChanged Event Type PropertyChangedEventHandler"
  },
  "api/MCM.Common.StorageRef.html": {
    "href": "api/MCM.Common.StorageRef.html",
    "title": "Class StorageRef | MCM Documentation",
    "summary": "Class StorageRef Namespace MCM.Common Assembly MCMv5.dll public sealed class StorageRef : IRef, INotifyPropertyChanged Inheritance object StorageRef Implements IRef INotifyPropertyChanged Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors StorageRef(object?) public StorageRef(object? value) Parameters value object Properties Type Underlying type of the value public Type Type { get; } Property Value Type Value public object? Value { get; set; } Property Value object Events PropertyChanged public event PropertyChangedEventHandler? PropertyChanged Event Type PropertyChangedEventHandler"
  },
  "api/MCM.Common.html": {
    "href": "api/MCM.Common.html",
    "title": "Namespace MCM.Common | MCM Documentation",
    "summary": "Namespace MCM.Common Classes Constants Dropdown<T> LocalizationUtils MCMException PropertyRef Wraps a class property for MCM to get/set its value ProxyRef<T> A broader wrapper. Uses functions for getting/setting the value RefWrapper Wrapper around any type that implements IRef. We don't use casting because it might not be safe. StorageRef StorageRef<T> Structs SelectedIndexWrapper Interfaces IRef An interface that provides access to some value for MCM to get/set. IWrapper"
  },
  "api/MCM.Implementation.BaseJsonSettingsFormat.html": {
    "href": "api/MCM.Implementation.BaseJsonSettingsFormat.html",
    "title": "Class BaseJsonSettingsFormat | MCM Documentation",
    "summary": "Class BaseJsonSettingsFormat Namespace MCM.Implementation Assembly MCMv5.dll public abstract class BaseJsonSettingsFormat : ISettingsFormat Inheritance object BaseJsonSettingsFormat Implements ISettingsFormat Derived JsonSettingsFormat XmlSettingsFormat Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseJsonSettingsFormat(IBUTRLogger) protected BaseJsonSettingsFormat(IBUTRLogger logger) Parameters logger IBUTRLogger Fields Logger protected readonly IBUTRLogger Logger Field Value IBUTRLogger _existingObjects protected readonly Dictionary<string, object?> _existingObjects Field Value Dictionary<string, object> Properties FormatTypes public virtual IEnumerable<string> FormatTypes { get; } Property Value IEnumerable<string> JsonSerializerSettings protected virtual JsonSerializerSettings JsonSerializerSettings { get; } Property Value JsonSerializerSettings Methods AddSerializationProperty(string, object?) protected void AddSerializationProperty(string path, object? value) Parameters path string value object ClearSerializationProperties() protected void ClearSerializationProperties() GetSerializationProperty(string) protected object? GetSerializationProperty(string path) Parameters path string Returns object Load(BaseSettings, GameDirectory, string) public virtual BaseSettings Load(BaseSettings settings, GameDirectory directory, string filename) Parameters settings BaseSettings directory GameDirectory filename string Returns BaseSettings LoadFromJson(BaseSettings, string) public BaseSettings LoadFromJson(BaseSettings settings, string content) Parameters settings BaseSettings content string Returns BaseSettings Save(BaseSettings, GameDirectory, string) public virtual bool Save(BaseSettings settings, GameDirectory directory, string filename) Parameters settings BaseSettings directory GameDirectory filename string Returns bool SaveJson(BaseSettings) public string SaveJson(BaseSettings settings) Parameters settings BaseSettings Returns string TryLoadFromJson(ref BaseSettings, string) protected bool TryLoadFromJson(ref BaseSettings settings, string content) Parameters settings BaseSettings content string Returns bool"
  },
  "api/MCM.Implementation.BaseSettingsContainer-1.html": {
    "href": "api/MCM.Implementation.BaseSettingsContainer-1.html",
    "title": "Class BaseSettingsContainer<TSettings> | MCM Documentation",
    "summary": "Class BaseSettingsContainer<TSettings> Namespace MCM.Implementation Assembly MCMv5.dll public abstract class BaseSettingsContainer<TSettings> : ISettingsContainer, ISettingsContainerHasSettingsDefinitions, ISettingsContainerCanOverride, ISettingsContainerCanReset, ISettingsContainerPresets, ISettingsContainerHasSettingsPack where TSettings : BaseSettings Type Parameters TSettings Inheritance object BaseSettingsContainer<TSettings> Implements ISettingsContainer ISettingsContainerHasSettingsDefinitions ISettingsContainerCanOverride ISettingsContainerCanReset ISettingsContainerPresets ISettingsContainerHasSettingsPack Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties LoadedSettings protected virtual Dictionary<string, TSettings> LoadedSettings { get; } Property Value Dictionary<string, TSettings> RootFolder protected virtual GameDirectory RootFolder { get; } Property Value GameDirectory SettingsDefinitions public virtual IEnumerable<SettingsDefinition> SettingsDefinitions { get; } Property Value IEnumerable<SettingsDefinition> Methods GetPresets(string) public IEnumerable<ISettingsPreset> GetPresets(string settingsId) Parameters settingsId string Returns IEnumerable<ISettingsPreset> GetSettings(string) public virtual BaseSettings? GetSettings(string id) Parameters id string Returns BaseSettings LoadAvailableSnapshots(IEnumerable<SettingSnapshot>) public IEnumerable<BaseSettings> LoadAvailableSnapshots(IEnumerable<SettingSnapshot> snapshots) Parameters snapshots IEnumerable<SettingSnapshot> Returns IEnumerable<BaseSettings> OverrideSettings(BaseSettings) public virtual bool OverrideSettings(BaseSettings settings) Parameters settings BaseSettings Returns bool RegisterSettings(TSettings?) protected virtual void RegisterSettings(TSettings? settings) Parameters settings TSettings ResetSettings(BaseSettings) public virtual bool ResetSettings(BaseSettings settings) Parameters settings BaseSettings Returns bool SaveAvailableSnapshots() public IEnumerable<SettingSnapshot> SaveAvailableSnapshots() Returns IEnumerable<SettingSnapshot> SavePresets(ISettingsPreset) public bool SavePresets(ISettingsPreset preset) Parameters preset ISettingsPreset Returns bool SaveSettings(BaseSettings) public virtual bool SaveSettings(BaseSettings settings) Parameters settings BaseSettings Returns bool"
  },
  "api/MCM.Implementation.BaseSettingsJsonConverter.html": {
    "href": "api/MCM.Implementation.BaseSettingsJsonConverter.html",
    "title": "Class BaseSettingsJsonConverter | MCM Documentation",
    "summary": "Class BaseSettingsJsonConverter Namespace MCM.Implementation Assembly MCMv5.dll public sealed class BaseSettingsJsonConverter : JsonConverter Inheritance object JsonConverter BaseSettingsJsonConverter Inherited Members JsonConverter.CanRead JsonConverter.CanWrite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors BaseSettingsJsonConverter(IBUTRLogger, Action<string, object?>, Action) public BaseSettingsJsonConverter(IBUTRLogger logger, Action<string, object?> addSerializationProperty, Action clearSerializationProperties) Parameters logger IBUTRLogger addSerializationProperty Action<string, object> clearSerializationProperties Action Methods CanConvert(Type) Determines whether this instance can convert the specified object type. public override bool CanConvert(Type objectType) Parameters objectType Type Type of the object. Returns bool true if this instance can convert the specified object type; otherwise, false. ReadJson(JsonReader, Type, object?, JsonSerializer) Reads the JSON representation of the object. public override object? ReadJson(JsonReader reader, Type objectType, object? existingValue, JsonSerializer serializer) Parameters reader JsonReader The JsonReader to read from. objectType Type Type of the object. existingValue object The existing value of object being read. serializer JsonSerializer The calling serializer. Returns object The object value. WriteJson(JsonWriter, object?, JsonSerializer) Writes the JSON representation of the object. public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer) Parameters writer JsonWriter The JsonWriter to write to. value object The value. serializer JsonSerializer The calling serializer."
  },
  "api/MCM.Implementation.DropdownJsonConverter.html": {
    "href": "api/MCM.Implementation.DropdownJsonConverter.html",
    "title": "Class DropdownJsonConverter | MCM Documentation",
    "summary": "Class DropdownJsonConverter Namespace MCM.Implementation Assembly MCMv5.dll public sealed class DropdownJsonConverter : JsonConverter Inheritance object JsonConverter DropdownJsonConverter Inherited Members JsonConverter.CanRead JsonConverter.CanWrite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors DropdownJsonConverter(IBUTRLogger, Func<string, object?>) public DropdownJsonConverter(IBUTRLogger logger, Func<string, object?> getSerializationProperty) Parameters logger IBUTRLogger getSerializationProperty Func<string, object> Methods CanConvert(Type) Determines whether this instance can convert the specified object type. public override bool CanConvert(Type objectType) Parameters objectType Type Type of the object. Returns bool true if this instance can convert the specified object type; otherwise, false. ReadJson(JsonReader, Type, object?, JsonSerializer) Reads the JSON representation of the object. public override object? ReadJson(JsonReader reader, Type objectType, object? existingValue, JsonSerializer serializer) Parameters reader JsonReader The JsonReader to read from. objectType Type Type of the object. existingValue object The existing value of object being read. serializer JsonSerializer The calling serializer. Returns object The object value. WriteJson(JsonWriter, object?, JsonSerializer) Writes the JSON representation of the object. public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer) Parameters writer JsonWriter The JsonWriter to write to. value object The value. serializer JsonSerializer The calling serializer."
  },
  "api/MCM.Implementation.JsonSettingsFormat.html": {
    "href": "api/MCM.Implementation.JsonSettingsFormat.html",
    "title": "Class JsonSettingsFormat | MCM Documentation",
    "summary": "Class JsonSettingsFormat Namespace MCM.Implementation Assembly MCMv5.dll public sealed class JsonSettingsFormat : BaseJsonSettingsFormat, ISettingsFormat Inheritance object BaseJsonSettingsFormat JsonSettingsFormat Implements ISettingsFormat Inherited Members BaseJsonSettingsFormat.SaveJson(BaseSettings) BaseJsonSettingsFormat.LoadFromJson(BaseSettings, string) BaseJsonSettingsFormat.Save(BaseSettings, GameDirectory, string) BaseJsonSettingsFormat.Load(BaseSettings, GameDirectory, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors JsonSettingsFormat(IBUTRLogger<JsonSettingsFormat>) public JsonSettingsFormat(IBUTRLogger<JsonSettingsFormat> logger) Parameters logger IBUTRLogger<JsonSettingsFormat> Properties FormatTypes public override IEnumerable<string> FormatTypes { get; } Property Value IEnumerable<string>"
  },
  "api/MCM.Implementation.JsonSettingsPreset.html": {
    "href": "api/MCM.Implementation.JsonSettingsPreset.html",
    "title": "Class JsonSettingsPreset | MCM Documentation",
    "summary": "Class JsonSettingsPreset Namespace MCM.Implementation Assembly MCMv5.dll A persistent preset that can be created at runtime public sealed class JsonSettingsPreset : ISettingsPreset Inheritance object JsonSettingsPreset Implements ISettingsPreset Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors JsonSettingsPreset(BaseSettings, string, string, GameFile) public JsonSettingsPreset(BaseSettings settings, string id, string name, GameFile file) Parameters settings BaseSettings id string name string file GameFile JsonSettingsPreset(string, string, string, GameFile, Func<BaseSettings>) public JsonSettingsPreset(string settingsId, string id, string name, GameFile file, Func<BaseSettings> getNewSettings) Parameters settingsId string id string name string file GameFile getNewSettings Func<BaseSettings> Properties Id public string Id { get; } Property Value string Name public string Name { get; } Property Value string SettingsId public string SettingsId { get; } Property Value string Methods FromFile(BaseSettings, GameFile) public static JsonSettingsPreset? FromFile(BaseSettings settings, GameFile file) Parameters settings BaseSettings file GameFile Returns JsonSettingsPreset FromFile(string, GameFile, Func<BaseSettings>) public static JsonSettingsPreset? FromFile(string settingsId, GameFile file, Func<BaseSettings> getNewSettings) Parameters settingsId string file GameFile getNewSettings Func<BaseSettings> Returns JsonSettingsPreset GetPresetId(string) public static string? GetPresetId(string content) Parameters content string Returns string LoadPreset() public BaseSettings LoadPreset() Returns BaseSettings SavePreset(BaseSettings) public bool SavePreset(BaseSettings settings) Parameters settings BaseSettings Returns bool"
  },
  "api/MCM.Implementation.XmlSettingsFormat.html": {
    "href": "api/MCM.Implementation.XmlSettingsFormat.html",
    "title": "Class XmlSettingsFormat | MCM Documentation",
    "summary": "Class XmlSettingsFormat Namespace MCM.Implementation Assembly MCMv5.dll public sealed class XmlSettingsFormat : BaseJsonSettingsFormat, ISettingsFormat Inheritance object BaseJsonSettingsFormat XmlSettingsFormat Implements ISettingsFormat Inherited Members BaseJsonSettingsFormat.SaveJson(BaseSettings) BaseJsonSettingsFormat.LoadFromJson(BaseSettings, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors XmlSettingsFormat(IBUTRLogger<XmlSettingsFormat>) public XmlSettingsFormat(IBUTRLogger<XmlSettingsFormat> logger) Parameters logger IBUTRLogger<XmlSettingsFormat> Properties FormatTypes public override IEnumerable<string> FormatTypes { get; } Property Value IEnumerable<string> Methods Load(BaseSettings, GameDirectory, string) public override BaseSettings Load(BaseSettings settings, GameDirectory directory, string filename) Parameters settings BaseSettings directory GameDirectory filename string Returns BaseSettings Save(BaseSettings, GameDirectory, string) public override bool Save(BaseSettings settings, GameDirectory directory, string filename) Parameters settings BaseSettings directory GameDirectory filename string Returns bool"
  },
  "api/MCM.Implementation.html": {
    "href": "api/MCM.Implementation.html",
    "title": "Namespace MCM.Implementation | MCM Documentation",
    "summary": "Namespace MCM.Implementation Classes BaseJsonSettingsFormat BaseSettingsContainer<TSettings> BaseSettingsJsonConverter DropdownJsonConverter JsonSettingsFormat JsonSettingsPreset A persistent preset that can be created at runtime XmlSettingsFormat"
  },
  "api/MCM.Internal.Extensions.ServiceCollectionExtensions.html": {
    "href": "api/MCM.Internal.Extensions.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | MCM Documentation",
    "summary": "Class ServiceCollectionExtensions Namespace MCM.Internal.Extensions Assembly MCMv5.dll public static class ServiceCollectionExtensions Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetServiceContainer(MBSubModuleBase) public static IGenericServiceContainer GetServiceContainer(this MBSubModuleBase _) Parameters _ MBSubModuleBase Returns IGenericServiceContainer"
  },
  "api/MCM.Internal.Extensions.html": {
    "href": "api/MCM.Internal.Extensions.html",
    "title": "Namespace MCM.Internal.Extensions | MCM Documentation",
    "summary": "Namespace MCM.Internal.Extensions Classes ServiceCollectionExtensions"
  },
  "api/MCM.MCMSubModule.html": {
    "href": "api/MCM.MCMSubModule.html",
    "title": "Class MCMSubModule | MCM Documentation",
    "summary": "Class MCMSubModule Namespace MCM Assembly MCMv5.dll public class MCMSubModule : MBSubModuleBase Inheritance object MBSubModuleBase MCMSubModule Inherited Members MBSubModuleBase.OnConfigChanged() MBSubModuleBase.OnApplicationTick(float) MBSubModuleBase.AfterAsyncTickTick(float) MBSubModuleBase.InitializeGameStarter(Game, IGameStarter) MBSubModuleBase.OnGameLoaded(Game, object) MBSubModuleBase.OnNewGameCreated(Game, object) MBSubModuleBase.BeginGameStart(Game) MBSubModuleBase.RegisterSubModuleObjects(bool) MBSubModuleBase.AfterRegisterSubModuleObjects(bool) MBSubModuleBase.OnMultiplayerGameStart(Game, object) MBSubModuleBase.OnGameInitializationFinished(Game) MBSubModuleBase.OnAfterGameInitializationFinished(Game, object) MBSubModuleBase.DoLoading(Game) MBSubModuleBase.OnBeforeMissionBehaviorInitialize(Mission) MBSubModuleBase.OnInitialState() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ServiceCollectionExtensions.GetServiceContainer(MBSubModuleBase) Constructors MCMSubModule() public MCMSubModule() Properties Instance public static MCMSubModule? Instance { get; } Property Value MCMSubModule Methods OnBeforeInitialModuleScreenSetAsRoot() protected override void OnBeforeInitialModuleScreenSetAsRoot() OnCampaignStart(Game, object) public override void OnCampaignStart(Game game, object starterObject) Parameters game Game starterObject object OnGameEnd(Game) public override void OnGameEnd(Game game) Parameters game Game OnGameStart(Game, IGameStarter) protected override void OnGameStart(Game game, IGameStarter gameStarterObject) Parameters game Game gameStarterObject IGameStarter OnMissionBehaviorInitialize(Mission) public override void OnMissionBehaviorInitialize(Mission mission) Parameters mission Mission OnServiceRegistration() public void OnServiceRegistration() OnSubModuleLoad() protected override void OnSubModuleLoad() OnSubModuleUnloaded() protected override void OnSubModuleUnloaded() OverrideServiceContainer(IGenericServiceContainer) public void OverrideServiceContainer(IGenericServiceContainer serviceContainer) Parameters serviceContainer IGenericServiceContainer"
  },
  "api/MCM.SettingsProviderCampaignBehavior.html": {
    "href": "api/MCM.SettingsProviderCampaignBehavior.html",
    "title": "Class SettingsProviderCampaignBehavior | MCM Documentation",
    "summary": "Class SettingsProviderCampaignBehavior Namespace MCM Assembly MCMv5.dll public class SettingsProviderCampaignBehavior : CampaignBehaviorBase, ICampaignBehavior Inheritance object CampaignBehaviorBase SettingsProviderCampaignBehavior Implements ICampaignBehavior Inherited Members CampaignBehaviorBase.StringId CampaignBehaviorBase.GetCampaignBehavior<T>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SettingsProviderCampaignBehavior(BaseSettingsProvider?) public SettingsProviderCampaignBehavior(BaseSettingsProvider? baseSettingsProvider) Parameters baseSettingsProvider BaseSettingsProvider Methods Get<TSettings>() public TSettings? Get<TSettings>() where TSettings : BaseSettings, new() Returns TSettings Type Parameters TSettings RegisterEvents() public override void RegisterEvents() SyncData(IDataStore) public override void SyncData(IDataStore dataStore) Parameters dataStore IDataStore"
  },
  "api/MCM.SettingsProviderMissionBehavior.html": {
    "href": "api/MCM.SettingsProviderMissionBehavior.html",
    "title": "Class SettingsProviderMissionBehavior | MCM Documentation",
    "summary": "Class SettingsProviderMissionBehavior Namespace MCM Assembly MCMv5.dll public class SettingsProviderMissionBehavior : MissionBehavior, IMissionBehavior Inheritance object MissionBehavior SettingsProviderMissionBehavior Implements IMissionBehavior Inherited Members MissionBehavior.OnAfterMissionCreated() MissionBehavior.OnBehaviorInitialize() MissionBehavior.OnCreated() MissionBehavior.EarlyStart() MissionBehavior.AfterStart() MissionBehavior.OnMissileHit(Agent, Agent, bool) MissionBehavior.OnMissileCollisionReaction(Mission.MissileCollisionReaction, Agent, Agent, sbyte) MissionBehavior.OnMissionScreenPreLoad() MissionBehavior.OnAgentCreated(Agent) MissionBehavior.OnAgentBuild(Agent, Banner) MissionBehavior.OnAgentTeamChanged(Team, Team, Agent) MissionBehavior.OnAgentHit(Agent, Agent, in MissionWeapon, in Blow, in AttackCollisionData) MissionBehavior.OnScoreHit(Agent, Agent, WeaponComponentData, bool, bool, in Blow, in AttackCollisionData, float, float, float) MissionBehavior.OnEarlyAgentRemoved(Agent, Agent, AgentState, KillingBlow) MissionBehavior.OnAgentRemoved(Agent, Agent, AgentState, KillingBlow) MissionBehavior.OnAgentDeleted(Agent) MissionBehavior.OnAgentFleeing(Agent) MissionBehavior.OnAgentPanicked(Agent) MissionBehavior.OnFocusGained(Agent, IFocusable, bool) MissionBehavior.OnFocusLost(Agent, IFocusable) MissionBehavior.OnAddTeam(Team) MissionBehavior.AfterAddTeam(Team) MissionBehavior.OnAgentInteraction(Agent, Agent) MissionBehavior.OnClearScene() MissionBehavior.HandleOnCloseMission() MissionBehavior.OnEndMission() MissionBehavior.OnRemoveBehavior() MissionBehavior.OnPreMissionTick(float) MissionBehavior.OnPreDisplayMissionTick(float) MissionBehavior.OnMissionTick(float) MissionBehavior.OnAgentMount(Agent) MissionBehavior.OnAgentDismount(Agent) MissionBehavior.IsThereAgentAction(Agent, Agent) MissionBehavior.OnEntityRemoved(GameEntity) MissionBehavior.OnObjectUsed(Agent, UsableMissionObject) MissionBehavior.OnObjectStoppedBeingUsed(Agent, UsableMissionObject) MissionBehavior.OnRenderingStarted() MissionBehavior.OnMissionActivate() MissionBehavior.OnMissionDeactivate() MissionBehavior.OnMissionRestart() MissionBehavior.GetCompassTargets() MissionBehavior.OnAssignPlayerAsSergeantOfFormation(Agent) MissionBehavior.OnFormationUnitsSpawned(Team) MissionBehavior.OnGetAgentState(Agent, bool) MissionBehavior.OnAgentAlarmedStateChanged(Agent, Agent.AIStateFlag) MissionBehavior.OnObjectDisabled(DestructableComponent) MissionBehavior.OnMissionModeChange(MissionMode, bool) MissionBehavior.OnAgentControllerChanged(Agent, Agent.ControllerType) MissionBehavior.OnItemPickup(Agent, SpawnedItemEntity) MissionBehavior.OnItemDrop(Agent, SpawnedItemEntity) MissionBehavior.OnRegisterBlow(Agent, Agent, GameEntity, Blow, ref AttackCollisionData, in MissionWeapon) MissionBehavior.OnAgentShootMissile(Agent, EquipmentIndex, Vec3, Vec3, Mat3, bool, int) MissionBehavior.Mission MissionBehavior.DebugInput object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SettingsProviderMissionBehavior(BaseSettingsProvider?) public SettingsProviderMissionBehavior(BaseSettingsProvider? baseSettingsProvider) Parameters baseSettingsProvider BaseSettingsProvider Properties BehaviorType public override MissionBehaviorType BehaviorType { get; } Property Value MissionBehaviorType Methods Get<TSettings>() public TSettings? Get<TSettings>() where TSettings : BaseSettings, new() Returns TSettings Type Parameters TSettings"
  },
  "api/MCM.html": {
    "href": "api/MCM.html",
    "title": "Namespace MCM | MCM Documentation",
    "summary": "Namespace MCM Classes MCMSubModule SettingsProviderCampaignBehavior SettingsProviderMissionBehavior"
  },
  "articles/GitHub Actions/environment-variables-used.html": {
    "href": "articles/GitHub Actions/environment-variables-used.html",
    "title": "| MCM Documentation",
    "summary": "NEXUSMODS_COOKIES_JSON: a JSON array of the cookies that are used by Bannerlord.NexusmodsUploader. In this format. NUGET_API_KEY: the API key for uploading packages to NuGet. REPO_ACCESS_TOKEN: GitHub token with public_repo access for downloading release assets. SCREENSHOTS_PASSWORD: string that is used for 7z to password protect the screenshots by Bannerlord.NexusmodsUploader. STEAM_LOGIN: Steam account login for DepotDownloader. STEAM_PASSWORD: Steam account password for DepotDownloader."
  },
  "articles/MCMv2/Installation/editing-submodule.xml.html": {
    "href": "articles/MCMv2/Installation/editing-submodule.xml.html",
    "title": "| MCM Documentation",
    "summary": "For the options to work, you should include the additional SubModule that Bannerlord.MBOptionScreen provides <SubModule> <Name value=\"MBOptionScreen\" /> <DLLName value=\"MBOptionScreen.v2.0.10.dll\" /> <SubModuleClassType value=\"MBOptionScreen.MBOptionScreenSubModuleV2010\" /> <Tags> <Tag key=\"DedicatedServerType\" value=\"none\" /> <Tag key=\"IsNoRenderModeElement\" value=\"false\" /> </Tags> </SubModule> You need to reference a specific assembly version. For example, if you are integrating v2.0.4, be sure that the .dll name is MBOptionScreen.v2.0.4.dll. The reason for this is that the game might have multiple mods with integrated MBOptionScreen. If the library name is the same one (MBOptionScreen.dll), only one version would be used. It could be a lower version, which will break mods depending on a higher version. By specifying the library version, every MBOptionScreen library will be loaded. While this will take a little more more resources, we can guarantee that MBOptionScreen will always find the latest interface implementations that are compatible with the game version. In conclusion, let's say you are making a mod Aragas.MercenaryContract. And you would like to use MBOptionScreen as a dependency. Instead of your old ways with ModLib(when you add a DependedModule). You should add another tag of SubModule inside the SubModules tag. So basically your SubModules tag is supposed to hold two SubModule tag inside of itself. And they should look like this: <SubModules> <SubModule> <Name value=\"Aragas.MercenaryContract\" /> <DLLName value=\"Aragas.MercenaryContract.dll\" /> <SubModuleClassType value=\"Aragas.MountAndBlade.MercenaryContractSubModule\" /> <Tags> <Tag key=\"DedicatedServerType\" value=\"none\" /> <Tag key=\"IsNoRenderModeElement\" value=\"false\" /> </Tags> </SubModule> <SubModule> <Name value=\"MBOptionScreen\" /> <DLLName value=\"MBOptionScreen.v2.0.4.dll\" /> <SubModuleClassType value=\"MBOptionScreen.MBOptionScreenSubModule\" /> <Tags> <Tag key=\"DedicatedServerType\" value=\"none\" /> <Tag key=\"IsNoRenderModeElement\" value=\"false\" /> </Tags> </SubModule> </SubModules> Remember after you compile your mod, there is supposed to be an MBOptionScreen.v%VERSION%.dll inside the Win64_Shipping_Client folder of your module. In this way, the Bannerlord launcher should load your module with MBOptionScreen without any problems."
  },
  "articles/MCMv2/Installation/installation.html": {
    "href": "articles/MCMv2/Installation/installation.html",
    "title": "| MCM Documentation",
    "summary": "You need to install the NuGet package Bannerlord.MBOptionScreen. Add the submodule in your SubModule definition Add an implementation of SettingsBase. Please note that you should not use Settings.Instance in OnSubModuleLoad() as the setting might still not be loaded depending on mod loading order. No additional steps are required. The Module will find all existing SettingsBase implementation and show them in the settings menu. Old and current implementations based on ModLib are supported, but the settings will reset due to different handling of configuration files. You don't need to add the .xml files. They are embedded into the module itself and will be injected into the game automatically."
  },
  "articles/MCMv2/Installation/settings-definition-example.html": {
    "href": "articles/MCMv2/Installation/settings-definition-example.html",
    "title": "| MCM Documentation",
    "summary": "Example settings. Check this page for specific information on the attributes. public class CustomSettings : AttributeSettings<CustomSettings> { // I recommend to use format \"INTERNALMODNAME_v1\", e.g. \"Aragas.MercenaryContract_v1\" // You SHOULD change the version if you change the setting class in a non backwards-compatible way public override string Id { get; set; } = \"Aragas.MercenaryContract_v1\"; // Your mod name in human readable format, e.g. \"Limited Mercenary Contract\" public override string ModName => \"Your Mod Name\"; // The name of the folder within which the settings will be saved, e.g. \"Aragas.MercenaryContract\" public override string ModuleFolderName => \"Name_of_Folder_Used_for_Saving_Settings\"; // Actual configuration definition with the v1 API // v2 API is highly recommended and v1 API is annotated obsolete in latest version (This line add by SaulHE) [SettingProperty(\"Enabled\", \"\")] [SettingPropertyGroup(\"General\")] public bool Enabled { get; set; } = true; [SettingProperty(\"Apply Relationship Rules to NPC\", \"\")] [SettingPropertyGroup(\"General\")] public bool ApplyRelationshipRulesToNPC { get; set; } = false; [SettingProperty(\"Independent Multiplier\", 1, 4, \"Relationship multiplier when Hero is independent.\")] [SettingPropertyGroup(\"Multipliers\")] public int IndependentMultiplier { get; set; } = 1; [SettingProperty(\"Mercenary Multiplier\", 1, 4, \"Relationship multiplier when Hero is a mercenary.\")] [SettingPropertyGroup(\"Multipliers\")] public int MercenaryMultiplier { get; set; } = 1; [SettingProperty(\"Vassal Multiplier\", 1, 4, \"Relationship multiplier when Hero is a vassal.\")] [SettingPropertyGroup(\"Multipliers\")] public int VassalMultiplier { get; set; } = 2; // Configuration definition with the v2 API [SettingPropertyBool(displayName: \"Test Bool\", order: -1, requireRestart: false, hintText: \"This is a v2 bool value definition\")] [SettingPropertyGroup(\"v2 Test\")] public bool TestBool { get; set; } = true; [SettingPropertyFloatingInteger(displayName: \"Test Float\", minValue: 0f, maxValue: 1f, requireRestart: false, hintText: \"A v2 float definition formatted to a percentage display\", valueFormat: \"#0%\")] [SettingPropertyGroup(\"v2 Test\")] public float TestFloat { get; set; } = 0.5f; [SettingPropertyInteger(displayName: \"Test Int\", minValue: 0, maxValue: 50, requireRestart: false, hintText: \"A v2 float definition with 'Denars' appended to the value\", valueFormat: \"0 Denars\")] [SettingPropertyGroup(\"v2 Test\")] public int TestInt { get; set; } = 20; [SettingPropertyText(displayName: \"Test Text\", order: -1, requireRestart: false, hintText: \"A v2 textbox definition\")] [SettingPropertyGroup(\"v2 Test\")] public string TestText { get; set; } = \"Test\"; } To get the loaded setting in your mod, use the static property CustomSettings.Instance. To understand how to format the strings take a look at this page for information and examples (specifically the ToString version). Different than ModLib, You don't have to do anything except for implementing your own custom setting class. MBOptionScreen will automatically scan any derived classes of AttributeSetting class."
  },
  "articles/MCMv2/attributes.html": {
    "href": "articles/MCMv2/attributes.html",
    "title": "| MCM Documentation",
    "summary": "Warning! Dropdown is not supported in v1.1.15 and will be introduced in the v2 release! Each setting you want to add to the menu has to be marked with an attribute. You can additionally group settings by adding the SettingPropertyGroup attribute. '/' is used as the default separator. Right now, the mod provides these types in the setting menu: Bool Int Float String Dropdown v1 With v1 of the API, SettingProperty has multiple constructors, each designed for the specific value it represents. Bool [SettingProperty(displayName: \"Setting Name\", requireRestart: false, hintText: \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public bool SettingVariableName { get; set; } = true; Int [SettingProperty(displayName: \"Setting Name\", minValue: 0, maxValue: 10, editableMinValue: 0, editableMaxValue: 100, requireRestart: false, hintText: \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public int SettingVariableName { get; set; } = 5; Float [SettingProperty(displayName: \"Setting Name\", minValue: 0f, maxValue: 0.5f, editableMinValue: 0f, editableMaxValue: 1f, requireRestart: false, hintText: \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public float SettingVariableName { get; set; } = 0.2f; String [SettingProperty(displayName: \"Setting Name\", requireRestart: false, hintText: \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public string SettingVariableName { get; set; } = \"The textbox data is here\"; v2 With v2 of the API, there's multiple types of setting properties to make using them less confusing, and the settings can also be ordered by indexing them. It's also possible to format the display of the numerical values for the int and float sliders. Bool [SettingPropertyBool(displayName: \"Setting Name\", order: 0, requireRestart: false, hintText: \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public bool SettingVariableName { get; set; } = true; Int // Value is displayed as \"X Denars\" [SettingPropertyInteger(displayName: \"Setting Name\", minValue: 0, maxValue: 100, order: 1, requireRestart: false, hintText: \"Setting explanation.\", valueFormat: \"0 Denars\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public int SettingVariableName { get; set; } = 25; Float // Value is displayed as a percentage [SettingPropertyFloatingInteger(displayName: \"Setting Name\", minValue: 0f, maxValue: 1f, order: 2, requireRestart: false, hintText: \"Setting explanation.\", valueFormat: \"#0%\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public bool SettingVariableName { get; set; } = 0.75; String // Value is displayed as a percentage [SettingPropertyText(displayName: \"Setting Name\", order: 3, requireRestart: false, hintText: \"Setting Explanation\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public string SettingVariableName { get; set; } = \"The textbox data is here\"; To understand how to format the strings take a look at this page for information and examples (specifically the ToString version). Dropdown [SettingPropertyDropdown(\"Setting Name\", 0)] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public DefaultDropdown<string> SettingVariableName { get; set; } = new DefaultDropdown<string>(new string[] { \"Test1\", \"Test2\", \"Test3\" }, 0); It can also use custom classes. Don't forget to override .ToString()! [SettingPropertyDropdown(\"Setting Name\", 0)] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public DefaultDropdown<CustomObject> SettingVariableName { get; set; } = new DefaultDropdown<CustomObject>(new CustomObject[] { new CustomObject(\"Test1\"), new CustomObject(\"Test2\"), new CustomObject(\"Test3\") }, 0); public class CustomObject { private readonly string _value; public CustomObject(string value) => _value = value; public override string ToString() => _value; }"
  },
  "articles/MCMv2/comparing-to-modlib.html": {
    "href": "articles/MCMv2/comparing-to-modlib.html",
    "title": "| MCM Documentation",
    "summary": "Modularity One of the main features of Bannerlord.MBOptionScreen is modularity or 'versioning'. Every component was abstracted, so that they could be easily replaced if the game updates. What does it mean for modders? It doesn't matter that you haven't updated Bannerlord.MBOptionScreen to the latest version. As long as any loaded Module in the game uses a newer version of it, the implementations inside it will be used globally. Each new implementation of a component will be written with backwards compatibility, so if some really old mod was installed together with a fresh one, Bannerlord.MBOptionScreen will not break and will provide options for both mods. What does it mean for users? If some mod was broken because of an old version of Bannerlord.MBOptionScreen, installing a newer version of it as a standalone module will fix it without the need of replacing anything in the original mod. Idempotency Bannerlord.MBOptionScreen ensures that it will be initialized only once, no matter how much modules reference it or includes it within them. And only the latest implementations that are compatible with the game version will be used. Easy to use Bannerlord.MBOptionScreen does not require anything from the modder except of the implementation of a SettingsBase class. It will discover every implementation of a SettingsBase itself, via reflection and initiate it. You also don't need to include any additional .xml files like brushes and prefabs. They are embed into the assembly and will inject themselves into the game during the initialization phase. In-game option The mod add an entry to the in-game escape menu to access the Mod Options menu inside the campaign! Backwards-compatibility Bannerlord.MBOptionScreen supports settings from ModLib. By default, the original ModLib menu option is replaced with Bannerlord.MBOptionScreen. This can be disabled in options. It also provides a stub ModLib.dll file to make Bannerlord.MBOptionScreen work even if ModLib is not present. Localization Supports TW's way of localizing text."
  },
  "articles/MCMv2/migrating-to-v2.html": {
    "href": "articles/MCMv2/migrating-to-v2.html",
    "title": "| MCM Documentation",
    "summary": "SettingProperty moved from MBOptionScreen.Attributes to MBOptionScreen.Attributes.v1 SubModule.xml needs to be updated - change DLLName attribute from MBOptionScreen.dll to MBOptionScreen.v2.0.2.dll or the version you currently use. Basically, after each update of MBOptionScreen, don't forget to change the numbers. It's advised to switch to v2 API of property definition, more info here"
  },
  "articles/MCMv2/project-example.html": {
    "href": "articles/MCMv2/project-example.html",
    "title": "| MCM Documentation",
    "summary": "You can check an example of usage of Bannerlord.MBOptionScreen in my other mod, Aragas.MercenaryContract."
  },
  "articles/MCMv3/mcmv3-attributes.html": {
    "href": "articles/MCMv3/mcmv3-attributes.html",
    "title": "| MCM Documentation",
    "summary": "Each setting you want to add to the menu has to be marked with an attribute. You can additionally group settings by adding the SettingPropertyGroup attribute. '/' is used as the default separator. Right now, the mod provides these types in the setting menu: Bool Int Slider / Textbox Float Slider / Textbox Textbox Dropdown v1 With v1 of the API, SettingProperty has multiple constructors, each designed for the specific value it represents. Bool [SettingProperty(\"Setting Name\", RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public bool SettingVariableName { get; set; } = true; Int [SettingProperty(\"Setting Name\", minValue: 0, maxValue: 10, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public int SettingVariableName { get; set; } = 5; Float [SettingProperty(\"Setting Name\", minValue: 0f, maxValue: 0.5f, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public float SettingVariableName { get; set; } = 0.2f; String [SettingProperty(\"Setting Name\", RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public string SettingVariableName { get; set; } = \"The textbox data is here\"; v2 With v2 of the API, there's multiple types of setting properties to make using them less confusing, and the settings can also be ordered by indexing them. It's also possible to format the display of the numerical values for the int and float sliders. Bool (SettingPropertyBool) [SettingPropertyBool(\"Setting Name\", Order = 0, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public bool SettingVariableName { get; set; } = true; Int (SettingPropertyInteger) // Value is displayed as \"X Denars\" [SettingPropertyInteger(\"Setting Name\", 0, 100, \"0 Denars\", Order = 1, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public int SettingVariableName { get; set; } = 25; Float (SettingPropertyFloatingInteger) // Value is displayed as a percentage [SettingPropertyFloatingInteger(\"Setting Name\", 0f, 1f, \"#0%\", Order = 2, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public bool SettingVariableName { get; set; } = 0.75; String (SettingPropertyText) // Value is displayed as a percentage [SettingPropertyText(\"Setting Name\", Order = 3, RequireRestart = false, HintText = \"Setting Explanation\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public string SettingVariableName { get; set; } = \"The textbox data is here\"; To understand how to format the strings take a look at this page for information and examples (specifically the ToString version). Dropdown (SettingPropertyDropdown) [SettingPropertyDropdown(\"Setting Name\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public DefaultDropdown<string> SettingVariableName { get; set; } = new DefaultDropdown<string>(new string[] { \"Test1\", \"Test2\", \"Test3\" }, 0); It can also use custom classes. Don't forget to override .ToString()! [SettingPropertyDropdown(\"Setting Name\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public DefaultDropdown<CustomObject> SettingVariableName { get; set; } = new DefaultDropdown<CustomObject>(new CustomObject[] { new CustomObject(\"Test1\"), new CustomObject(\"Test2\"), new CustomObject(\"Test3\") }, 0); public class CustomObject { private readonly string _value; public CustomObject(string value) => _value = value; public override string ToString() => _value; }"
  },
  "articles/MCMv3/mcmv3-fluent-builder.html": {
    "href": "articles/MCMv3/mcmv3-fluent-builder.html",
    "title": "| MCM Documentation",
    "summary": "Fluent Builder gives the ability to create Settings at runtime. This can be useful for mod specific sections that should not be displayed if the mod is not loaded. MCM provides the builder interface ISettingsBuilder and a default implementation @\"MCM.Abstractions.FluentBuilder.Implementation.DefaultSettingsBuilder?text=DefaultSettingsBuilder\". Any property is set by a Set%PropertyName% method. CreateGroup creates a property group where you can define your properties. The default Group name is 'Misc'. Use teh action delegate to configure the property group. AddBool creates a Bool property. AddInteger creates an Integer Slider property. AddFloatingInteger creates an Float Slider property. AddText creates an Textbox property. AddDropdown creates a Dropdown property. AddCustom can add a custom property. The custom property should implement one of the interfaces defined in @\"MCM.Abstractions.Settings.Definitions\" namespace. Currently there is no way of defining a custom UI Control. One of the possible fixes would be to use UIExtender library. BuildAsGlobal returns a Global setting instance. Use Register and Unregister for MCM to use it. BuildAsPerCharacter returns a PerCharacter setting instance. Use Register and Unregister for MCM to use it. The registered settings will be cleared before and after player joins the campaign, so do the register thing when the campaign was already joined in."
  },
  "articles/MCMv3/mcmv3-soft-dependency.html": {
    "href": "articles/MCMv3/mcmv3-soft-dependency.html",
    "title": "| MCM Documentation",
    "summary": "MCMv3 has a bug that requires a small workaround for it to be used as a soft dependency. Mod Developers are required to include the MCMv3.dll library inside their /bin folder. Example of usage: The recommended approach is to define a provider interface and depending on certain conditions, switch bewteen them either at the constructor stage or dynamically. Here is the final settings class that switches between the providers at the constructor stage: public class CustomSettings { private ICustomSettingsProvider _provider; public bool OverrideSomething { get => _provider.OverrideSomething; set => _provider.OverrideSomething = value; } public Settings() { var useMCM = true; try { // CustomSettings.Instance will throw an exception instead of returning null. // This is fixed in MCMv4 var instance = CustomSettings.Instance; } catch(Exception) { useMCM = false; } if (false) { _provider = CustomSettings.Instance; else { _provider = new HardcodedCustomSettings(); } } } Here is the provider interface definition and two implementations - one that uses MCM and a custom one that has some hardcoded values. public interface ICustomSettingsProvider { bool OverrideSomething { get; set; } } public class HardcodedCustomSettings : ICustomSettingsProvider { public bool OverrideSomething { get; set; } = true; } public class CustomSettings : AttributeGlobalSettings<CustomSettings>, ICustomSettingsProvider { private bool _overrideSomething = true; public override string Id { get; } = \"CustomSettings_v1\"; public override string DisplayName => TextObjectHelper.Create(\"{=CustomSettings_Name}Custom {VERSION}\", new Dictionary<string, TextObject> { { \"VERSION\", TextObjectHelper.Create(typeof(CustomSettings).Assembly.GetName().Version.ToString(3)) } }).ToString(); public override string FolderName { get; } = \"Custom\"; public override string FormatType { get; } = \"json2\"; [SettingPropertyBool(\"{=CustomSettings_Override}Override Ssomething\", RequireRestart = true, HintText = \"{=CustomSettings_OverrideDesc}If set, does something.\")] [SettingPropertyGroup(\"{=CustomSettings_General}General\")] public bool OverrideSomething { get => _overrideSomething; set { if (_overrideSomething != value) { _overrideSomething = value; OnPropertyChanged(); } } } }"
  },
  "articles/MCMv3/mcmv3.html": {
    "href": "articles/MCMv3/mcmv3.html",
    "title": "| MCM Documentation",
    "summary": "Overview MCMv3 consists of three core libraries: MCMv3 - abstraction layer. Includes v1/v2 Attribute API and a Fluent Builder API that allows to define settings at runtime. MCMv3.Implementation - common implementations. MCMv3.UI - GauntletUI implementations. MCMv3 also provides compatibility layers for other mods: MCMv3.Implementation.MBO - MBOv1/MCMv2. MCMv3.Implementation.ModLib - ModLib, pre 1.3 and post 1.3. Both compatibility layers replace the original libraries to ensure maximum compatibility with MCMv3. Supported API MCMv3 support 5 API sets: MCMv3 - main API. MBOv1 - MBOptionScreen v1.1.15 (Requires MCM.Implementation.MBO) MBOv2/MCMv2 - v2.0.4-v2.0.11 (Requires MCM.Implementation.MBO) ModLibV1 - v1.0.0-v1.0.2 (Requires MCM.Implementation.ModLib) ModLibV13 - v1.3.0-v1.4.0 (Requires MCM.Implementation.ModLib) Using with your mods You have two options as to how to use MCMv3: Integrate MCMv3 into your mod by using NuGet packet Bannerlord.MCM.Integrated Directly depend on the Nexus standalone mod and use NuGet packet Bannerlord.MCM Warning Integration is no longer supported and should be replaced with MCMv4 or newer. By integrating MCMv3 you won't need to depend on the Nexus standalone package. It will be loaded with your mod and should pick up the settings from your mod and any other mod that uses MCMv3. ModLib and MBO/MCM compatibility will not be provided. The v3 version still has sometimes issues with the integration system due to game limitations regarding being unable to load multiple versions of the same assembly (DLL). While those issues are not fixed I would suggest to depend on MCM package/Nexus mod if possible. I at least can guarantee that if the standalone MCM mod is installed, any bugs related to MCM are fixed without your need to update the integrated package. The next big release, v4, will not offer an integrated version in favor of the determinism and stability of relying upon a standalone mod. You also need to include this to your SubModules.xml! <SubModule> <Name value=\"MCMv3 Integrated Loader\"/> <DLLName value=\"MCMv3.dll\"/> <SubModuleClassType value=\"MCM.IntegratedLoaderSubModule\"/> <Tags/> </SubModule> By depending on the standalone module the experience is basically the same as to ModLib. You only use the MCMv3 abstraction layer and the Nexus standalone mod will ensure that your settings are displayed. Types of settings As of now, Mod Option mods provided Global options that are shared across different games/saves. MCMv3 introduces a second type of settings - PerCharacter, it will be unique for each character and will be shared across saves with the same character. Included Settings Formats and implementing your own MCMv3.Implementation provides json and xml file formats. You can define your own file formats and take full control of how the settings are saved/loaded by implementing an interface that... implements @\"MCM.Abstractions.Settings.Formats.ISettingsFormat?text=ISettingsFormat\" and @\"MCM.Abstractions.IDependency?text=IDependency\". public interface IYamlSettingsFormat : ISettingsFormat, IDependency { } [Version(\"e1.0.0\", 1)] internal class YamlSettingsFormat : IYamlSettingsFormat { } Presets The setting support custom presets! Attribute API The Attribute API based settings will provide a 'Default' preset that can be used to revert the options to their default values. To override the 'Default' preset or add your custom presets, override GetAvailablePresets(), here's an example. public override IDictionary<string, Func<BaseSettings>> GetAvailablePresets() { var basePresets = base.GetAvailablePresets(); // include the 'Default' preset that MCM provides basePresets.Add(\"Reverse\", () => new CustomSettings() { Property1 = false, Property2 = true }); basePresets.Add(\"False\", () => new CustomSettings() { Property1 = false, Property2 = false }); basePresets.Add(\"True\", () => new CustomSettings() { Property1 = true, Property2 = true }); return basePresets; } Fluent API The Fluent Builder does not support Presets in v3, but it's a planned feature for v4! Localization Attribute API Both property Name and HintText support game's localization system, this means that you can use such code [SettingPropertyBool(\"{=DvfsSDF}Property Sample\", HintText = \"{=DnfhFD}Sample Hint Text.\")] [SettingPropertyGroup(\"{=JFgbsdg}Group Sample\")] You also can use the localization system for nested groups! [SettingPropertyGroup(\"{=JFgbsdg}Group Sample\\{=GDgsdfj}Nested Group Sample\")] INotifyPropertyChanged The settings implement the INotifyPropertyChanged interface. MCM subscribes to it and will refresh the UI if any value has changed. MCM will also trigger PropertyChanged event when the setting are saved by providing BaseSettings.SaveTriggered constant with value SAVE_TRIGGERED. IRef IRef is an interface that acts as a link to the actual values that classes like Fluent Builder uses. MCMv3 has two implementations: @\"MCM.Abstractions.Ref.PropertyRef?text=PropertyRef\" - links to an actual property (PropertyRef(PropertyInfo propInfo, object instance)). @\"MCM.Abstractions.Ref.ProxyRef`1?text=ProxyRef<T>\" - links to get/set actions (ProxyRef(Func<T> getter, Action<T>? setter)) that will set/return whatever you want. Defining Settings Check this page for using the Attribute definition Check this page for using the Fluent Builder Example of Settings definition Attribute API internal sealed class MCMUISettings : AttributeGlobalSettings<MCMUISettings> // AttributePerCharacterSettings<MCMUISettings> { private bool _useStandardOptionScreen = false; public override string Id => \"MCMUI_v3\"; public override string DisplayName => $\"MCM UI Impl. {typeof(MCMUISettings).Assembly.GetName().Version.ToString(3)}\"; public override string FolderName => \"MCM\"; public override string Format => \"json\"; [SettingPropertyBool(\"Use Standard Option Screen\", Order = 1, RequireRestart = false, HintText = \"Use standard Options screen instead of using an external.\")] [SettingPropertyGroup(\"General\")] public bool UseStandardOptionScreen { get => _useStandardOptionScreen; set { if (_useStandardOptionScreen != value) { _useStandardOptionScreen = value; OnPropertyChanged(); } } } } Fluent API bool _boolValue = false; int _intValue = 1; float _floatValue = 0f; string _stringValue = string.Empty; var builder = new DefaultSettingsBuilder(\"test_v1\", \"Test Fluent Settings\") .SetFormat(\"xml\") .SetFolderName(string.Empty) .SetSubFolder(string.Empty) .CreateGroup(\"Testing 1\", groupBuilder => groupBuilder .AddBool(\"Check Box\", new ProxyRef<bool>(() => _boolValue, o => _boolValue = o), boolBuilder => boolBuilder .SetHintText(\"Test\"))) .CreateGroup(\"Testing 2\", groupBuilder => groupBuilder .AddInteger(\"Integer\", 0, 10, new ProxyRef<int>(() => _intValue, o => _intValue = o), integerBuilder => integerBuilder .SetHintText(\"Testing\")) .AddFloatingInteger(\"Floating Integer\", 0, 10, new ProxyRef<float>(() => _floatValue, o => _floatValue = o), floatingBuilder => floatingBuilder .SetRequireRestart(true) .SetHintText(\"Test\"))) .CreateGroup(\"Testing 3\", groupBuilder => groupBuilder .AddText(\"Test\", new ProxyRef<string>(() => _stringValue, o => _stringValue = o), null)); var globalSettings = builder.BuildAsGlobal(); globalSettings.Register(); globalSettings.Unregister(); var perCharacterSettings = builder.BuildAsPerCharacter(); perCharacterSettings.Register(); perCharacterSettings.Unregister(); Translating MCM Just create a module and include in the module folder root folders ModuleData/Languages and include the translations of the following files: std_MCM.xml std_MCM_Implementation.xml std_MCM_MBO.xml std_MCM_ModLib.xml std_MCM_UI.xml The game will load them automatically! Migrating to v3 ModLib v1 (1.0.0-1.0.2) [XmlElement] attribute is not required Namespace of SettingPropertyAttribute changed to MCM.Abstractions.Attributes.v1 SettingPropertyAttribute.EditableMinValue and SettingPropertyAttribute.EditableMaxValue were removed SettingPropertyAttribute.HintText is an attribute optional parameter MCM's SettingPropertyAttribute introduces new properties Order and RequireRestart Namespace of SettingPropertyGroupAttribute changed to MCM.Abstractions.Attributes SettingPropertyGroupAttribute.IsMainToggle is an attribute optional parameter ModLib.SettingsBase needs to be changed to @\"MCM.Abstractions.Settings.Base.Global.AttributeGlobalSettings`1?text=AttributeGlobalSettings<T>\" ModName was renamed to DisplayName ModuleFolderName was renamed to FolderName, no longer required ModLib v13 (1.3 and beyond) [XmlElement] attribute is not required Namespace of SettingPropertyAttribute changed to MCM.Abstractions.Attributes.v1 SettingPropertyAttribute.EditableMinValue and SettingPropertyAttribute.EditableMaxValue were removed SettingPropertyAttribute.HintText is an attribute optional parameter MCM's SettingPropertyAttribute introduces new properties Order and RequireRestart Namespace of SettingPropertyGroupAttribute changed to MCM.Abstractions.Attributes SettingPropertyGroupAttribute.IsMainToggle is an attribute optional parameter ModLib.Definitions.SettingsBase needs to be changed to @\"MCM.Abstractions.Settings.Base.Global.AttributeGlobalSettings`1?text=AttributeGlobalSettings<T>\" ModName was renamed to DisplayName ModuleFolderName was renamed to FolderName, no longer required MBOv1 (MBO 1.0.15 or lower) Attributes changed its namespace from MBOptionScreen.Attributes to MCM.Abstractions.Attributes MBOptionScreen.Settings.AttributeSettings<T> needs to be changed to @\"MCM.Abstractions.Settings.Base.Global.AttributeGlobalSettings`1?text=AttributeGlobalSettings<T>\" ModName was renamed to DisplayName ModuleFolderName was renamed to FolderName, no longer required MCMv2 (MCM v2.0.10 or lower) Attributes changed its namespace from MBOptionScreen.Attributes to MCM.Abstractions.Attributes MBOptionScreen.Settings.AttributeSettings<T> needs to be changed to @\"MCM.Abstractions.Settings.Base.Global.AttributeGlobalSettings`1?text=AttributeGlobalSettings<T>\" ModName was renamed to DisplayName ModuleFolderName was renamed to FolderName, no longer required"
  },
  "articles/MCMv4/mcmv4-attributes.html": {
    "href": "articles/MCMv4/mcmv4-attributes.html",
    "title": "| MCM Documentation",
    "summary": "Each setting you want to add to the menu has to be marked with an attribute. You can additionally group settings by adding the SettingPropertyGroup attribute. '/' is used as the default separator. Right now, the mod provides these types in the setting menu: Bool Int Slider / Textbox Float Slider / Textbox Textbox Dropdown Button v1 With v1 of the API, SettingProperty has multiple constructors, each designed for the specific value it represents. Bool [SettingProperty(\"Setting Name\", RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public bool SettingVariableName { get; set; } = true; Int [SettingProperty(\"Setting Name\", minValue: 0, maxValue: 10, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public int SettingVariableName { get; set; } = 5; Float [SettingProperty(\"Setting Name\", minValue: 0f, maxValue: 0.5f, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public float SettingVariableName { get; set; } = 0.2f; String [SettingProperty(\"Setting Name\", RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public string SettingVariableName { get; set; } = \"The textbox data is here\"; v2 With v2 of the API, there's multiple types of setting properties to make using them less confusing, and the settings can also be ordered by indexing them. It's also possible to format the display of the numerical values for the int and float sliders. Bool (SettingPropertyBool) [SettingPropertyBool(\"Setting Name\", Order = 0, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public bool SettingVariableName { get; set; } = true; Int (SettingPropertyInteger) // Value is displayed as \"X Denars\" [SettingPropertyInteger(\"Setting Name\", 0, 100, \"0 Denars\", Order = 1, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public int SettingVariableName { get; set; } = 25; Float (SettingPropertyFloatingInteger) // Value is displayed as a percentage [SettingPropertyFloatingInteger(\"Setting Name\", 0f, 1f, \"#0%\", Order = 2, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public float SettingVariableName { get; set; } = 0.75; String (SettingPropertyText) // Value is displayed as a percentage [SettingPropertyText(\"Setting Name\", Order = 3, RequireRestart = false, HintText = \"Setting Explanation\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public string SettingVariableName { get; set; } = \"The textbox data is here\"; To understand how to format the strings take a look at this page for information and examples (specifically the ToString version). Dropdown (SettingPropertyDropdown) [SettingPropertyDropdown(\"Setting Name\", Order = 4, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public DropdownDefault<string> SettingVariableName { get; set; } = new DropdownDefault<string>(new string[] { \"Test1\", \"Test2\", \"Test3\" }, selectedIndex: 0); It can also use custom classes. Don't forget to override .ToString()! [SettingPropertyDropdown(\"Setting Name\", Order = 5, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public DropdownDefault <CustomObject> SettingVariableName { get; set; } = new DropdownDefault <CustomObject>(new CustomObject[] { new CustomObject(\"Test1\"), new CustomObject(\"Test2\"), new CustomObject(\"Test3\") }, selectedIndex: 0); public class CustomObject { private readonly string _value; public CustomObject(string value) => _value = value; public override string ToString() => _value; } Button (SettingPropertyButton) // Value is displayed as a percentage [SettingPropertyButton(\"Setting Name\", Content = \"Press Me\", Order = 2, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public Actiom SettingVariableName { get; set; } = (() => { }); Ordering You can order properties via the Order attribute property [SettingPropertyText(\"Setting Name\", Order = 6)] public string SettingVariableName { get; set; } = \"The textbox data is here\"; Require Restart You can the game to restart when the property changes via the RequireRestart attribute property [SettingPropertyText(\"Setting Name\", RequireRestart = true)] public string SettingVariableName { get; set; } = \"The textbox data is here\"; Hint Text You can set a description to be displayed when hovering over the setting via the HintText attribute property [SettingPropertyText(\"Setting Name\", HintText = \"This is a Hint\")] public string SettingVariableName { get; set; } = \"The textbox data is here\"; Group Order You can order the setting groups via the GroupOrder attribute property [SettingPropertyText(\"Setting Name\")] [SettingPropertyGroup(\"Main Group Name\", GroupOrder = 1)] public string SettingVariableName { get; set; } = \"The textbox data is here\"; Group Toggle You can make a setting property a group toggle via the IsToggle attribute property [SettingPropertyBool(\"Main Group Name Toggle\", IsToggle = true)] [SettingPropertyGroup(\"Main Group Name\")] public bool SettingVariableName{ get; set; } = false;"
  },
  "articles/MCMv4/mcmv4-fluent-builder.html": {
    "href": "articles/MCMv4/mcmv4-fluent-builder.html",
    "title": "| MCM Documentation",
    "summary": "Overview Fluent Builder gives the ability to create Settings at runtime. This can be useful for mod specific sections that should not be displayed if the mod is not loaded. MCM provides the builder interface ISettingsBuilder and a default implementation @\"MCM.Abstractions.FluentBuilder.Implementation.DefaultSettingsBuilder?text=DefaultSettingsBuilder\". Any property is set by a Set%PropertyName% method. CreateGroup creates a property group where you can define your properties. The default Group name is 'Misc'. Use teh action delegate to configure the property group. AddBool creates a Bool property. AddInteger creates an Integer Slider property. AddFloatingInteger creates an Float Slider property. AddText creates an Textbox property. AddDropdown creates a Dropdown property. AddButton creates a Button property. AddCustom can add a custom property. The custom property should implement one of the interfaces defined in @\"MCM.Abstractions.Settings.Definitions\" namespace. Currently there is no way of defining a custom UI Control. One of the possible fixes would be to use UIExtender library. CreatePreset creates a new Preset. SetPropertyValue sets an existing property value. BuildAsGlobal returns a Global setting instance. Use Register and Unregister for MCM to use it. BuildAsPerCharacter returns a PerCharacter setting instance. Use Register and Unregister for MCM to use it. The registered settings will be cleared before and after player joins the campaign, so do the register thing when the campaign was already joined in. Example TrainingTweak - mimics the standard MCM Global Settings flow."
  },
  "articles/MCMv4/mcmv4-migrating-from-mcmv3.html": {
    "href": "articles/MCMv4/mcmv4-migrating-from-mcmv3.html",
    "title": "| MCM Documentation",
    "summary": "Notable changes: MCMv4 depends on Bannerlord.Harmony, Bannerlord.ButterLib and Bannerlord.UIExtenderEx. Dropped MCM's dependency injection abstraction in favor of Microsoft.DependencyInjection that ButterLib provides. Added support for MCMv3 FluentAPI now supports Presets. PerCharacter settings are replaced by PerSave. They are stored in the save file itself. When MCM is removed, the save file will still be playable. Basically, they do not brick the saves. BaseSettings.Format was renamed to BaseSettings.FormatType. Added new field BaseSettings.DiscoveryType that replaces BaseSettings.Discoverer. Removed BaseSettings.GetSettingPropertyGroups and BaseSettings.GetUnsortedSettingPropertyGroups. Use BaseSettingsExtensions. Fluent settings are not stored in the AppDomain dictionary anymore SettingPropertyGroupAttribute.IsMainToggle is mooved to SettingPropertyBoolAttribute.IsToggle Added a second json formatter json2 that serializes the dropdown as an integer instead of a structure with SelectedIndex property Added a settings screen for ButterLib"
  },
  "articles/MCMv4/mcmv4-soft-dependency.html": {
    "href": "articles/MCMv4/mcmv4-soft-dependency.html",
    "title": "| MCM Documentation",
    "summary": "MCMv4 has no issues with it being used as a soft dependency. Mod Developers are required to include the MCMv4.dll library inside their /bin folder. MCMv4.dll now includes the implementation details, so it can now Load/Save settings without the Standalone module. The Standalone module is now used to provide the UI implementation of MCMv4. You don't need it if the settings are changed only programmatically. Example of usage: The recommended approach is to define a provider interface and depending on certain conditions, switch between them either at the constructor stage or dynamically. Here is the final settings class that switches between the providers at the constructor stage: public class CustomSettings { private ICustomSettingsProvider _provider; public bool OverrideSomething { get => _provider.OverrideSomething; set => _provider.OverrideSomething = value; } public Settings() { if (CustomSettings.Instance is not null) { _provider = CustomSettings.Instance; } // CustomSettings.Instance will return null if something unexpected happened. else { _provider = new HardcodedCustomSettings(); } } } Here is the provider interface definition and two implementations - one that uses MCM and a custom one that has some hardcoded values. public interface ICustomSettingsProvider { bool OverrideSomething { get; set; } } public class HardcodedCustomSettings : ICustomSettingsProvider { public bool OverrideSomething { get; set; } = true; } public class CustomSettings : AttributeGlobalSettings<CustomSettings>, ICustomSettingsProvider { private bool _overrideSomething = true; public override string Id { get; } = \"CustomSettings_v1\"; public override string DisplayName => TextObjectHelper.Create(\"{=CustomSettings_Name}Custom {VERSION}\", new Dictionary<string, TextObject> { { \"VERSION\", TextObjectHelper.Create(typeof(CustomSettings).Assembly.GetName().Version.ToString(3)) } }).ToString(); public override string FolderName { get; } = \"Custom\"; public override string FormatType { get; } = \"json2\"; [SettingPropertyBool(\"{=CustomSettings_Override}Override Something\", RequireRestart = true, HintText = \"{=CustomSettings_OverrideDesc}If set, does something.\")] [SettingPropertyGroup(\"{=CustomSettings_General}General\")] public bool OverrideSomething { get => _overrideSomething; set { if (_overrideSomething != value) { _overrideSomething = value; OnPropertyChanged(); } } } }"
  },
  "articles/MCMv4/mcmv4.html": {
    "href": "articles/MCMv4/mcmv4.html",
    "title": "| MCM Documentation",
    "summary": "Overview MCMv4 consists of two libraries: MCMv4 - Core. Includes v1/v2 Attribute API and a Fluent Builder API that allows to define settings at runtime. Includes a basic implementation of all abstract interfaces. MCMv4.UI - GauntletUI implementations. MCMv4 also provides compatibility layers for other API's (Modules): MCM.Adapter.MBO - MBOv1/MCMv2. MCM.Adapter.MCMv3 - MCMv3. MCM.Adapter.ModLib - ModLib, pre 1.3 and post 1.3. The compatibility layers replace the original libraries to ensure maximum compatibility with MCM. Installation Players Requires Bannerlord.Harmony, Bannerlord.UIExtenderEx, Bannerlord.ButterLib. Developers Add this to your .csproj. Please not that IncludeAssets=\"compile\" is very important! <ItemGroup> <PackageReference Include=\"Bannerlord.MCM\" Version=\"4.3.16\" IncludeAssets=\"compile\" /> </ItemGroup> Supported API MCMv4 support 6 API sets: MCMv4 - main API. MBOv1 - MBOptionScreen v1.1.15 (Requires MCM.Adapter.MBO) MBOv2/MCMv2 - v2.0.10 (Requires MCM.Adapter.MBO) MCMv3 - v3.1.9 (Requires MCM.Adapter.MCMv3) ModLibV1 - v1.0.0-v1.0.2 (Requires MCM.Adapter.ModLib) ModLibV13 - v1.3.0-v1.4.0 (Requires MCM.Adapter.ModLib) Using with your mods You have two options as to how to use MCMv4: Include MCMv4 into your mod /bin folder by using NuGet packet Bannerlord.MCM. Also, add a SubModule entry in SubModules.xml. Directly depend on the NexusMods Standalone mod and use NuGet packet Bannerlord.MCM. Don't include anything in your /bin folder from MCM. By including MCMv4 you will be able to save/load settings programmatically, without having the UI Options screen when the Standalone module is not installed. ... <SubModules> <SubModule> <Name value=\"MCMv4\" /> <DLLName value=\"MCMv4.dll\" /> <SubModuleClassType value=\"MCM.MCMSubModule\" /> <Tags /> </SubModule> <SubModule> <Name value=\"MCMv4 Basic Implementation\" /> <DLLName value=\"MCMv4.dll\" /> <SubModuleClassType value=\"MCM.Implementation.MCMImplementationSubModule\" /> <Tags /> </SubModule> </SubModules> ... By depending on the standalone module the experience is basically the same as with ModLib. The Nexus standalone module will ensure that your settings are displayed correctly. You also need to add Bannerlord.MBOptionScreen as a dependency to your SubModules.xml! ... <DependedModules> <DependedModule Id=\"Bannerlord.MBOptionScreen\"/> </DependedModules> ... Types of settings As of now, Mod Option libraries provided Global options that are shared across different games/saves. MCMv4 introduces a second type of settings - PerSave. They are stored in the save file itself. When MCM is removed, the save file will still be playable. Basically, they do not brick the saves. Be aware that saving even once without MCM will wipe all settings from the save file permanently. Included Settings Formats and implementing your own Warning In MCMv4, the default settings provider is none, this means that your settings won't be saved to disk unless you override Settings.FormatType! MCMv4 provides json (json and json2 internally) and xml file formats. You can define your own file formats and take full control of how the settings are saved/loaded by implementing the interface @\"MCM.Abstractions.Settings.Formats.ISettingsFormat?text=ISettingsFormat\". internal class YamlSettingsFormat : ISettingsFormat { ... public IEnumerable<string> FormatTypes { get; } = new [] { \"your_prefix_yaml\", \"your_prefix_yml\" }; ... } You also need to register the new interface: // In your MBSubModuleBase override protected override void OnSubModuleLoad() { base.OnSubModuleLoad(); if (this.GetServiceContainer() is not null services) { services.AddSettingsFormat<YamlSettingsFormat>(); } } Usage: public abstract class YamlSettings : GlobalSettings<YamlSettings> { public override string FormatType { get; } = \"your_prefix_yaml\"; } Presets The setting support custom presets! Attribute API The Attribute API based settings will provide a 'Default' preset that can be used to revert the options to their default values. To override the 'Default' preset or add your custom presets, override GetAvailablePresets(), here's an example. public override IDictionary<string, Func<BaseSettings>> GetAvailablePresets() { var basePresets = base.GetAvailablePresets(); // include the 'Default' preset that MCM provides basePresets.Add(\"Reverse\", () => new CustomSettings() { Property1 = false, Property2 = true }); basePresets.Add(\"False\", () => new CustomSettings() { Property1 = false, Property2 = false }); basePresets.Add(\"True\", () => new CustomSettings() { Property1 = true, Property2 = true }); return basePresets; } Fluent API var builder = BaseSettingsBuilder.Create(\"Testing_v1\", \"Testing Fluent API Presets\")! ... .CreatePreset(\"Test\", presetBuilder => presetBuilder .SetPropertyValue(\"prop_1\", true) .SetPropertyValue(\"prop_2\", 2) .SetPropertyValue(\"prop_3\", 1.5F) .SetPropertyValue(\"prop_4\", \"HueHueHue\")); Localization Attribute API Both property Name and HintText support game's localization system, this means that you can use such code [SettingPropertyBool(\"{=DvfsSDF}Property Sample\", HintText = \"{=DnfhFD}Sample Hint Text.\")] [SettingPropertyGroup(\"{=JFgbsdg}Group Sample\")] You also can use the localization system for nested groups! [SettingPropertyGroup(\"{=JFgbsdg}Group Sample\\{=GDgsdfj}Nested Group Sample\")] INotifyPropertyChanged The settings implement the INotifyPropertyChanged interface. MCM subscribes to it and will refresh the UI if any value has changed. MCM will also trigger PropertyChanged event when the setting are saved by providing BaseSettings.SaveTriggered constant with value SAVE_TRIGGERED. IRef IRef is an interface that acts as a link to the actual values that classes like Fluent Builder uses. MCMv4 has several implementations: @\"MCM.Abstractions.Ref.PropertyRef?text=PropertyRef\" - links to an actual property (PropertyRef(PropertyInfo propInfo, object instance)). @\"MCM.Abstractions.Ref.ProxyRef`1?text=ProxyRef<T>\" - links to get/set actions (ProxyRef(Func<T> getter, Action<T>? setter)) that will set/return whatever you want. @\"MCM.Abstractions.Ref.StorageRef?text=StorageRef\" - holds a value within itself. Defining Settings Check this page for using the Attribute definition Check this page for using the Fluent Builder Example of Settings definition Warning In MCMv4, the default settings provider is none, this means that your settings won't be saved to disk unless you override Settings.FormatType! Attribute API internal sealed class MCMUISettings : AttributeGlobalSettings<MCMUISettings> // AttributePerSaveSettings<MCMUISettings> { private bool _useStandardOptionScreen = false; public override string Id => \"MCMUI_v3\"; public override string DisplayName => $\"MCM UI Impl. {typeof(MCMUISettings).Assembly.GetName().Version.ToString(3)}\"; public override string FolderName => \"MCM\"; public override string FormatType => \"json2\"; [SettingPropertyBool(\"Use Standard Option Screen\", Order = 1, RequireRestart = false, HintText = \"Use standard Options screen instead of using an external.\")] [SettingPropertyGroup(\"General\")] public bool UseStandardOptionScreen { get => _useStandardOptionScreen; set { if (_useStandardOptionScreen != value) { _useStandardOptionScreen = value; OnPropertyChanged(); } } } } Fluent API bool _boolValue = false; int _intValue = 1; float _floatValue = 0f; string _stringValue = \"\"; var builder = BaseSettingsBuilder.Create(\"Testing_Global_v4\", \"MCMv4 Testing Fluent Settings\")! .SetFormat(\"xml\") .SetFolderName(string.Empty) .SetSubFolder(string.Empty) .CreateGroup(\"Testing 1\", groupBuilder => groupBuilder .AddBool(\"prop_1\", \"Check Box\", new ProxyRef<bool>(() => _boolValue, o => _boolValue = o), boolBuilder => boolBuilder .SetHintText(\"Test\") .SetRequireRestart(false))) .CreateGroup(\"Testing 2\", groupBuilder => groupBuilder .AddInteger(\"prop_2\", \"Integer\", 0, 10, new ProxyRef<int>(() => _intValue, o => _intValue = o), integerBuilder => integerBuilder .SetHintText(\"Testing\")) .AddFloatingInteger(\"prop_3\", \"Floating Integer\", 0, 10, new ProxyRef<float>(() => _floatValue, o => _floatValue = o), floatingBuilder => floatingBuilder .SetRequireRestart(true) .SetHintText(\"Test\"))) .CreateGroup(\"Testing 3\", groupBuilder => groupBuilder .AddText(\"prop_4\", \"Test\", new ProxyRef<string>(() => _stringValue, o => _stringValue = o), null)) .CreatePreset(\"Test\", presetBuilder => presetBuilder .SetPropertyValue(\"prop_1\", true) .SetPropertyValue(\"prop_2\", 2) .SetPropertyValue(\"prop_3\", 1.5F) .SetPropertyValue(\"prop_4\", \"HueHueHue\")); var globalSettings = builder.BuildAsGlobal(); globalSettings.Register(); globalSettings.Unregister(); var perSaveSettings = builder.BuildAsPerSave(); perSaveSettings.Register(); perSaveSettings.Unregister(); Translating MCM Just create a module and include in the module folder root folders ModuleData/Languages and include the translations of the following files: sta_strings.xml The game will load them automatically! Migrating from v3 Check this page! Notes Settings.Instance is available after OnSubModuleLoad, so the earliest you can use it is inside OnBeforeInitialModuleScreenSetAsRoot"
  },
  "articles/MCMv5/mcmv5-attributes.html": {
    "href": "articles/MCMv5/mcmv5-attributes.html",
    "title": "| MCM Documentation",
    "summary": "Each setting you want to add to the menu has to be marked with an attribute. You can additionally group settings by adding the SettingPropertyGroup attribute. '/' is used as the default separator. Right now, the mod provides these types in the setting menu: Bool Int Slider / Textbox Float Slider / Textbox Textbox Dropdown Button v1 With v1 of the API, SettingProperty has multiple constructors, each designed for the specific value it represents. Bool [SettingProperty(\"Setting Name\", RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public bool SettingVariableName { get; set; } = true; Int [SettingProperty(\"Setting Name\", minValue: 0, maxValue: 10, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public int SettingVariableName { get; set; } = 5; Float [SettingProperty(\"Setting Name\", minValue: 0f, maxValue: 0.5f, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public float SettingVariableName { get; set; } = 0.2f; String [SettingProperty(\"Setting Name\", RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public string SettingVariableName { get; set; } = \"The textbox data is here\"; v2 With v2 of the API, there's multiple types of setting properties to make using them less confusing, and the settings can also be ordered by indexing them. It's also possible to format the display of the numerical values for the int and float sliders. Bool (SettingPropertyBool) [SettingPropertyBool(\"Setting Name\", Order = 0, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public bool SettingVariableName { get; set; } = true; Int (SettingPropertyInteger) // Value is displayed as \"X Denars\" [SettingPropertyInteger(\"Setting Name\", 0, 100, \"0 Denars\", Order = 1, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public int SettingVariableName { get; set; } = 25; Float (SettingPropertyFloatingInteger) // Value is displayed as a percentage [SettingPropertyFloatingInteger(\"Setting Name\", 0f, 1f, \"#0%\", Order = 2, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public float SettingVariableName { get; set; } = 0.75; String (SettingPropertyText) // Value is displayed as a percentage [SettingPropertyText(\"Setting Name\", Order = 3, RequireRestart = false, HintText = \"Setting Explanation\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public string SettingVariableName { get; set; } = \"The textbox data is here\"; To understand how to format the strings take a look at this page for information and examples (specifically the ToString version). Dropdown (SettingPropertyDropdown) [SettingPropertyDropdown(\"Setting Name\", Order = 4, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public Dropdown<string> SettingVariableName { get; set; } = new Dropdown<string>(new string[] { \"Test1\", \"Test2\", \"Test3\" }, selectedIndex: 0); It can also use custom classes. Don't forget to override .ToString()! [SettingPropertyDropdown(\"Setting Name\", Order = 5, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public Dropdown<CustomObject> SettingVariableName { get; set; } = new Dropdown<CustomObject>(new CustomObject[] { new CustomObject(\"Test1\"), new CustomObject(\"Test2\"), new CustomObject(\"Test3\") }, selectedIndex: 0); public class CustomObject { private readonly string _value; public CustomObject(string value) => _value = value; public override string ToString() => _value; } Button (SettingPropertyButton) // Value is displayed as a percentage [SettingPropertyButton(\"Setting Name\", Content = \"Press Me\", Order = 2, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public Actiom SettingVariableName { get; set; } = (() => { }); Ordering You can order properties via the Order attribute property [SettingPropertyText(\"Setting Name\", Order = 6)] public string SettingVariableName { get; set; } = \"The textbox data is here\"; Require Restart You can the game to restart when the property changes via the RequireRestart attribute property [SettingPropertyText(\"Setting Name\", RequireRestart = true)] public string SettingVariableName { get; set; } = \"The textbox data is here\"; Hint Text You can set a description to be displayed when hovering over the setting via the HintText attribute property [SettingPropertyText(\"Setting Name\", HintText = \"This is a Hint\")] public string SettingVariableName { get; set; } = \"The textbox data is here\"; Group Order You can order the setting groups via the GroupOrder attribute property [SettingPropertyText(\"Setting Name\")] [SettingPropertyGroup(\"Main Group Name\", GroupOrder = 1)] public string SettingVariableName { get; set; } = \"The textbox data is here\"; Group Toggle You can make a setting property a group toggle via the IsToggle attribute property [SettingPropertyBool(\"Main Group Name Toggle\", IsToggle = true)] [SettingPropertyGroup(\"Main Group Name\")] public bool SettingVariableName{ get; set; } = false;"
  },
  "articles/MCMv5/mcmv5-fluent-builder.html": {
    "href": "articles/MCMv5/mcmv5-fluent-builder.html",
    "title": "| MCM Documentation",
    "summary": "Overview Fluent Builder gives the ability to create Settings at runtime. This can be useful for mod specific sections that should not be displayed if the mod is not loaded. MCM provides the builder interface ISettingsBuilder and a default implementation @\"MCM.Abstractions.FluentBuilder.Implementation.DefaultSettingsBuilder?text=DefaultSettingsBuilder\". Any property is set by a Set%PropertyName% method. CreateGroup creates a property group where you can define your properties. The default Group name is 'Misc'. Use teh action delegate to configure the property group. AddBool creates a Bool property. AddInteger creates an Integer Slider property. AddFloatingInteger creates an Float Slider property. AddText creates an Textbox property. AddDropdown creates a Dropdown property. AddButton creates a Button property. AddCustom can add a custom property. The custom property should implement one of the interfaces defined in @\"MCM.Abstractions.Settings.Definitions\" namespace. Currently there is no way of defining a custom UI Control. One of the possible fixes would be to use UIExtender library. CreatePreset creates a new Preset. SetPropertyValue sets an existing property value. BuildAsGlobal returns a Global setting instance. Use Register and Unregister for MCM to use it. BuildAsPerCampaign returns a PerCampaign setting instance. Use Register and Unregister for MCM to use it. The registered settings will be cleared before and after player joins the campaign, so do the register thing when the campaign was already joined in. BuildAsPerSave returns a PerSave setting instance. Use Register and Unregister for MCM to use it. The registered settings will be cleared before and after player joins the campaign, so do the register thing when the campaign was already joined in. Notes You can access the default Preset by using builder.CreatePreset(BaseSettings.DefaultPresetId, BaseSettings.DefaultPresetName, pBuilder => { }); Example TrainingTweak - mimics the standard MCM Global Settings flow. ButterEquipped - uses ome of the latest C# features and is structured."
  },
  "articles/MCMv5/mcmv5-migrating-from-mcmv4.html": {
    "href": "articles/MCMv5/mcmv5-migrating-from-mcmv4.html",
    "title": "| MCM Documentation",
    "summary": "Notable changes: MCM has moved a lot of namespaces to split it's codebase into 4 parts MCM.Common that contains the most basic MCM classes. MCM.Abstractions that contains core MCM code that is fully independent from the game's abstractions. MCM.Implementation that contains default implementation classes for MCM's abstractions. MCM.Bannerlord contains the code that glues together MCM and Bannerlord. By making most of the MCM's code independent from the game's abstractions we ensure that MCM won't break in a way that we can't fix without breaking our public ABI and API. DropdownDefault<> was renamed to Dropdown<> Preset system was changed: GetAvailablePresets was renamed to GetBuiltInPresets The signature changed. Instead of a dictionary with a lambda - constructor inside a class MemorySettingsPreset is used with a similar signature. Check MCMv5 docs for the new usage. Implementation SubModule was renamed from MCM.Implementation.MCMImplementationSubModule to MCM.Internal.MCMImplementationSubModule"
  },
  "articles/MCMv5/mcmv5-persistent-presets.html": {
    "href": "articles/MCMv5/mcmv5-persistent-presets.html",
    "title": "| MCM Documentation",
    "summary": "Overview MCMv5 introduces a new feature that allows players to add their own presets your settings. As of v5.0.0, there isn't a way to create custom presets or import/export them. We added the necessary backend code, but not the frontend. Stay in touch!"
  },
  "articles/MCMv5/mcmv5-soft-dependency.html": {
    "href": "articles/MCMv5/mcmv5-soft-dependency.html",
    "title": "| MCM Documentation",
    "summary": "MCMv5 has no issues with it being used as a soft dependency. Mod Developers are required to include the MCMv5.dll library inside their /bin folder. If you are familiar with ILRepack or similar tools, you can pack MCMv5.dll inside yor main .dll to avoid some issues like shared MCMv5.dll loading. It can Load/Save settings without the Standalone module. The Standalone module is used to provide the UI implementation of MCMv5. You don't need it if the settings are changed only programmatically. Example of usage: The recommended approach is to define a provider interface and depending on certain conditions, switch between them either at the constructor stage or dynamically. Here is the final settings class that switches between the providers at the constructor stage: public class CustomSettings { private ICustomSettingsProvider _provider; public bool OverrideSomething { get => _provider.OverrideSomething; set => _provider.OverrideSomething = value; } public Settings() { if (CustomSettings.Instance is not null) { _provider = CustomSettings.Instance; } // CustomSettings.Instance will return null if something unexpected happened. else { _provider = new HardcodedCustomSettings(); } } } Here is the provider interface definition and two implementations - one that uses MCM and a custom one that has some hardcoded values. public interface ICustomSettingsProvider { bool OverrideSomething { get; set; } } public class HardcodedCustomSettings : ICustomSettingsProvider { public bool OverrideSomething { get; set; } = true; } public class CustomSettings : AttributeGlobalSettings<CustomSettings>, ICustomSettingsProvider { private bool _overrideSomething = true; public override string Id { get; } = \"CustomSettings_v1\"; public override string DisplayName => new TextObject(\"{=CustomSettings_Name}Custom {VERSION}\", new Dictionary<string, object> { { \"VERSION\", typeof(CustomSettings).Assembly.GetName().Version?.ToString(3) ?? \"ERROR\" } }).ToString(); public override string FolderName { get; } = \"Custom\"; public override string FormatType { get; } = \"json\"; [SettingPropertyBool(\"{=CustomSettings_Override}Override Something\", RequireRestart = true, HintText = \"{=CustomSettings_OverrideDesc}If set, does something.\")] [SettingPropertyGroup(\"{=CustomSettings_General}General\")] public bool OverrideSomething { get => _overrideSomething; set { if (_overrideSomething != value) { _overrideSomething = value; OnPropertyChanged(); } } } } Do not forget to add this to your SubModule.xml so MCM can load it's code and do appropriate bootstrapping! ... <SubModules> <SubModule> <Name value=\"MCMv5\" /> <DLLName value=\"MCMv5.dll\" /> <SubModuleClassType value=\"MCM.MCMSubModule\" /> <Tags /> </SubModule> <SubModule> <Name value=\"MCMv5 Basic Implementation\" /> <DLLName value=\"MCMv5.dll\" /> <SubModuleClassType value=\"MCM.Internal.MCMImplementationSubModule\" /> <Tags /> </SubModule> </SubModules> ..."
  },
  "articles/MCMv5/mcmv5.html": {
    "href": "articles/MCMv5/mcmv5.html",
    "title": "| MCM Documentation",
    "summary": "Overview MCMv5 consists of two libraries: MCMv5 - Core. Includes v1/v2 Attribute API and a Fluent Builder API that allows to define settings at runtime. Includes a basic implementation of all abstract interfaces. MCMv5.UI - GauntletUI implementations. MCMv5 drops MCMv5 and ModLib compatibility layers. MCMv4 is dropped due to game's Release and ModLib is not backported as there are no mods that use it's API instead of MCM. Installation Players Requires Bannerlord.Harmony, Bannerlord.UIExtenderEx, Bannerlord.ButterLib. Developers Add this to your .csproj. Please not that IncludeAssets=\"compile\" is very important! <ItemGroup> <PackageReference Include=\"Bannerlord.MCM\" Version=\"5.0.0\" IncludeAssets=\"compile\" /> </ItemGroup> Using with your mods You have two options as to how to use MCMv5: Include MCMv5 into your mod /bin folder by using NuGet packet Bannerlord.MCM. Also, add a SubModule entry in SubModules.xml. Directly depend on the NexusMods Standalone mod and use NuGet packet Bannerlord.MCM. Don't include anything in your /bin folder from MCM. By including MCMv5 you will be able to save/load settings programmatically, without having the UI Options screen when the Standalone module is not installed. ... <SubModules> <SubModule> <Name value=\"MCMv5\" /> <DLLName value=\"MCMv5.dll\" /> <SubModuleClassType value=\"MCM.MCMSubModule\" /> <Tags /> </SubModule> <SubModule> <Name value=\"MCMv5 Basic Implementation\" /> <DLLName value=\"MCMv5.dll\" /> <SubModuleClassType value=\"MCM.Internal.MCMImplementationSubModule\" /> <Tags /> </SubModule> </SubModules> ... By depending on the standalone module the experience is basically the same as with ModLib. The Nexus standalone module will ensure that your settings are displayed correctly. You also need to add Bannerlord.MBOptionScreen as a dependency to your SubModules.xml! ... <DependedModules> <DependedModule Id=\"Bannerlord.MBOptionScreen\"/> </DependedModules> ... Types of settings Mod Option libraries provides two types of settings: Global - options that are shared across different games/saves PerCampaign - options that are stored near the Global options. The options will be shared across the same campaign on different save files. PerSave - options that are stored in the save file itself. When MCM is removed, the save file will still be playable. Basically, they do not brick the saves. Be aware that saving even once without MCM will wipe all settings from the save file permanently. Included Settings Formats and implementing your own Warning In MCMv5, the default settings provider is none, this means that your settings won't be saved to disk unless you override Settings.FormatType! MCMv5 provides json (json and json2 internally) and xml file formats. You can define your own file formats and take full control of how the settings are saved/loaded by implementing the interface @\"MCM.Abstractions.Settings.Formats.ISettingsFormat?text=ISettingsFormat\". internal class YamlSettingsFormat : ISettingsFormat { ... public IEnumerable<string> FormatTypes { get; } = new [] { \"your_prefix_yaml\", \"your_prefix_yml\" }; ... } You also need to register the new interface: // In your MBSubModuleBase override protected override void OnSubModuleLoad() { base.OnSubModuleLoad(); if (this.GetServiceContainer() is not null services) { services.AddSettingsFormat<YamlSettingsFormat>(); } } Usage: public abstract class YamlSettings : GlobalSettings<YamlSettings> { public override string FormatType { get; } = \"your_prefix_yaml\"; } Presets The setting support custom presets! Attribute API The Attribute API based settings will provide a 'Default' preset that can be used to revert the options to their default values. To override the 'Default' preset or add your custom presets, override GetBuiltInPresets(), here's an example. public virtual IEnumerable<ISettingsPreset> GetBuiltInPresets() { foreach (var preset in base.GetAvailablePresets()) { yield return preset; } yield return new MemorySettingsPreset(Id, \"reverse\", \"Reverse\", () => new CustomSettings { Property1 = false, Property2 = true }); yield return new MemorySettingsPreset(Id, \"false\", \"False\", () => new CustomSettings { Property1 = false, Property2 = false }); yield return new MemorySettingsPreset(Id, \"true\", \"True\", () => new CustomSettings { Property1 = true, Property2 = true }); } Fluent API var builder = BaseSettingsBuilder.Create(\"Testing_v1\", \"Testing Fluent API Presets\")! ... .CreatePreset(\"Test\", presetBuilder => presetBuilder .SetPropertyValue(\"prop_1\", true) .SetPropertyValue(\"prop_2\", 2) .SetPropertyValue(\"prop_3\", 1.5F) .SetPropertyValue(\"prop_4\", \"HueHueHue\")); Localization Attribute API Both property Name and HintText support game's localization system, this means that you can use such code [SettingPropertyBool(\"{=DvfsSDF}Property Sample\", HintText = \"{=DnfhFD}Sample Hint Text.\")] [SettingPropertyGroup(\"{=JFgbsdg}Group Sample\")] You also can use the localization system for nested groups! [SettingPropertyGroup(\"{=JFgbsdg}Group Sample\\{=GDgsdfj}Nested Group Sample\")] INotifyPropertyChanged The settings implement the INotifyPropertyChanged interface. MCM subscribes to it and will refresh the UI if any value has changed. MCM will also trigger PropertyChanged event when the setting are saved by providing BaseSettings.SaveTriggered constant with value SAVE_TRIGGERED. IRef IRef is an interface that acts as a link to the actual values that classes like Fluent Builder uses. MCMv5 has several implementations: @\"MCM.Abstractions.Ref.PropertyRef?text=PropertyRef\" - links to an actual property (PropertyRef(PropertyInfo propInfo, object instance)). @\"MCM.Abstractions.Ref.ProxyRef`1?text=ProxyRef<T>\" - links to get/set actions (ProxyRef(Func<T> getter, Action<T>? setter)) that will set/return whatever you want. @\"MCM.Abstractions.Ref.StorageRef?text=StorageRef\" - holds a value within itself. Defining Settings Check this page for using the Attribute definition Check this page for using the Fluent Builder Example of Settings definition Warning In MCMv5, the default settings provider is none, this means that your settings won't be saved to disk unless you override Settings.FormatType! Attribute API internal sealed class MCMUISettings : AttributeGlobalSettings<MCMUISettings> // AttributePerSaveSettings<MCMUISettings> AttributePerCampaignSettings<MCMUISettings> { private bool _useStandardOptionScreen = false; public override string Id => \"MCMUI_v5\"; public override string DisplayName => $\"MCM UI Impl. {typeof(MCMUISettings).Assembly.GetName().Version.ToString(3)}\"; public override string FolderName => \"MCM\"; public override string FormatType => \"json\"; [SettingPropertyBool(\"Use Standard Option Screen\", Order = 1, RequireRestart = false, HintText = \"Use standard Options screen instead of using an external.\")] [SettingPropertyGroup(\"General\")] public bool UseStandardOptionScreen { get => _useStandardOptionScreen; set { if (_useStandardOptionScreen != value) { _useStandardOptionScreen = value; OnPropertyChanged(); } } } } Fluent API bool _boolValue = false; int _intValue = 1; float _floatValue = 0f; string _stringValue = \"\"; var builder = BaseSettingsBuilder.Create(\"Testing_Global_v5\", \"MCMv5 Testing Fluent Settings\")! .SetFormat(\"xml\") .SetFolderName(string.Empty) .SetSubFolder(string.Empty) .CreateGroup(\"Testing 1\", groupBuilder => groupBuilder .AddBool(\"prop_1\", \"Check Box\", new ProxyRef<bool>(() => _boolValue, o => _boolValue = o), boolBuilder => boolBuilder .SetHintText(\"Test\") .SetRequireRestart(false))) .CreateGroup(\"Testing 2\", groupBuilder => groupBuilder .AddInteger(\"prop_2\", \"Integer\", 0, 10, new ProxyRef<int>(() => _intValue, o => _intValue = o), integerBuilder => integerBuilder .SetHintText(\"Testing\")) .AddFloatingInteger(\"prop_3\", \"Floating Integer\", 0, 10, new ProxyRef<float>(() => _floatValue, o => _floatValue = o), floatingBuilder => floatingBuilder .SetRequireRestart(true) .SetHintText(\"Test\"))) .CreateGroup(\"Testing 3\", groupBuilder => groupBuilder .AddText(\"prop_4\", \"Test\", new ProxyRef<string>(() => _stringValue, o => _stringValue = o), null)) .CreatePreset(\"Test\", presetBuilder => presetBuilder .SetPropertyValue(\"prop_1\", true) .SetPropertyValue(\"prop_2\", 2) .SetPropertyValue(\"prop_3\", 1.5F) .SetPropertyValue(\"prop_4\", \"HueHueHue\")); var globalSettings = builder.BuildAsGlobal(); globalSettings.Register(); globalSettings.Unregister(); // Register only when a campaign was already loaded! var perCampaignSettings = builder.BuildAsPerCampaign(); perCampaignSettings.Register(); perCampaignSettings.Unregister(); // Register only when a campaign was already loaded! var perSaveSettings = builder.BuildAsPerSave(); perSaveSettings.Register(); perSaveSettings.Unregister(); Translating MCM Just create a module and include in the module folder root folders ModuleData/Languages and include the translations of the following files: sta_strings.xml The game will load them automatically! Migrating from v4 Check this page! Notes Settings.Instance is available after OnSubModuleLoad, so the earliest you can use it is inside OnBeforeInitialModuleScreenSetAsRoot"
  },
  "articles/contributors.html": {
    "href": "articles/contributors.html",
    "title": "| MCM Documentation",
    "summary": "Make sure that GameFolder property in build/common.props corresponds to the location of where the root Bannerlord folder is. Make sure that you can access BUTR NuGet feed. Make sure that every test is passing before sharing your constribution!"
  },
  "articles/index.html": {
    "href": "articles/index.html",
    "title": "| MCM Documentation",
    "summary": ""
  },
  "index.html": {
    "href": "index.html",
    "title": "| MCM Documentation",
    "summary": "AKA MBOptionScreen Standalone. Previously, a fork of ModLib that was de-forked. Sources available at GitHub\uFEFF! Credits to Drogean\uFEFF for the MCM Logos! MCM is a Mod Options screen library designed to let modders use its API for defining the options. MCM supports three setting types - Global, PerCampaign and PerSave. Global are shared across characters and saves, PerCampaign are persistent within a single campaign, PerSave are stored within the save file! It provides 5 types of options: Bool Int Slider / Textbox Float Slider / Textbox Textbox Dropdown Button The settings can be defined at compile time by using the Attribute API and at runtime by using the Fluent Builder. MCM uses the following 3 framework level libraries: Harmony is used to have a single 0Harmony.dll across the game. ButterLib is a general modding library that eases mod development. UIExtenderEx is an general UI manipulation library. See the Docs for more details! Installation Players Requires Bannerlord.Harmony, Bannerlord.UIExtenderEx, Bannerlord.ButterLib. Developers Add this to your .csproj. Please not that IncludeAssets=\"compile\" is very important! <ItemGroup> <PackageReference Include=\"Bannerlord.MCM\" Version=\"4.3.16\" IncludeAssets=\"compile\" /> </ItemGroup> FAQ How do I install it? Find the Modules folder in your Bannerlord installation location. For Steam users, this is usually here: \uFEFFC:\\Program Files (x86)\\Steam\\steamapps\\common\\Mount & Blade II Bannerlord\\Modules Download the latest version of this mod and drop the folder inside Modules from the archive into your game's Modules folder. Start the Mount & Blade II: Bannerlord launcher and select all Mod Configuration Menu mods to be loaded. Your Modules folder structure should look something like this: Your mod order in the launcher should look something like this: Unblocking DLL's You may need to right click on every *.dll files, click Properties, and click Unblock if you extracted the zip file with Windows Explorer or other programs that try to secure extracted files. Harmony installation issues: Check Harmony's \uFEFFTroubleshooting for more info on how to fix it. Crashes on v1.0.0-v1.0.3 with Vortex used Check this comment"
  }
}